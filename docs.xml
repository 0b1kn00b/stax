<haxe>
	<class path="AllClasses" params="" file="src/main/haxe/AllClasses.hx">
		<__meta__ public="1" line="136" static="1"><d/></__meta__>
		<main public="1" set="method" line="139" static="1"><f a=""><c path="AllClasses"/></f></main>
		<new public="1" set="method" line="141"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Array" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/Array.hx" extern="1">
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new Array.
	</haxe_doc>
		</new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="Class" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="Date" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="42" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>
		Returns a Date representing the current local time.
	</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="46" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.
	</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="52" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.
	</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.
	</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the hours value of the date (0-23 range).
	</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the minutes value of the date (0-59 range).
	</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the seconds of the date (0-59 range).
	</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the full year of the date.
	</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the month of the date (0-11 range).
	</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the day of the date (1-31 range).
	</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the week day of the date (0-6 range).
	</haxe_doc>
		</getDay>
		<toString public="1" get="inline" set="null" line="38">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new date object.
	</haxe_doc>
		</new>
		<haxe_doc>
	The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.
</haxe_doc>
	</class>
	<class path="EReg" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/EReg.hx">
		<r><d/></r>
		<match public="1" set="method" line="35">
			<f a="s">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the regular expression matches the String.
		Updates the internal state accordingly.
	</haxe_doc>
		</match>
		<matched public="1" set="method" line="42">
			<f a="n">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a matched group or throw an expection if there
		is no such group. If [n = 0], the whole matched substring
		is returned.
	</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="46">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was as the left of
		of the matched substring.
	</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="51">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was at the right of
		of the matched substring.
	</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="57">
			<f a=""><a>
	<pos><c path="Int"/></pos>
	<len><c path="Int"/></len>
</a></f>
			<haxe_doc>
		Returns the position of the matched substring within the
		original matched string.
	</haxe_doc>
		</matchedPos>
		<split public="1" set="method" line="62">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split a string by using the regular expression to match
		the separators.
	</haxe_doc>
		</split>
		<replace public="1" set="method" line="68">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replaces a pattern by another string. The [by] format can
		contains [$1] to [$9] that will correspond to groups matched
		while replacing. [$$] means the [$] character.
	</haxe_doc>
		</replace>
		<customReplace public="1" set="method" line="72">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>
		For each occurence of the pattern in the string [s], the function [f] is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the [g] flag might cause some incorrect behavior on some platforms.
	</haxe_doc>
		</customReplace>
		<new public="1" set="method" line="30">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new regular expression with pattern [r] and
		options [opt].
	</haxe_doc>
		</new>
		<haxe_doc>
	Regular expressions are a way to find regular patterns into
	Strings. Have a look at the tutorial on haXe website to learn
	how to use them.
</haxe_doc>
	</class>
	<class path="Enum" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/Enum.hx" extern="1"><haxe_doc>
	An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="EnumValue" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/EnumValue.hx" extern="1"><haxe_doc>
	An abstract type that represents any enum value.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="Hash" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/Hash.hx">
		<h><d/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="64">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="73">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty hashtable.
	</haxe_doc>
		</new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="HxOverrides" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/HxOverrides.hx">
		<Date_toString public="1" set="method" line="32" static="1"><f a="date">
	<c path="Date"/>
	<c path="String"/>
</f></Date_toString>
		<Date_fromString public="1" set="method" line="46" static="1"><f a="s">
	<c path="String"/>
	<c path="Date"/>
</f></Date_fromString>
		<String_charCodeAt public="1" set="method" line="69" static="1"><f a="s:index">
	<c path="String"/>
	<c path="Int"/>
	<t path="Null"><c path="Int"/></t>
</f></String_charCodeAt>
		<String_substr public="1" set="method" line="76" static="1"><f a="s:pos:?len">
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></String_substr>
		<haxe_doc>
 * Static methods that override calls to built-in JS methods.
 * @private
 </haxe_doc>
	</class>
	<class path="IntHash" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/IntHash.hx">
		<h><d/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="52">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="63">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="72">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty hashtable.
	</haxe_doc>
		</new>
		<haxe_doc>
	Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.
</haxe_doc>
	</class>
	<class path="IntIter" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/IntIter.hx">
		<min><c path="Int"/></min>
		<max><c path="Int"/></max>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns true if the iterator has other items, false otherwise.
	</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Moves to the next item of the iterator.
	</haxe_doc>
		</next>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.
	]]></haxe_doc>
		</new>
		<haxe_doc>
	Integer iterator. Used for interval implementation.
</haxe_doc>
	</class>
	<class path="Lambda" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/Lambda.hx">
		<array public="1" params="A" set="method" line="35" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>
		Creates an [Array] from an [Iterable]
	</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>
		Creates a [List] from an [Iterable]
	</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="56" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>
		Creates a new [Iterable] by appling the function 'f' to all
		elements of the iterator 'it'.
	</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="66" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<c path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>
		Similar to [map], but also pass an index for each item iterated.
	</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="81" static="1">
			<f a="it:elt:?cmp">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<f a=":">
					<c path="has.A"/>
					<c path="has.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the element is part of an iterable. The comparison
		is made using the [==] operator. Optionally you can pass as
		a third parameter a function that performs the comparison.
		That function must take as arguments the two items to
		compare and returns a boolean value.
	</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="97" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if at least one element of the iterable is found by using the specific function.
	</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="107" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if all elements of the iterable have the specified property defined by [f].
	</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="117" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Call the function 'f' on all elements of the [Iterable] 'it'.
	</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>
		Return the list of elements matching the function 'f'
	</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="136" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>
		Functional 'fold' using an [Iterable]
	</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="145" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<e path="Bool"/>
				</f>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Count the number of elements in an [Iterable] having [pred] returning true.
	</haxe_doc>
		</count>
		<empty public="1" set="method" line="160" static="1">
			<f a="it">
				<t path="Iterable"><d/></t>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an iterable does not contain any element.
	</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="168" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the item in the given Iterable, depending on the order of the Iterator.
		Returns -1 if the item was not found.
	</haxe_doc>
		</indexOf>
		<concat public="1" params="T" set="method" line="181" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>
		Returns a list containing all items of 'a' followed by all items of 'b'
	</haxe_doc>
		</concat>
		<haxe_doc>
	The [Lambda] class is a collection of functional methods in order to
	use functional-style programming with haXe.
</haxe_doc>
	</class>
	<class path="List" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of elements in this list.
	</haxe_doc>
		</length>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the end of the list.
	</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Push an element at the beginning of the list.
	</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<last public="1" set="method" line="88">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>
		Returns the last element of the list, or null
		if the list is empty.
	</haxe_doc>
		</last>
		<pop public="1" set="method" line="98">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="112">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="119">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Makes the list empty.
	</haxe_doc>
		</clear>
		<remove public="1" set="method" line="129">
			<f a="v">
				<c path="List.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="191">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<join public="1" set="method" line="211">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Join the element of the list by using the separator [sep].
	</haxe_doc>
		</join>
		<filter public="1" set="method" line="230">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>
		Returns a list filtered with [f]. The returned list
		will contain all elements [x] for which [f(x) = true].
	</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="246">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>
		Returns a new list where all elements have been converted
		by the function [f].
	</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.
</haxe_doc>
	</class>
	<class path="Math" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="Reflect" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/Reflect.hx">
		<hasField public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="41" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<getProperty public="1" get="inline" set="null" line="45" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Similar to field but also supports property (might be slower).
	</haxe_doc>
		</getProperty>
		<setProperty public="1" get="inline" set="null" line="50" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Similar to setField but also supports property (might be slower).
	</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="55" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="59" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="70" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="74" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="78" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="86" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="93" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="99" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="106" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<class path="Stax" params="" file="src/main/haxe/Stax.hx">
		<here public="1" set="method" line="24" static="1"><f a="?pos">
	<t path="haxe.PosInfos"/>
	<t path="haxe.PosInfos"/>
</f></here>
		<tool public="1" params="A" get="inline" set="null" line="27" static="1"><f a="?order:?equal:?hash:?show">
	<t path="stx.OrderFunction"><c path="tool.A"/></t>
	<t path="stx.EqualFunction"><c path="tool.A"/></t>
	<t path="stx.HashFunction"><c path="tool.A"/></t>
	<t path="stx.ShowFunction"><c path="tool.A"/></t>
	<t path="stx.CollectionTools"><c path="tool.A"/></t>
</f></tool>
		<noop0 public="1" set="method" line="30" static="1"><f a=""><f a=""><e path="Void"/></f></f></noop0>
		<noop1 public="1" params="A" set="method" line="33" static="1"><f a=""><f a="a">
	<c path="noop1.A"/>
	<e path="Void"/>
</f></f></noop1>
		<noop2 public="1" params="A:B" set="method" line="36" static="1"><f a=""><f a="a:b">
	<c path="noop2.A"/>
	<c path="noop2.B"/>
	<e path="Void"/>
</f></f></noop2>
		<noop3 public="1" params="A:B:C" set="method" line="39" static="1"><f a=""><f a="a:b:c">
	<c path="noop3.A"/>
	<c path="noop3.B"/>
	<c path="noop3.C"/>
	<e path="Void"/>
</f></f></noop3>
		<noop4 public="1" params="A:B:C:D" set="method" line="42" static="1"><f a=""><f a="a:b:c:d">
	<c path="noop4.A"/>
	<c path="noop4.B"/>
	<c path="noop4.C"/>
	<c path="noop4.D"/>
	<e path="Void"/>
</f></f></noop4>
		<noop5 public="1" params="A:B:C:D:E" set="method" line="45" static="1"><f a=""><f a="a:b:c:d:e">
	<c path="noop5.A"/>
	<c path="noop5.B"/>
	<c path="noop5.C"/>
	<c path="noop5.D"/>
	<c path="noop5.E"/>
	<e path="Void"/>
</f></f></noop5>
		<identity public="1" params="A" set="method" line="48" static="1"><f a=""><t path="stx.Function1">
	<c path="identity.A"/>
	<c path="identity.A"/>
</t></f></identity>
		<unfold public="1" params="T:R" set="method" line="51" static="1"><f a="initial:unfolder">
	<c path="unfold.T"/>
	<f a="">
		<c path="unfold.T"/>
		<e path="stx.Option"><c path="stx.Tuple2">
	<c path="unfold.T"/>
	<c path="unfold.R"/>
</c></e>
	</f>
	<t path="Iterable"><c path="unfold.R"/></t>
</f></unfold>
		<error public="1" params="T" set="method" line="88" static="1"><f a="msg:?pos">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<c path="error.T"/>
</f></error>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="ArrayLambda" params="" file="src/main/haxe/Stax.hx" module="Stax">
		<map public="1" params="T:S" get="inline" set="null" line="92" static="1"><f a="a:f">
	<c path="Array"><c path="map.T"/></c>
	<f a="">
		<c path="map.T"/>
		<c path="map.S"/>
	</f>
	<c path="Array"><c path="map.S"/></c>
</f></map>
		<flatMap public="1" params="T:S" get="inline" set="null" line="99" static="1"><f a="a:f">
	<c path="Array"><c path="flatMap.T"/></c>
	<f a="">
		<c path="flatMap.T"/>
		<t path="Iterable"><c path="flatMap.S"/></t>
	</f>
	<c path="Array"><c path="flatMap.S"/></c>
</f></flatMap>
		<foldl public="1" params="T:Z" get="inline" set="null" line="108" static="1"><f a="a:z:f">
	<c path="Array"><c path="foldl.T"/></c>
	<c path="foldl.Z"/>
	<f a=":">
		<c path="foldl.Z"/>
		<c path="foldl.T"/>
		<c path="foldl.Z"/>
	</f>
	<c path="foldl.Z"/>
</f></foldl>
		<filter public="1" params="T" get="inline" set="null" line="115" static="1"><f a="a:f">
	<c path="Array"><c path="filter.T"/></c>
	<f a="">
		<c path="filter.T"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="filter.T"/></c>
</f></filter>
		<size public="1" params="T" set="method" line="124" static="1"><f a="a">
	<c path="Array"><c path="size.T"/></c>
	<c path="Int"/>
</f></size>
		<snapshot public="1" params="T" set="method" line="127" static="1"><f a="a">
	<c path="Array"><c path="snapshot.T"/></c>
	<c path="Array"><c path="snapshot.T"/></c>
</f></snapshot>
		<foreach public="1" params="T" set="method" line="130" static="1"><f a="a:f">
	<c path="Array"><c path="foreach.T"/></c>
	<f a="">
		<c path="foreach.T"/>
		<e path="Void"/>
	</f>
	<c path="Array"><c path="foreach.T"/></c>
</f></foreach>
	</class>
	<class path="IterableLambda" params="" file="src/main/haxe/Stax.hx" module="Stax">
		<toArray public="1" params="T" get="inline" set="null" line="137" static="1"><f a="i">
	<t path="Iterable"><c path="toArray.T"/></t>
	<c path="Array"><c path="toArray.T"/></c>
</f></toArray>
		<toIterable public="1" params="T" set="method" line="142" static="1"><f a="it">
	<t path="Iterator"><c path="toIterable.T"/></t>
	<t path="Iterable"><c path="toIterable.T"/></t>
</f></toIterable>
		<map public="1" params="T:Z" set="method" line="152" static="1"><f a="iter:f">
	<t path="Iterable"><c path="map.T"/></t>
	<f a="">
		<c path="map.T"/>
		<c path="map.Z"/>
	</f>
	<t path="Iterable"><c path="map.Z"/></t>
</f></map>
		<flatMap public="1" params="T:Z" set="method" line="159" static="1"><f a="iter:f">
	<t path="Iterable"><c path="flatMap.T"/></t>
	<f a="">
		<c path="flatMap.T"/>
		<t path="Iterable"><c path="flatMap.Z"/></t>
	</f>
	<t path="Iterable"><c path="flatMap.Z"/></t>
</f></flatMap>
		<foldl public="1" params="T:Z" set="method" line="165" static="1"><f a="iter:seed:mapper">
	<t path="Iterable"><c path="foldl.T"/></t>
	<c path="foldl.Z"/>
	<f a=":">
		<c path="foldl.Z"/>
		<c path="foldl.T"/>
		<c path="foldl.Z"/>
	</f>
	<c path="foldl.Z"/>
</f></foldl>
		<filter public="1" params="T" set="method" line="170" static="1"><f a="iter:f">
	<t path="Iterable"><c path="filter.T"/></t>
	<f a="">
		<c path="filter.T"/>
		<e path="Bool"/>
	</f>
	<t path="Iterable"><c path="filter.T"/></t>
</f></filter>
		<size public="1" params="T" set="method" line="173" static="1"><f a="iterable">
	<t path="Iterable"><c path="size.T"/></t>
	<c path="Int"/>
</f></size>
		<foreach public="1" params="T" set="method" line="180" static="1"><f a="iter:f">
	<t path="Iterable"><c path="foreach.T"/></t>
	<f a="">
		<c path="foreach.T"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></foreach>
	</class>
	<class path="IntIters" params="" file="src/main/haxe/Stax.hx" module="Stax">
		<to public="1" set="method" line="185" static="1"><f a="start:end">
	<c path="Int"/>
	<c path="Int"/>
	<t path="Iterable"><c path="Int"/></t>
</f></to>
		<until public="1" set="method" line="198" static="1"><f a="start:end">
	<c path="Int"/>
	<c path="Int"/>
	<t path="Iterable"><c path="Int"/></t>
</f></until>
	</class>
	<class path="String" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[
		Returns a part of the String, taking from [startIndex] to [endIndex] - 1.
		If [endIndex] is not specified, length is used.
		If [startIndex] or [endIndex] is smaller than 0, than 0 is used.
		If [startIndex] > [endIndex] then they are swaped.
	]]></haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="39">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="43">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a copy from a given String.
	</haxe_doc>
		</new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<class path="Std" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/Std.hx">
		<is public="1" get="inline" set="null" line="29" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" line="33" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="37" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="41" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="51" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="55" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<enum path="Void" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="Float" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<typedef path="Iterator" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<class path="StringBuf" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StringBuf.hx">
		<add public="1" get="inline" set="null" line="50">
			<f a="x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="67">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a part of a string to the string buffer.
	</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="89">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a character to the string buffer.
	</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="107">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<b><c path="Array"><d/></c></b>
		<new public="1" set="method" line="35">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new string buffer.
	</haxe_doc>
		</new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<class path="StringTools" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/StringTools.hx">
		<urlEncode public="1" set="method" line="41" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode an URL by using the standard format.
	</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="66" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Decode an URL using the standard format.
	</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="91" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Escape HTML special characters of the string.
	</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="98" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Unescape HTML special characters of the string.
	</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="109" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] starts with the string [start].
	</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="122" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] ends with the string [end].
	</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="137" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the character in the string [s] at position [pos] is a space.
	</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="145" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the left of the String [s].
	</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="166" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the right of the String [s].
	</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="188" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the beginning and the end of the String [s].
	</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="201" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its right until it reach [l] characters.
	</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="223" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its left until it reach [l] characters.
	</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="248" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replace all occurences of the string [sub] in the string [s] by the string [by].
	</haxe_doc>
		</replace>
		<hex public="1" set="method" line="263" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.
	</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="286" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.
	</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="312" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<haxe_doc>
	The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="40" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>
		Returns the class of a value or [null] if this value is not a Class instance.
	</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="48" static="1">
			<f a="o">
				<c path="EnumValue"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Returns the enum of a value or [null] if this value is not an Enum instance.
	</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="54" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Returns the super-class of a class, or null if no super class.
	</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="59" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of a class.
	</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="64" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of an enum.
	</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="69" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Evaluates a class from a name. The class must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="77" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Evaluates an enum from a name. The enum must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="85" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>
		Creates an instance of the given class with the list of constructor arguments.
	</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="111" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>
		Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.
	</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="116" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor name and parameters.
	</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="128" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor index and parameters.
	</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="134" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of instance fields.
	</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="142" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of a class static fields.
	</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="152" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns all the available constructor names for an enum.
	</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="157" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>
		Returns the runtime type of a value.
	</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="187" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Recursively compare two enums constructors and parameters.
	</haxe_doc>
		</enumEq>
		<enumConstructor public="1" get="inline" set="null" line="205" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the constructor of an enum
	</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" get="inline" set="null" line="209" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Returns the parameters of an enum
	</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="213" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the constructor of an enum
	</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="217" static="1">
			<f a="e">
				<c path="Enum"><c path="allEnums.T"/></c>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>
		Returns the list of all enum values that don't take any parameter.
	</haxe_doc>
		</allEnums>
		<haxe_doc>
	The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.
</haxe_doc>
	</class>
	<enum path="XmlType" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/Xml.hx" module="Xml"/>
	<class path="Xml" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</DocType>
		<Prolog public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Prolog>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Document>
		<parse public="1" set="method" line="50" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Parse a String into an Xml object.
	</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="57" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="66" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="73" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="80" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="87" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocType>
		<createProlog public="1" set="method" line="94" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createProlog>
		<createDocument public="1" set="method" line="101" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>
		Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.
	</haxe_doc>
		</nodeType>
		<nodeName public="1" get="getNodeName" set="setNodeName">
			<c path="String"/>
			<haxe_doc>
		Returns the node name of an Element.
	</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="getNodeValue" set="setNodeValue">
			<c path="String"/>
			<haxe_doc>
		Returns the node value. Only works if the Xml node is not an Element or a Document.
	</haxe_doc>
		</nodeValue>
		<parent public="1" get="getParent" set="null">
			<c path="Xml"/>
			<haxe_doc>
		Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.
	</haxe_doc>
		</parent>
		<_nodeName><c path="String"/></_nodeName>
		<_nodeValue><c path="String"/></_nodeValue>
		<_attributes><c path="Hash"><c path="String"/></c></_attributes>
		<_children><c path="Array"><c path="Xml"/></c></_children>
		<_parent><c path="Xml"/></_parent>
		<getNodeName set="method" line="108"><f a=""><c path="String"/></f></getNodeName>
		<setNodeName set="method" line="114"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></setNodeName>
		<getNodeValue set="method" line="120"><f a=""><c path="String"/></f></getNodeValue>
		<setNodeValue set="method" line="126"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></setNodeValue>
		<getParent set="method" line="132"><f a=""><c path="Xml"/></f></getParent>
		<get public="1" set="method" line="136">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.
	</haxe_doc>
		</get>
		<set public="1" set="method" line="142">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set the given attribute value for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</set>
		<remove public="1" set="method" line="148">
			<f a="att">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Removes an attribute for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</remove>
		<exists public="1" set="method" line="154">
			<f a="att">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the Element node has a given attribute.
		Attributes are case-sensitive.
	</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="160">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an [Iterator] on all the attributes values.
	</haxe_doc>
		</attributes>
		<iterator public="1" set="method" line="166">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="180">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="212">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elementsNamed>
		<firstChild public="1" set="method" line="245">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node.
	</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="250">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node which is an Element.
	</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="263">
			<f a="x">
				<c path="Xml"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.
	</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="270">
			<f a="x">
				<c path="Xml"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.
	</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="278">
			<f a="x:pos">
				<c path="Xml"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts a child at the given position among the other childs.
	</haxe_doc>
		</insertChild>
		<toString public="1" set="method" line="285">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a String representation of the Xml node.
	</haxe_doc>
		</toString>
		<new set="method" line="54"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.
</haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="54" static="1"><f a=""><e path="Void"/></f></clear>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<enum path="haxe.StackItem" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/Stack.hx" module="haxe.Stack">
		<Module a="m"><c path="String"/></Module>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<Lambda a="v"><c path="Int"/></Lambda>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<c path="Int"/>
		</FilePos>
		<CFunction/>
		<haxe_doc>
	Elements return by [Stack] methods.
</haxe_doc>
	</enum>
	<class path="haxe.Stack" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/Stack.hx">
		<callStack public="1" set="method" line="46" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>
		Return the call stack elements.
	</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="69" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>
		Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		catched.
	</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="100" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of the stack as a printable string.
	</haxe_doc>
		</toString>
		<itemToString set="method" line="109" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<e path="Void"/>
</f></itemToString>
		<makeStack set="method" line="135" static="1"><f a="s">
	<unknown/>
	<unknown/>
</f></makeStack>
		<haxe_doc>
	Get informations about the call stack.
</haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/Timer.hx">
		<delay public="1" set="method" line="77" static="1">
			<f a="f:time_ms">
				<f a=""><e path="Void"/></f>
				<c path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>
		This will delay the call to [f] for the given time. [f] will only be called once.
	</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="91" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>
		Measure the time it takes to execute the function [f] and trace it. Returns the value returned by [f].
	</haxe_doc>
		</measure>
		<stamp public="1" set="method" line="101" static="1">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the most precise timestamp, in seconds. The value itself might differ depending on platforms, only differences between two values make sense.
	</haxe_doc>
		</stamp>
		<id><t path="Null"><c path="Int"/></t></id>
		<stop public="1" set="method" line="55">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Stop the timer definitely.
	</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="71">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		This is the [run()] method that is called when the Timer executes. It can be either overriden in subclasses or directly rebinded with another function-value.
	</haxe_doc>
		</run>
		<new public="1" set="method" line="39">
			<f a="time_ms">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Create a new timer that will run every [time_ms] (in milliseconds).
	</haxe_doc>
		</new>
		<haxe_doc>
	The Timer class allows you to create asynchronous timers on platforms that support events.
</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="225" static="1"><f a="length">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="253" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="292" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><c path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="37"><f a="pos">
	<c path="Int"/>
	<c path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="51"><f a="pos:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></set>
		<blit public="1" set="method" line="65"><f a="pos:src:srcpos:len">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></blit>
		<sub public="1" set="method" line="93"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="112"><f a="other">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
</f></compare>
		<readString public="1" set="method" line="148"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<toString public="1" set="method" line="192"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="207"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="221"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="32"><f a="length:b">
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/io/BytesData.hx"><c path="Array"><c path="Int"/></c></typedef>
	<enum path="haxe.io.Error" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/io/Error.hx">
		<Overflow><haxe_doc> An integer value is outside its allowed range </haxe_doc></Overflow>
		<OutsideBounds><haxe_doc> An operation on Bytes is outside of its valid range </haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc> Other errors </haxe_doc>
		</Custom>
		<Blocked><haxe_doc> The IO is set into nonblocking mode and some data cannot be read or written </haxe_doc></Blocked>
		<haxe_doc>
	The possible IO errors that can occur
</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.Path" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.CType" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CAnonymous a="fields"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<name><c path="String"/></name>
</a></c></CAnonymous>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.Rights" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RMethod/>
		<RInline/>
		<RDynamic/>
		<RCall a="m"><c path="String"/></RCall>
	</enum>
	<typedef path="haxe.rtti.ClassField" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<name><c path="String"/></name>
	<isPublic><e path="Bool"/></isPublic>
	<isOverride><e path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="haxe.rtti.PathParams"/></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<doc><c path="String"/></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><c path="Hash"><e path="haxe.rtti.CType"/></c></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<doc><c path="String"/></doc>
</a></typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.TypeApi" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="116" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="127" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></isVar>
		<leq params="T" set="method" line="134" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<e path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<e path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="148" static="1"><f a="r1:r2">
	<e path="haxe.rtti.Rights"/>
	<e path="haxe.rtti.Rights"/>
	<e path="Bool"/>
</f></rightsEq>
		<typeEq public="1" set="method" line="163" static="1"><f a="t1:t2">
	<e path="haxe.rtti.CType"/>
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></typeEq>
		<fieldEq public="1" set="method" line="212" static="1"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></fieldEq>
		<constructorEq public="1" set="method" line="232" static="1"><f a="c1:c2">
	<t path="haxe.rtti.EnumField"/>
	<t path="haxe.rtti.EnumField"/>
	<e path="Bool"/>
</f></constructorEq>
	</class>
	<class path="haxe.rtti.Infos" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/Infos.hx" interface="1"><haxe_doc>
	This is a magic interface. When a class implements [haxe.rtti.Infos], this class and all its
	subclass will get an additional static field [__rtti] storing the class type informations.
</haxe_doc></class>
	<class path="haxe.rtti.Meta" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="35" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given type (class or enum)
	</haxe_doc>
		</getType>
		<getStatics public="1" set="method" line="43" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class fields or enum constructors
	</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="51" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class static fields
	</haxe_doc>
		</getFields>
		<haxe_doc>
	An api to access classes and enums metadata at runtime.
</haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="38"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<e path="Void"/>
</f></sort>
		<sortFields set="method" line="64"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></sortFields>
		<process public="1" set="method" line="84"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<e path="Void"/>
</f></process>
		<mergeRights set="method" line="90"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeRights>
		<mergeFields set="method" line="99"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeFields>
		<mergeClasses set="method" line="103"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<e path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="139"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<e path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="159"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<e path="Bool"/>
</f></mergeTypedefs>
		<merge set="method" line="167"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<e path="Void"/>
</f></merge>
		<mkPath set="method" line="248"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="252"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="259"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="269"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<xroot set="method" line="273"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="279"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xpath set="method" line="289"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="300"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="336"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.ClassField"/>
</f></xclassfield>
		<xenum set="method" line="358"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="378"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xtypedef set="method" line="406"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="429"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="480"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="487"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="34"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="35"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<new public="1" set="method" line="31"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="54"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<new public="1" set="method" line="50"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="73"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="69"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="89"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="85"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="103"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<new public="1" set="method" line="99"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/xml/Fast.hx">
		<x public="1" set="null"><c path="Xml"/></x>
		<name public="1" get="getName" set="null"><c path="String"/></name>
		<innerData public="1" get="getInnerData" set="null"><c path="String"/></innerData>
		<innerHTML public="1" get="getInnerHTML" set="null"><c path="String"/></innerHTML>
		<node public="1" set="null"><c path="haxe.xml._Fast.NodeAccess"/></node>
		<nodes public="1" set="null"><c path="haxe.xml._Fast.NodeListAccess"/></nodes>
		<att public="1" set="null"><c path="haxe.xml._Fast.AttribAccess"/></att>
		<has public="1" set="null"><c path="haxe.xml._Fast.HasAttribAccess"/></has>
		<hasNode public="1" set="null"><c path="haxe.xml._Fast.HasNodeAccess"/></hasNode>
		<elements public="1" get="getElements" set="null"><t path="Iterator"><c path="haxe.xml.Fast"/></t></elements>
		<getName set="method" line="136"><f a=""><c path="String"/></f></getName>
		<getInnerData set="method" line="140"><f a=""><c path="String"/></f></getInnerData>
		<getInnerHTML set="method" line="160"><f a=""><c path="String"/></f></getInnerHTML>
		<getElements set="method" line="167"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><e path="Bool"/></f></hasNext>
</a></f></getElements>
		<new public="1" set="method" line="125"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml._Parser.S" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1">
		<IGNORE_SPACES public="1" get="inline" set="null" line="7" static="1"><c path="Int"/></IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" line="8" static="1"><c path="Int"/></BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" line="9" static="1"><c path="Int"/></BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" line="10" static="1"><c path="Int"/></TAG_NAME>
		<BODY public="1" get="inline" set="null" line="11" static="1"><c path="Int"/></BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" line="12" static="1"><c path="Int"/></ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" line="15" static="1"><c path="Int"/></ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" line="16" static="1"><c path="Int"/></CHILDS>
		<CLOSE public="1" get="inline" set="null" line="17" static="1"><c path="Int"/></CLOSE>
		<WAIT_END public="1" get="inline" set="null" line="18" static="1"><c path="Int"/></WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" line="19" static="1"><c path="Int"/></WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" line="20" static="1"><c path="Int"/></PCDATA>
		<HEADER public="1" get="inline" set="null" line="21" static="1"><c path="Int"/></HEADER>
		<COMMENT public="1" get="inline" set="null" line="22" static="1"><c path="Int"/></COMMENT>
		<DOCTYPE public="1" get="inline" set="null" line="23" static="1"><c path="Int"/></DOCTYPE>
		<CDATA public="1" get="inline" set="null" line="24" static="1"><c path="Int"/></CDATA>
	</class>
	<class path="haxe.xml.Parser" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/haxe/xml/Parser.hx">
		<parse public="1" set="method" line="29" static="1"><f a="str">
	<c path="String"/>
	<c path="Xml"/>
</f></parse>
		<doParse set="method" line="36" static="1"><f a="str:?p:?parent">
	<c path="String"/>
	<c path="Int"/>
	<c path="Xml"/>
	<c path="Int"/>
</f></doParse>
		<isValidChar get="inline" set="null" line="281" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isValidChar>
	</class>
	<class path="js.Boot" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Boot.hx">
		<__unhtml set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unhtml>
		<__trace set="method" line="33" static="1"><f a="v:i">
	<a>
		<toString set="null"><f a=""><c path="String"/></f></toString>
		<length set="null"><c path="Int"/></length>
		<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
		<__name__ set="null"><unknown/></__name__>
		<__enum__ set="null"><unknown/></__enum__>
		<__ename__ set="null"><unknown/></__ename__>
	</a>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></__trace>
		<__clear_trace set="method" line="50" static="1"><f a=""><e path="Void"/></f></__clear_trace>
		<__string_rec set="method" line="62" static="1"><f a="o:s">
	<a>
		<toString set="null"><f a=""><c path="String"/></f></toString>
		<length set="null"><c path="Int"/></length>
		<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
		<__name__ set="null"><unknown/></__name__>
		<__enum__ set="null"><unknown/></__enum__>
		<__ename__ set="null"><unknown/></__ename__>
	</a>
	<a><length set="null"><c path="Int"/></length></a>
	<c path="String"/>
</f></__string_rec>
		<__interfLoop set="method" line="134" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<e path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="149" static="1"><f a="o:cl">
	<d/>
	<t path="#Array"/>
	<e path="Bool"/>
</f></__instanceof>
		<__cast set="method" line="182" static="1"><f a="o:t">
	<d/>
	<d/>
	<unknown/>
</f></__cast>
		<__init set="method" line="187" static="1"><f a=""><e path="Void"/></f></__init>
	</class>
	<class path="js.HtmlCollection" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom" extern="1">
		<length public="1" set="null"><c path="Int"/></length>
		<haxe_dynamic><c path="js.HtmlCollection.T"/></haxe_dynamic>
	</class>
	<typedef path="js.MetaDom" params="T" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<replaceChild set="method"><f a="child:oldChild">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
</f></removeChild>
	<previousSibling><c path="js.MetaDom.T"/></previousSibling>
	<parentNode><c path="js.MetaDom.T"/></parentNode>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><c path="js.MetaDom.T"/></nextSibling>
	<lastChild><c path="js.MetaDom.T"/></lastChild>
	<insertBefore set="method"><f a="newChild:refChild">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<firstChild><c path="js.MetaDom.T"/></firstChild>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<c path="js.MetaDom.T"/>
</f></cloneNode>
	<childNodes><c path="js.HtmlCollection"><c path="js.MetaDom.T"/></c></childNodes>
	<appendChild set="method"><f a="child">
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Dom" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx"><t path="js.MetaDom"><t path="js.Dom"/></t></typedef>
	<typedef path="js.HtmlDom" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.FormElement" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Anchor" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rev><c path="String"/></rev>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<rel><c path="String"/></rel>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<href><c path="String"/></href>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<accessKey><c path="String"/></accessKey>
</a></typedef>
	<typedef path="js.Body" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<vLink><c path="String"/></vLink>
	<title><c path="String"/></title>
	<text><c path="String"/></text>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<link><c path="String"/></link>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<bgColor><c path="String"/></bgColor>
	<background><c path="String"/></background>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<aLink><c path="String"/></aLink>
</a></typedef>
	<typedef path="js.Button" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Checkbox" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultChecked><e path="Bool"/></defaultChecked>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<checked><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Document" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<writeln set="method"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></writeln>
	<write set="method"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></write>
	<title><c path="String"/></title>
	<styleSheets><c path="js.HtmlCollection"><t path="js.StyleSheet"/></c></styleSheets>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<referrer><c path="String"/></referrer>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<open set="method"><f a=""><e path="Void"/></f></open>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<links><c path="js.HtmlCollection"><t path="js.Link"/></c></links>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<images><c path="js.HtmlCollection"><t path="js.Image"/></c></images>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getElementsByTag set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTag>
	<getElementsByName set="method"><f a="name">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByName>
	<getElementById set="method"><f a="id">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></getElementById>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<forms><c path="js.HtmlCollection"><t path="js.Form"/></c></forms>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<domain><c path="String"/></domain>
	<dir><c path="String"/></dir>
	<createTextNode set="method"><f a="text">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></createTextNode>
	<createElement set="method"><f a="name">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></createElement>
	<cookie><c path="String"/></cookie>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<body><t path="js.Body"/></body>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<anchors><c path="js.HtmlCollection"><t path="js.Anchor"/></c></anchors>
	<activeElement><t path="js.HtmlDom"/></activeElement>
</a></typedef>
	<typedef path="js.Event" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<target><t path="js.HtmlDom"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<shiftKey><e path="Bool"/></shiftKey>
	<screenY><c path="Int"/></screenY>
	<screenX><c path="Int"/></screenX>
	<keyCode><c path="Int"/></keyCode>
	<ctrlKey><e path="Bool"/></ctrlKey>
	<clientY><c path="Int"/></clientY>
	<clientX><c path="Int"/></clientX>
	<cancelBubble><e path="Bool"/></cancelBubble>
	<button><c path="Int"/></button>
	<altKey><e path="Bool"/></altKey>
</a></typedef>
	<typedef path="js.FileUpload" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Form" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<tabIndex><c path="Int"/></tabIndex>
	<submit set="method"><f a=""><e path="Void"/></f></submit>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<reset set="method"><f a=""><e path="Void"/></f></reset>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onsubmit><f a="">
	<t path="js.Event"/>
	<e path="Bool"/>
</f></onsubmit>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onreset><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onreset>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<method><c path="String"/></method>
	<length><c path="Int"/></length>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<enctype><c path="String"/></enctype>
	<encoding><c path="String"/></encoding>
	<elements><c path="js.HtmlCollection"><t path="js.FormElement"/></c></elements>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<action><c path="String"/></action>
	<acceptCharset><c path="String"/></acceptCharset>
</a></typedef>
	<typedef path="js.Frame" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrolling><c path="String"/></scrolling>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<noResize><e path="Bool"/></noResize>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<marginWidth><c path="String"/></marginWidth>
	<marginHeight><c path="String"/></marginHeight>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<frameBorder><c path="String"/></frameBorder>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<contentDocument><t path="js.Document"/></contentDocument>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Frameset" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rows><c path="Int"/></rows>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cols><c path="Int"/></cols>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Hidden" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.History" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<length><c path="Int"/></length>
	<go set="method"><f a="p">
	<d/>
	<e path="Void"/>
</f></go>
	<forward set="method"><f a=""><e path="Void"/></f></forward>
	<back set="method"><f a=""><e path="Void"/></f></back>
</a></typedef>
	<typedef path="js.IFrame" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrolling><c path="String"/></scrolling>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<marginWidth><c path="String"/></marginWidth>
	<marginHeight><c path="String"/></marginHeight>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<height><c path="Int"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<frameBorder><c path="String"/></frameBorder>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<contentWindow><t path="js.Window"/></contentWindow>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Image" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<vspace><c path="Int"/></vspace>
	<useMap><c path="String"/></useMap>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<onerror><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onerror>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<onabort><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onabort>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lowsrc><c path="String"/></lowsrc>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<isMap><e path="Bool"/></isMap>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hspace><c path="Int"/></hspace>
	<height><c path="Int"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<complete><e path="Bool"/></complete>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<border><c path="String"/></border>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<alt><c path="String"/></alt>
	<align><c path="String"/></align>
</a></typedef>
	<typedef path="js.Link" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rev><c path="String"/></rev>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<rel><c path="String"/></rel>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<media><c path="String"/></media>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hreflang><c path="String"/></hreflang>
	<href><c path="String"/></href>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<charset><c path="String"/></charset>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Location" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<search><c path="String"/></search>
	<replace set="method"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></replace>
	<reload set="method"><f a="?forceReload">
	<e path="Bool"/>
	<e path="Void"/>
</f></reload>
	<protocol><c path="String"/></protocol>
	<port><c path="Int"/></port>
	<pathname><c path="String"/></pathname>
	<href><c path="String"/></href>
	<hostname><c path="String"/></hostname>
	<host><c path="String"/></host>
	<hash><c path="String"/></hash>
	<assign set="method"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></assign>
</a></typedef>
	<typedef path="js.Navigator" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<userAgent><c path="String"/></userAgent>
	<taintEnabled set="method"><f a=""><e path="Bool"/></f></taintEnabled>
	<platform><c path="String"/></platform>
	<javaEnabled set="method"><f a=""><e path="Bool"/></f></javaEnabled>
	<cookieEnabled><e path="Bool"/></cookieEnabled>
	<appVersion><c path="String"/></appVersion>
	<appName><c path="String"/></appName>
	<appCodeName><c path="String"/></appCodeName>
</a></typedef>
	<typedef path="js.Option" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<text><c path="String"/></text>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<selected><e path="Bool"/></selected>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultSelected><e path="Bool"/></defaultSelected>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Password" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<maxLength><c path="Int"/></maxLength>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Radio" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultChecked><e path="Bool"/></defaultChecked>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<checked><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Reset" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Screen" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<height><c path="Int"/></height>
	<colorDepth><c path="Int"/></colorDepth>
	<availWidth><c path="Int"/></availWidth>
	<availHeight><c path="Int"/></availHeight>
</a></typedef>
	<typedef path="js.Select" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<selectedIndex><c path="Int"/></selectedIndex>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<remove set="method"><f a="o">
	<c path="Int"/>
	<e path="Void"/>
</f></remove>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<options><c path="js.HtmlCollection"><t path="js.Option"/></c></options>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<multiple><e path="Bool"/></multiple>
	<length><c path="Int"/></length>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Style" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<zoom><d/></zoom>
	<zIndex><c path="Int"/></zIndex>
	<writingMode><d/></writingMode>
	<wordWrap><d/></wordWrap>
	<wordSpacing><d/></wordSpacing>
	<wordBreak><d/></wordBreak>
	<width><c path="String"/></width>
	<whiteSpace><d/></whiteSpace>
	<visibility><d/></visibility>
	<verticalAlign><d/></verticalAlign>
	<unicodeBidi><d/></unicodeBidi>
	<top><c path="String"/></top>
	<textUnderlinePosition><d/></textUnderlinePosition>
	<textTransform><d/></textTransform>
	<textShadow><d/></textShadow>
	<textOverflow><d/></textOverflow>
	<textKashidaSpace><d/></textKashidaSpace>
	<textJustifyTrim><d/></textJustifyTrim>
	<textJustify><d/></textJustify>
	<textIndent><d/></textIndent>
	<textDecorationLineUnderline><d/></textDecorationLineUnderline>
	<textDecorationLineThrough><d/></textDecorationLineThrough>
	<textDecorationLineOverline><d/></textDecorationLineOverline>
	<textDecorationLineNone><d/></textDecorationLineNone>
	<textDecorationBlink><d/></textDecorationBlink>
	<textDecoration><d/></textDecoration>
	<textAutospace><d/></textAutospace>
	<textAlignLast><d/></textAlignLast>
	<textAlign><d/></textAlign>
	<styleFloat><d/></styleFloat>
	<rubyPosition><d/></rubyPosition>
	<rubyOverhang><d/></rubyOverhang>
	<rubyAlign><d/></rubyAlign>
	<right><c path="String"/></right>
	<quotes><d/></quotes>
	<position><d/></position>
	<paddingTop><d/></paddingTop>
	<paddingRight><d/></paddingRight>
	<paddingLeft><d/></paddingLeft>
	<paddingBottom><d/></paddingBottom>
	<padding><d/></padding>
	<overflowY><d/></overflowY>
	<overflowX><d/></overflowX>
	<overflow><d/></overflow>
	<outlineWidth><d/></outlineWidth>
	<outlineStyle><d/></outlineStyle>
	<outlineColor><d/></outlineColor>
	<outline><d/></outline>
	<minWidth><d/></minWidth>
	<minHeight><d/></minHeight>
	<maxWidth><d/></maxWidth>
	<maxHeight><d/></maxHeight>
	<marks><d/></marks>
	<markerOffset><d/></markerOffset>
	<marginTop><d/></marginTop>
	<marginRight><d/></marginRight>
	<marginLeft><d/></marginLeft>
	<marginBottom><d/></marginBottom>
	<margin><d/></margin>
	<listStyleType><c path="String"/></listStyleType>
	<listStylePosition><d/></listStylePosition>
	<listStyleImage><d/></listStyleImage>
	<listStyle><d/></listStyle>
	<lineHeight><d/></lineHeight>
	<lineBreak><d/></lineBreak>
	<letterSpacing><d/></letterSpacing>
	<left><c path="String"/></left>
	<height><c path="String"/></height>
	<fontWeight><d/></fontWeight>
	<fontVariant><d/></fontVariant>
	<fontStyle><d/></fontStyle>
	<fontStretch><d/></fontStretch>
	<fontSizeAdjust><d/></fontSizeAdjust>
	<fontSize><d/></fontSize>
	<fontFamily><d/></fontFamily>
	<font><d/></font>
	<display><d/></display>
	<direction><d/></direction>
	<cursor><d/></cursor>
	<cssText><d/></cssText>
	<cssFloat><d/></cssFloat>
	<counterReset><d/></counterReset>
	<counterIncrement><d/></counterIncrement>
	<content><d/></content>
	<color><d/></color>
	<clipTop><d/></clipTop>
	<clipRight><d/></clipRight>
	<clipLeft><d/></clipLeft>
	<clipBottom><d/></clipBottom>
	<clip><d/></clip>
	<clear><c path="String"/></clear>
	<bottom><c path="String"/></bottom>
	<borderWidth><d/></borderWidth>
	<borderTopWidth><d/></borderTopWidth>
	<borderTopStyle><d/></borderTopStyle>
	<borderTopColor><d/></borderTopColor>
	<borderTop><d/></borderTop>
	<borderStyle><c path="String"/></borderStyle>
	<borderRightWidth><d/></borderRightWidth>
	<borderRightStyle><d/></borderRightStyle>
	<borderRightColor><d/></borderRightColor>
	<borderRight><d/></borderRight>
	<borderLeftWidth><d/></borderLeftWidth>
	<borderLeftStyle><d/></borderLeftStyle>
	<borderLeftColor><d/></borderLeftColor>
	<borderLeft><d/></borderLeft>
	<borderColor><d/></borderColor>
	<borderBottomWidth><d/></borderBottomWidth>
	<borderBottomStyle><d/></borderBottomStyle>
	<borderBottomColor><d/></borderBottomColor>
	<borderBottom><d/></borderBottom>
	<border><d/></border>
	<backgroundRepeat><d/></backgroundRepeat>
	<backgroundPosition><d/></backgroundPosition>
	<backgroundImage><d/></backgroundImage>
	<backgroundColor><d/></backgroundColor>
	<backgroundAttachment><d/></backgroundAttachment>
	<background><d/></background>
</a></typedef>
	<typedef path="js.StyleSheet" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<href><c path="String"/></href>
	<disabled><e path="Bool"/></disabled>
</a></typedef>
	<typedef path="js.Submit" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselectstart><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselectstart>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Text" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<maxLength><c path="Int"/></maxLength>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Textarea" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rows><c path="Int"/></rows>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cols><c path="Int"/></cols>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Window" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Dom.hx" module="js.Dom"><a>
	<top><t path="js.Window"/></top>
	<status><c path="String"/></status>
	<self><t path="js.Window"/></self>
	<scrollTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollTo>
	<scrollBy set="method"><f a="dx:dy">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollBy>
	<screen><t path="js.Screen"/></screen>
	<prompt set="method"><f a="msg:?def">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></prompt>
	<print set="method"><f a=""><e path="Void"/></f></print>
	<parent><t path="js.Window"/></parent>
	<outerWidth><c path="Int"/></outerWidth>
	<outerHeight><c path="Int"/></outerHeight>
	<opener><t path="js.Window"/></opener>
	<open set="method"><f a="url:?name:?features">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<t path="js.Window"/>
</f></open>
	<onunload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onunload>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onerror><f a="::">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Bool"/>
</f></onerror>
	<navigator><t path="js.Navigator"/></navigator>
	<name><c path="String"/></name>
	<moveTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveTo>
	<moveBy set="method"><f a="dx:dy">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveBy>
	<location><t path="js.Location"/></location>
	<length><c path="Int"/></length>
	<innerWidth><c path="Int"/></innerWidth>
	<innerHeight><c path="Int"/></innerHeight>
	<history><t path="js.History"/></history>
	<frames><c path="js.HtmlCollection"><t path="js.Frame"/></c></frames>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<document><t path="js.Document"/></document>
	<defaultStatus><c path="String"/></defaultStatus>
	<confirm set="method"><f a="msg">
	<c path="String"/>
	<e path="Bool"/>
</f></confirm>
	<closed><e path="Bool"/></closed>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<alert set="method"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></alert>
</a></typedef>
	<class path="js.Lib" params="" file="C:\world\stack\os\win\prg\lingo\haxe\nightly/std/js/Lib.hx">
		<document public="1" static="1"><t path="js.Document"/></document>
		<window public="1" static="1"><t path="js.Window"/></window>
		<onerror line="33" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Bool"/>
</f></onerror>
		<debug public="1" get="inline" set="null" line="38" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Inserts a 'debugger' statement that will make a breakpoint if a debugger is available.
	</haxe_doc>
		</debug>
		<alert public="1" set="method" line="45" static="1">
			<f a="v">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Display an alert message box containing the given message
	</haxe_doc>
		</alert>
		<eval public="1" get="inline" set="null" line="49" static="1"><f a="code">
	<c path="String"/>
	<d/>
</f></eval>
		<setErrorHandler public="1" get="inline" set="null" line="53" static="1"><f a="f">
	<f a=":">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<e path="Bool"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
	</class>
	<class path="stx.Arrays" params="" file="src/main/haxe/stx/Arrays.hx">
		<partition public="1" params="T" set="method" line="43" static="1">
			<f a="arr:f">
				<c path="Array"><c path="partition.T"/></c>
				<f a="">
					<c path="partition.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.Tuple2">
					<c path="Array"><c path="partition.T"/></c>
					<c path="Array"><c path="partition.T"/></c>
				</c>
			</f>
			<haxe_doc>
  * Produces a Tuple2 containing two Arrays, the left being elements where f(e) == true, 
  * and the rest in the right.
  * @param The array to partition
  * @param A predicate
  </haxe_doc>
		</partition>
		<partitionWhile public="1" params="T" set="method" line="57" static="1">
			<f a="arr:f">
				<c path="Array"><c path="partitionWhile.T"/></c>
				<f a="">
					<c path="partitionWhile.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.Tuple2">
					<c path="Array"><c path="partitionWhile.T"/></c>
					<c path="Array"><c path="partitionWhile.T"/></c>
				</c>
			</f>
			<haxe_doc>
   * Produces a Tuple2 containing two Arrays, the difference from partition being that after the predicate
   * returns true once, the rest of the elements will be in the right hand of the Tuple, regardless of
   * the result of the predicate.
   </haxe_doc>
		</partitionWhile>
		<mapTo public="1" params="A:B" set="method" line="77" static="1">
			<f a="src:dest:f">
				<c path="Array"><c path="mapTo.A"/></c>
				<c path="Array"><c path="mapTo.B"/></c>
				<f a="">
					<c path="mapTo.A"/>
					<c path="mapTo.B"/>
				</f>
				<c path="Array"><c path="mapTo.B"/></c>
			</f>
			<haxe_doc>
  * Performs a map and delivers the results to the specified 'dest'
  </haxe_doc>
		</mapTo>
		<flatten public="1" params="T" set="method" line="86" static="1">
			<f a="arrs">
				<c path="Array"><c path="Array"><c path="flatten.T"/></c></c>
				<c path="Array"><c path="flatten.T"/></c>
			</f>
			<haxe_doc>
  * Produces an Array from an Array of Arrays
  </haxe_doc>
		</flatten>
		<interleave public="1" params="T" set="method" line="99" static="1">
			<f a="alls">
				<c path="Array"><c path="Array"><c path="interleave.T"/></c></c>
				<c path="Array"><c path="interleave.T"/></c>
			</f>
			<haxe_doc>
  * Weaves an Array of arrays so that [ array0[0] , array[0] ... arrayn[0] , array0[1], array1[1] ... ]
  * Continues to operate to the length of the shortest array, and drops the rest of the elements.return
  </haxe_doc>
		</interleave>
		<flatMapTo public="1" params="A:B" set="method" line="120" static="1">
			<f a="src:dest:f">
				<c path="Array"><c path="flatMapTo.A"/></c>
				<c path="Array"><c path="flatMapTo.B"/></c>
				<f a="">
					<c path="flatMapTo.A"/>
					<c path="Array"><c path="flatMapTo.B"/></c>
				</f>
				<c path="Array"><c path="flatMapTo.B"/></c>
			</f>
			<haxe_doc>
   * Performs a flatMap and delivers the reuslts to 'dest'
   </haxe_doc>
		</flatMapTo>
		<count public="1" params="T" set="method" line="130" static="1">
			<f a="arr:f">
				<c path="Array"><c path="count.T"/></c>
				<f a="">
					<c path="count.T"/>
					<e path="Bool"/>
				</f>
				<c path="Int"/>
			</f>
			<haxe_doc>
   * Counts some property of the elements of 'arr' using a predicate. For the size of the Array @see size()
   </haxe_doc>
		</count>
		<countWhile public="1" params="T" set="method" line="138" static="1">
			<f a="arr:f">
				<c path="Array"><c path="countWhile.T"/></c>
				<f a="">
					<c path="countWhile.T"/>
					<e path="Bool"/>
				</f>
				<c path="Int"/>
			</f>
			<haxe_doc>
   * Counts some property of the elements of 'arr' until the first false is returned from the predicate
   </haxe_doc>
		</countWhile>
		<scanl public="1" params="T" set="method" line="158" static="1">
			<f a="arr:init:f">
				<c path="Array"><c path="scanl.T"/></c>
				<c path="scanl.T"/>
				<f a=":">
					<c path="scanl.T"/>
					<c path="scanl.T"/>
					<c path="scanl.T"/>
				</f>
				<c path="Array"><c path="scanl.T"/></c>
			</f>
			<haxe_doc>
   * Takes an initial value which is passed to function 'f' along with each element
   * one by one, accumulating the results.return
   * f(element,init)
   </haxe_doc>
		</scanl>
		<scanr public="1" params="T" set="method" line="170" static="1">
			<f a="arr:init:f">
				<c path="Array"><c path="scanr.T"/></c>
				<c path="scanr.T"/>
				<f a=":">
					<c path="scanr.T"/>
					<c path="scanr.T"/>
					<c path="scanr.T"/>
				</f>
				<c path="Array"><c path="scanr.T"/></c>
			</f>
			<haxe_doc>
   * As scanl but from the end of the Array.
   </haxe_doc>
		</scanr>
		<scanl1 public="1" params="T" set="method" line="178" static="1">
			<f a="arr:f">
				<c path="Array"><c path="scanl1.T"/></c>
				<f a=":">
					<c path="scanl1.T"/>
					<c path="scanl1.T"/>
					<c path="scanl1.T"/>
				</f>
				<c path="Array"><c path="scanl1.T"/></c>
			</f>
			<haxe_doc>
   * As scanl, but using the first element as the second parameter of 'f'
   </haxe_doc>
		</scanl1>
		<scanr1 public="1" params="T" set="method" line="192" static="1">
			<f a="arr:f">
				<c path="Array"><c path="scanr1.T"/></c>
				<f a=":">
					<c path="scanr1.T"/>
					<c path="scanr1.T"/>
					<c path="scanr1.T"/>
				</f>
				<c path="Array"><c path="scanr1.T"/></c>
			</f>
			<haxe_doc>
   * As scanr, but using the first element as the second parameter of 'f'
   </haxe_doc>
		</scanr1>
		<elements public="1" params="T" set="method" line="200" static="1">
			<f a="arr">
				<c path="Array"><c path="elements.T"/></c>
				<t path="Iterable"><c path="elements.T"/></t>
			</f>
			<haxe_doc>
   * Returns the Array cast as an Iterable
   </haxe_doc>
		</elements>
		<appendAll public="1" params="T" set="method" line="206" static="1">
			<f a="arr:i">
				<c path="Array"><c path="appendAll.T"/></c>
				<t path="Iterable"><c path="appendAll.T"/></t>
				<c path="Array"><c path="appendAll.T"/></c>
			</f>
			<haxe_doc>
   * Appends the elements of 'i' to 'arr'
   </haxe_doc>
		</appendAll>
		<isEmpty public="1" params="T" set="method" line="217" static="1">
			<f a="arr">
				<c path="Array"><c path="isEmpty.T"/></c>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   *^Produces true if the Array is empty, false otherwise
   </haxe_doc>
		</isEmpty>
		<find public="1" params="T" set="method" line="224" static="1">
			<f a="arr:f">
				<c path="Array"><c path="find.T"/></c>
				<f a="">
					<c path="find.T"/>
					<e path="Bool"/>
				</f>
				<e path="stx.Option"><c path="find.T"/></e>
			</f>
			<haxe_doc>
   * Produces an Option Some(element) the first time the predicate returns true,
   * None otherwise.
   </haxe_doc>
		</find>
		<findIndexOf public="1" params="T" set="method" line="240" static="1">
			<f a="arr:obj">
				<c path="Array"><c path="findIndexOf.T"/></c>
				<c path="findIndexOf.T"/>
				<e path="stx.Option"><c path="Int"/></e>
			</f>
			<haxe_doc>
   * Returns an Option Some(index) if an object reference is contain in 'arr'
   *^None otherwise
   </haxe_doc>
		</findIndexOf>
		<forAll public="1" params="T" set="method" line="248" static="1">
			<f a="arr:f">
				<c path="Array"><c path="forAll.T"/></c>
				<f a="">
					<c path="forAll.T"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   * Produces true if the predicate returns true for all elements, false otherwise.
   </haxe_doc>
		</forAll>
		<forAny public="1" params="T" set="method" line="259" static="1">
			<f a="arr:f">
				<c path="Array"><c path="forAny.T"/></c>
				<f a="">
					<c path="forAny.T"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   * Produces true if the predicate returns true for any element, false otherwise.
   </haxe_doc>
		</forAny>
		<exists public="1" params="T" set="method" line="270" static="1">
			<f a="arr:f">
				<c path="Array"><c path="exists.T"/></c>
				<f a="">
					<c path="exists.T"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   * Determines if a value is contained in 'arr' using a predicate.
   </haxe_doc>
		</exists>
		<reversed public="1" params="T" set="method" line="279" static="1">
			<f a="arr">
				<c path="Array"><c path="reversed.T"/></c>
				<c path="Array"><c path="reversed.T"/></c>
			</f>
			<haxe_doc>
   * Produces an Array with the elements in reversed order.return
   </haxe_doc>
		</reversed>
		<existsP public="1" params="T" set="method" line="289" static="1">
			<f a="arr:ref:f">
				<c path="Array"><c path="existsP.T"/></c>
				<c path="existsP.T"/>
				<f a=":">
					<c path="existsP.T"/>
					<c path="existsP.T"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   * As with 'exists' but taking a second parameter in the predicate specified by 'ref'
   </haxe_doc>
		</existsP>
		<nubBy public="1" params="T" set="method" line="303" static="1">
			<f a="arr:f">
				<c path="Array"><c path="nubBy.T"/></c>
				<f a=":">
					<c path="nubBy.T"/>
					<c path="nubBy.T"/>
					<e path="Bool"/>
				</f>
				<c path="Array"><c path="nubBy.T"/></c>
			</f>
			<haxe_doc>
   * Produces an Array with no duplicate elements. Equality of the elements is determined
   * by 'f'.
   </haxe_doc>
		</nubBy>
		<nub public="1" params="T" set="method" line="316" static="1">
			<f a="arr">
				<c path="Array"><c path="nub.T"/></c>
				<c path="Array"><c path="nub.T"/></c>
			</f>
			<haxe_doc>
   * Produces an Array with no duplicate elements by comparing each element to all others.
   </haxe_doc>
		</nub>
		<intersectBy public="1" params="T" set="method" line="322" static="1">
			<f a="arr1:arr2:f">
				<c path="Array"><c path="intersectBy.T"/></c>
				<c path="Array"><c path="intersectBy.T"/></c>
				<f a=":">
					<c path="intersectBy.T"/>
					<c path="intersectBy.T"/>
					<e path="Bool"/>
				</f>
				<c path="Array"><c path="intersectBy.T"/></c>
			</f>
			<haxe_doc>
   * Intersetcs two Arrays, determining equality by 'f'
   </haxe_doc>
		</intersectBy>
		<intersect public="1" params="T" set="method" line="330" static="1">
			<f a="arr1:arr2">
				<c path="Array"><c path="intersect.T"/></c>
				<c path="Array"><c path="intersect.T"/></c>
				<c path="Array"><c path="intersect.T"/></c>
			</f>
			<haxe_doc>
   * Produces an Array of elements found in both 'arr' and 'arr2'.
   </haxe_doc>
		</intersect>
		<splitAt public="1" params="T" set="method" line="336" static="1">
			<f a="srcArr:index">
				<c path="Array"><c path="splitAt.T"/></c>
				<c path="Int"/>
				<c path="stx.Tuple2">
					<c path="Array"><c path="splitAt.T"/></c>
					<c path="Array"><c path="splitAt.T"/></c>
				</c>
			</f>
			<haxe_doc>
   * Produces a Tuple2, on the left those elements before 'index', on the right those elements on or after.
   </haxe_doc>
		</splitAt>
		<indexOf public="1" params="T" set="method" line="342" static="1"><f a="a:t">
	<c path="Array"><c path="indexOf.T"/></c>
	<c path="indexOf.T"/>
	<c path="Int"/>
</f></indexOf>
		<mapWithIndex public="1" params="T:S" set="method" line="356" static="1">
			<f a="a:f">
				<c path="Array"><c path="mapWithIndex.T"/></c>
				<f a=":">
					<c path="mapWithIndex.T"/>
					<c path="Int"/>
					<c path="mapWithIndex.S"/>
				</f>
				<c path="Array"><c path="mapWithIndex.S"/></c>
			</f>
			<haxe_doc>
   * Performs a map, taking element index as a second parameter of 'f'
   </haxe_doc>
		</mapWithIndex>
		<then public="1" params="T:S" set="method" line="366" static="1">
			<f a="a1:a2">
				<c path="Array"><c path="then.T"/></c>
				<c path="Array"><c path="then.S"/></c>
				<c path="Array"><c path="then.S"/></c>
			</f>
			<haxe_doc>
   * Swallows a1, returning a2
   </haxe_doc>
		</then>
		<foldr public="1" params="T:Z" set="method" line="372" static="1">
			<f a="a:z:f">
				<c path="Array"><c path="foldr.T"/></c>
				<c path="foldr.Z"/>
				<f a=":">
					<c path="foldr.T"/>
					<c path="foldr.Z"/>
					<c path="foldr.Z"/>
				</f>
				<c path="foldr.Z"/>
			</f>
			<haxe_doc>
   * As with foldl but working in reverse.
   </haxe_doc>
		</foldr>
		<zip public="1" params="A:B" set="method" line="386" static="1">
			<f a="a:b">
				<c path="Array"><c path="zip.A"/></c>
				<c path="Array"><c path="zip.B"/></c>
				<c path="Array"><c path="stx.Tuple2">
	<c path="zip.A"/>
	<c path="zip.B"/>
</c></c>
			</f>
			<haxe_doc>
   * Produces an Array of Tuple2 where Tuple2.t2(a[n],b[n]).
   </haxe_doc>
		</zip>
		<zipWith public="1" params="A:B:C" set="method" line="392" static="1">
			<f a="a:b:f">
				<c path="Array"><c path="zipWith.A"/></c>
				<c path="Array"><c path="zipWith.B"/></c>
				<f a=":">
					<c path="zipWith.A"/>
					<c path="zipWith.B"/>
					<c path="zipWith.C"/>
				</f>
				<c path="Array"><c path="zipWith.C"/></c>
			</f>
			<haxe_doc>
   * Produces an Array of the result of 'f' where the left parameter is a[n], and the right b[n]
   </haxe_doc>
		</zipWith>
		<zipWithIndex public="1" params="A" set="method" line="406" static="1">
			<f a="a">
				<c path="Array"><c path="zipWithIndex.A"/></c>
				<c path="Array"><c path="stx.Tuple2">
	<c path="zipWithIndex.A"/>
	<c path="Int"/>
</c></c>
			</f>
			<haxe_doc>
   * Performs a zip where the resulting tuple has the element on the left, and it's index on the right
   </haxe_doc>
		</zipWithIndex>
		<zipWithIndexWith public="1" params="A:B" set="method" line="412" static="1">
			<f a="a:f">
				<c path="Array"><c path="zipWithIndexWith.A"/></c>
				<f a=":">
					<c path="zipWithIndexWith.A"/>
					<c path="Int"/>
					<c path="zipWithIndexWith.B"/>
				</f>
				<c path="Array"><c path="zipWithIndexWith.B"/></c>
			</f>
			<haxe_doc>
   * Performs a zip with the right hand parameter is the index of the element.+
   </haxe_doc>
		</zipWithIndexWith>
		<append public="1" params="T" set="method" line="426" static="1">
			<f a="a:t">
				<c path="Array"><c path="append.T"/></c>
				<c path="append.T"/>
				<c path="Array"><c path="append.T"/></c>
			</f>
			<haxe_doc>
   * Adds a single element to the end of the Array.
   </haxe_doc>
		</append>
		<prepend public="1" params="T" set="method" line="436" static="1">
			<f a="a:t">
				<c path="Array"><c path="prepend.T"/></c>
				<c path="prepend.T"/>
				<c path="Array"><c path="prepend.T"/></c>
			</f>
			<haxe_doc>
   * Adds a single elements to the beginning if the Array.
   </haxe_doc>
		</prepend>
		<first public="1" params="T" set="method" line="446" static="1">
			<f a="a">
				<c path="Array"><c path="first.T"/></c>
				<c path="first.T"/>
			</f>
			<haxe_doc>
   * Prodcues the first element of Array 'a'.return
   </haxe_doc>
		</first>
		<firstOption public="1" params="T" set="method" line="452" static="1">
			<f a="a">
				<c path="Array"><c path="firstOption.T"/></c>
				<e path="stx.Option"><c path="firstOption.T"/></e>
			</f>
			<haxe_doc>
   * Produces the first element of 'a' as an Option, Option.None if the Array is empty.
   </haxe_doc>
		</firstOption>
		<last public="1" params="T" set="method" line="458" static="1">
			<f a="a">
				<c path="Array"><c path="last.T"/></c>
				<c path="last.T"/>
			</f>
			<haxe_doc>
   * ^Produces the last element of Array 'a'
  </haxe_doc>
		</last>
		<lastOption public="1" params="T" set="method" line="464" static="1">
			<f a="a">
				<c path="Array"><c path="lastOption.T"/></c>
				<e path="stx.Option"><c path="lastOption.T"/></e>
			</f>
			<haxe_doc>
   * Produces the last element of 'a' as an Option, Option.None if the Array is empty.
   </haxe_doc>
		</lastOption>
		<contains public="1" params="T" set="method" line="473" static="1">
			<f a="a:t">
				<c path="Array"><c path="contains.T"/></c>
				<c path="contains.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Produces true if Array 'a' contains element 't'.
	 * @param t a value which may be in the array.
	 * @return bool 
	 </haxe_doc>
		</contains>
		<foreachWithIndex public="1" params="T" set="method" line="481" static="1">
			<f a="a:f">
				<c path="Array"><c path="foreachWithIndex.T"/></c>
				<f a=":">
					<c path="foreachWithIndex.T"/>
					<c path="Int"/>
					<e path="Void"/>
				</f>
				<c path="Array"><c path="foreachWithIndex.T"/></c>
			</f>
			<haxe_doc>
   * Iterates Array 'a' applying function 'f' taking the element index as a second parameter
   </haxe_doc>
		</foreachWithIndex>
		<take public="1" params="T" set="method" line="490" static="1">
			<f a="a:n">
				<c path="Array"><c path="take.T"/></c>
				<c path="Int"/>
				<c path="Array"><c path="take.T"/></c>
			</f>
			<haxe_doc>
   * Produces an Array from a[0] to a[n]
   </haxe_doc>
		</take>
		<takeWhile public="1" params="T" set="method" line="496" static="1">
			<f a="a:p">
				<c path="Array"><c path="takeWhile.T"/></c>
				<f a="">
					<c path="takeWhile.T"/>
					<e path="Bool"/>
				</f>
				<c path="Array"><c path="takeWhile.T"/></c>
			</f>
			<haxe_doc>
   * Produces an Array from a[0] while predicate 'p' returns true
   </haxe_doc>
		</takeWhile>
		<drop public="1" params="T" set="method" line="508" static="1">
			<f a="a:n">
				<c path="Array"><c path="drop.T"/></c>
				<c path="Int"/>
				<c path="Array"><c path="drop.T"/></c>
			</f>
			<haxe_doc>
   * Produces an Array from a[n] to the last element of 'a'.
  </haxe_doc>
		</drop>
		<dropWhile public="1" params="T" set="method" line="514" static="1">
			<f a="a:p">
				<c path="Array"><c path="dropWhile.T"/></c>
				<f a="">
					<c path="dropWhile.T"/>
					<e path="Bool"/>
				</f>
				<c path="Array"><c path="dropWhile.T"/></c>
			</f>
			<haxe_doc>
   * Drops values from Array 'a' while the predicate returns true.
   </haxe_doc>
		</dropWhile>
		<sliceBy public="1" params="T" set="method" line="526" static="1">
			<f a="srcArr:sizeSrc">
				<c path="Array"><c path="sliceBy.T"/></c>
				<c path="Array"><c path="Int"/></c>
				<c path="Array"><c path="Array"><c path="sliceBy.T"/></c></c>
			</f>
			<haxe_doc>
   * Produces an Array of arrays of size 'sizeSrc'
   </haxe_doc>
		</sliceBy>
	</class>
	<class path="stx.Bools" params="" file="src/main/haxe/stx/Bools.hx">
		<toInt public="1" set="method" line="10" static="1"><f a="v">
	<e path="Bool"/>
	<c path="Float"/>
</f></toInt>
		<ifTrue public="1" params="T" set="method" line="15" static="1">
			<f a="v:f">
				<e path="Bool"/>
				<t path="stx.Thunk"><c path="ifTrue.T"/></t>
				<e path="stx.Option"><c path="ifTrue.T"/></e>
			</f>
			<haxe_doc>
	 * Produces the result of 'f' if 'v' is true.
	 </haxe_doc>
		</ifTrue>
		<ifFalse public="1" params="T" set="method" line="21" static="1">
			<f a="v:f">
				<e path="Bool"/>
				<t path="stx.Thunk"><c path="ifFalse.T"/></t>
				<e path="stx.Option"><c path="ifFalse.T"/></e>
			</f>
			<haxe_doc>
	 * Produces the result of 'f' if 'v' is false.
	 </haxe_doc>
		</ifFalse>
		<ifElse public="1" params="T" set="method" line="27" static="1">
			<f a="v:f1:f2">
				<e path="Bool"/>
				<t path="stx.Thunk"><c path="ifElse.T"/></t>
				<t path="stx.Thunk"><c path="ifElse.T"/></t>
				<c path="ifElse.T"/>
			</f>
			<haxe_doc>
	 * Produces the result of 'f1' if 'v' is true, 'f2' otherwise.
	 </haxe_doc>
		</ifElse>
		<compare public="1" set="method" line="31" static="1"><f a="v1:v2">
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
</f></compare>
		<equals public="1" set="method" line="35" static="1"><f a="v1:v2">
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></equals>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Dates" params="" file="src/main/haxe/stx/Dates.hx">
		<compare public="1" set="method" line="9" static="1"><f a="v1:v2">
	<c path="Date"/>
	<c path="Date"/>
	<c path="Int"/>
</f></compare>
		<equals public="1" set="method" line="14" static="1"><f a="v1:v2">
	<c path="Date"/>
	<c path="Date"/>
	<e path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="17" static="1"><f a="v">
	<c path="Date"/>
	<c path="String"/>
</f></toString>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Dynamics" params="" file="src/main/haxe/stx/Dynamics.hx">
		<withEffect public="1" params="T" set="method" line="16" static="1">
			<f a="t:f">
				<c path="withEffect.T"/>
				<t path="stx.Function1">
					<c path="withEffect.T"/>
					<e path="Void"/>
				</t>
				<c path="withEffect.T"/>
			</f>
			<haxe_doc>
	 * Takes a value, applies a Function1 to the value and returns the original value.
	 * @param 		a			Any value.
	 * @param 		f			Modifier function.
	 * @return 		a			The input value after f(a).
	 </haxe_doc>
		</withEffect>
		<withEffectP public="1" params="A:B" set="method" line="27" static="1">
			<f a="a:f">
				<c path="withEffectP.A"/>
				<t path="stx.Function1">
					<c path="withEffectP.A"/>
					<c path="withEffectP.B"/>
				</t>
				<c path="withEffectP.A"/>
			</f>
			<haxe_doc>
	 * Takes a value, applies a Function1 to the value and returns the original value.
	 * @param 		a			Any value.
	 * @param 		f			Modifier function.
	 * @return 		a			The input value after f(a).
	 </haxe_doc>
		</withEffectP>
		<into public="1" params="A:B" set="method" line="38" static="1">
			<f a="a:f">
				<c path="into.A"/>
				<f a="">
					<c path="into.A"/>
					<c path="into.B"/>
				</f>
				<c path="into.B"/>
			</f>
			<haxe_doc>
	 * Applies Function1 f to value a and returns the result.
	 * @param			a			Any value.
	 * @param    	f 		Modifier function.
	 * @usage a.into( function(x) return ... )
	 </haxe_doc>
		</into>
		<memoize public="1" params="T" set="method" line="47" static="1">
			<f a="t">
				<t path="stx.Thunk"><c path="memoize.T"/></t>
				<t path="stx.Thunk"><c path="memoize.T"/></t>
			</f>
			<haxe_doc>
	 * Returns a Thunk that applies a Thunk one time only and stores the result, after which each successive call returns the stored value.
	 * @param  	t		The Thunk to call once
	 * @return 			A Thunk which will call the input Thunk once.
	 </haxe_doc>
		</memoize>
		<toThunk public="1" params="T" set="method" line="62" static="1">
			<f a="t">
				<c path="toThunk.T"/>
				<t path="stx.Thunk"><c path="toThunk.T"/></t>
			</f>
			<haxe_doc>
	 * Returns a Thunk that will always return the input value t.
	 * @param 		t		Any value
	 * @return 				A function that will return the input value t.
	 </haxe_doc>
		</toThunk>
		<toConstantFunction public="1" params="S:T" set="method" line="73" static="1">
			<f a="t">
				<c path="toConstantFunction.T"/>
				<t path="stx.Function1">
					<c path="toConstantFunction.S"/>
					<c path="toConstantFunction.T"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a Function1 that will return the input value t, regardless of the Function1's input.
	 * @param			t		Any value
	 * @return 				A function taking any value and returning the value of input parameter t.
	 </haxe_doc>
		</toConstantFunction>
		<apply public="1" params="A:B" set="method" line="81" static="1">
			<f a="v:fn">
				<c path="apply.A"/>
				<f a="">
					<c path="apply.A"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
  * Applies a function 'f' to a valuse of any Type.
  </haxe_doc>
		</apply>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Eithers" params="" file="src/main/haxe/stx/Eithers.hx">
		<toTuple public="1" params="A:B" set="method" line="11" static="1"><f a="e">
	<e path="stx.Either">
		<c path="toTuple.A"/>
		<c path="toTuple.B"/>
	</e>
	<c path="stx.Tuple2">
		<c path="toTuple.A"/>
		<c path="toTuple.B"/>
	</c>
</f></toTuple>
		<toTupleO public="1" params="A:B" set="method" line="19" static="1"><f a="e">
	<e path="stx.Either">
		<c path="toTupleO.A"/>
		<c path="toTupleO.B"/>
	</e>
	<c path="stx.Tuple2">
		<e path="stx.Option"><c path="toTupleO.A"/></e>
		<e path="stx.Option"><c path="toTupleO.B"/></e>
	</c>
</f></toTupleO>
		<toLeft public="1" params="A:B" set="method" line="27" static="1"><f a="v">
	<c path="toLeft.A"/>
	<e path="stx.Either">
		<c path="toLeft.A"/>
		<c path="toLeft.B"/>
	</e>
</f></toLeft>
		<toRight public="1" params="A:B" set="method" line="31" static="1"><f a="v">
	<c path="toRight.B"/>
	<e path="stx.Either">
		<c path="toRight.A"/>
		<c path="toRight.B"/>
	</e>
</f></toRight>
		<flip public="1" params="A:B" set="method" line="35" static="1"><f a="e">
	<e path="stx.Either">
		<c path="flip.A"/>
		<c path="flip.B"/>
	</e>
	<e path="stx.Either">
		<c path="flip.B"/>
		<c path="flip.A"/>
	</e>
</f></flip>
		<left public="1" params="A:B" set="method" line="42" static="1"><f a="e">
	<e path="stx.Either">
		<c path="left.A"/>
		<c path="left.B"/>
	</e>
	<e path="stx.Option"><c path="left.A"/></e>
</f></left>
		<isLeft public="1" params="A:B" set="method" line="50" static="1"><f a="e">
	<e path="stx.Either">
		<c path="isLeft.A"/>
		<c path="isLeft.B"/>
	</e>
	<e path="Bool"/>
</f></isLeft>
		<isRight public="1" params="A:B" set="method" line="57" static="1"><f a="e">
	<e path="stx.Either">
		<c path="isRight.A"/>
		<c path="isRight.B"/>
	</e>
	<e path="Bool"/>
</f></isRight>
		<right public="1" params="A:B" set="method" line="64" static="1"><f a="e">
	<e path="stx.Either">
		<c path="right.A"/>
		<c path="right.B"/>
	</e>
	<e path="stx.Option"><c path="right.B"/></e>
</f></right>
		<get public="1" params="A" set="method" line="72" static="1"><f a="e">
	<e path="stx.Either">
		<c path="get.A"/>
		<c path="get.A"/>
	</e>
	<c path="get.A"/>
</f></get>
		<mapLeft public="1" params="A:B:C" set="method" line="79" static="1"><f a="e:f">
	<e path="stx.Either">
		<c path="mapLeft.A"/>
		<c path="mapLeft.B"/>
	</e>
	<f a="">
		<c path="mapLeft.A"/>
		<c path="mapLeft.C"/>
	</f>
	<e path="stx.Either">
		<c path="mapLeft.C"/>
		<c path="mapLeft.B"/>
	</e>
</f></mapLeft>
		<map public="1" params="A:B:C:D" set="method" line="86" static="1"><f a="e:f1:f2">
	<e path="stx.Either">
		<c path="map.A"/>
		<c path="map.B"/>
	</e>
	<f a="">
		<c path="map.A"/>
		<c path="map.C"/>
	</f>
	<f a="">
		<c path="map.B"/>
		<c path="map.D"/>
	</f>
	<e path="stx.Either">
		<c path="map.C"/>
		<c path="map.D"/>
	</e>
</f></map>
		<mapRight public="1" params="A:B:D" set="method" line="93" static="1"><f a="e:f">
	<e path="stx.Either">
		<c path="mapRight.A"/>
		<c path="mapRight.B"/>
	</e>
	<f a="">
		<c path="mapRight.B"/>
		<c path="mapRight.D"/>
	</f>
	<e path="stx.Either">
		<c path="mapRight.A"/>
		<c path="mapRight.D"/>
	</e>
</f></mapRight>
		<flatMap public="1" params="A:B:C:D" set="method" line="100" static="1"><f a="e:f1:f2">
	<e path="stx.Either">
		<c path="flatMap.A"/>
		<c path="flatMap.B"/>
	</e>
	<f a="">
		<c path="flatMap.A"/>
		<e path="stx.Either">
			<c path="flatMap.C"/>
			<c path="flatMap.D"/>
		</e>
	</f>
	<f a="">
		<c path="flatMap.B"/>
		<e path="stx.Either">
			<c path="flatMap.C"/>
			<c path="flatMap.D"/>
		</e>
	</f>
	<e path="stx.Either">
		<c path="flatMap.C"/>
		<c path="flatMap.D"/>
	</e>
</f></flatMap>
		<flatMapR public="1" params="A:B:C:D" set="method" line="106" static="1"><f a="e:f">
	<e path="stx.Either">
		<c path="flatMapR.A"/>
		<c path="flatMapR.B"/>
	</e>
	<f a="">
		<c path="flatMapR.B"/>
		<e path="stx.Either">
			<c path="flatMapR.C"/>
			<c path="flatMapR.D"/>
		</e>
	</f>
	<e path="stx.Either">
		<c path="flatMapR.C"/>
		<c path="flatMapR.D"/>
	</e>
</f></flatMapR>
		<composeLeft public="1" params="A:B" set="method" line="113" static="1">
			<f a="e1:e2:ac:bc">
				<e path="stx.Either">
					<c path="composeLeft.A"/>
					<c path="composeLeft.B"/>
				</e>
				<e path="stx.Either">
					<c path="composeLeft.A"/>
					<c path="composeLeft.B"/>
				</e>
				<f a=":">
					<c path="composeLeft.A"/>
					<c path="composeLeft.A"/>
					<c path="composeLeft.A"/>
				</f>
				<f a=":">
					<c path="composeLeft.B"/>
					<c path="composeLeft.B"/>
					<c path="composeLeft.B"/>
				</f>
				<e path="stx.Either">
					<c path="composeLeft.A"/>
					<c path="composeLeft.B"/>
				</e>
			</f>
			<haxe_doc> Composes two Eithers together. In case of conflicts, "failure" (left) 
   * always wins.
   </haxe_doc>
		</composeLeft>
		<composeRight public="1" params="A:B" set="method" line="129" static="1">
			<f a="e1:e2:ac:bc">
				<e path="stx.Either">
					<c path="composeRight.A"/>
					<c path="composeRight.B"/>
				</e>
				<e path="stx.Either">
					<c path="composeRight.A"/>
					<c path="composeRight.B"/>
				</e>
				<f a=":">
					<c path="composeRight.A"/>
					<c path="composeRight.A"/>
					<c path="composeRight.A"/>
				</f>
				<f a=":">
					<c path="composeRight.B"/>
					<c path="composeRight.B"/>
					<c path="composeRight.B"/>
				</f>
				<e path="stx.Either">
					<c path="composeRight.A"/>
					<c path="composeRight.B"/>
				</e>
			</f>
			<haxe_doc> Composes two Eithers together. In case of conflicts, "success" (right) 
   * always wins.
   </haxe_doc>
		</composeRight>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Enums" params="" file="src/main/haxe/stx/Enums.hx">
		<create public="1" params="T" get="inline" set="null" line="14" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="create.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="create.T"/>
			</f>
			<haxe_doc>
	 * Creates an Enum
	 </haxe_doc>
		</create>
		<ofIndex public="1" get="inline" set="null" line="23" static="1">
			<f a="e:index">
				<c path="Enum"><d/></c>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	 * Produces the name of the Enum constructor at 'index'.
	 * @param	e
	 * @param	index
	 * @return
	 </haxe_doc>
		</ofIndex>
		<indexOf public="1" set="method" line="31" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
	 * Produces the index of the EnumValue
	 * @param	e
	 * @return
	 </haxe_doc>
		</indexOf>
		<constructorOf public="1" set="method" line="39" static="1">
			<f a="value">
				<c path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	 * Produces the name of the constructor of 'value'
	 * @param	e
	 * @return
	 </haxe_doc>
		</constructorOf>
		<equals public="1" params="T" set="method" line="45" static="1">
			<f a="a:b">
				<c path="EnumValue"/>
				<c path="EnumValue"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Produces the full equality of two Enums.
	 </haxe_doc>
		</equals>
		<params public="1" set="method" line="53" static="1">
			<f a="value">
				<c path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
	 * Produces the parameters for the given 'value'
	 * @param	e
	 * @return
	 </haxe_doc>
		</params>
		<ofValue public="1" set="method" line="61" static="1">
			<f a="value">
				<c path="EnumValue"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
	 * Produces the Enum of the given 'value'
	 * @param	o
	 * @return
	 </haxe_doc>
		</ofValue>
		<constructors public="1" set="method" line="69" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
	 * Produces the names of the given Enum.
	 * @param	e
	 * @return
	 </haxe_doc>
		</constructors>
		<nameOf public="1" set="method" line="77" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
	 * Produces the name of the given Enum
	 * @param	e
	 * @return
	 </haxe_doc>
		</nameOf>
		<enumOf public="1" set="method" line="85" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
	 * Produces an Enum from the given 'name'.
	 * @param	name
	 * @return
	 </haxe_doc>
		</enumOf>
		<new public="1" set="method" line="10"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Filters" params="" file="src/main/haxe/stx/Filters.hx">
		<filterIsNotNull public="1" params="A" set="method" line="12" static="1"><f a="iter">
	<t path="Iterable"><c path="filterIsNotNull.A"/></t>
	<t path="Iterable"><c path="filterIsNotNull.A"/></t>
</f></filterIsNotNull>
		<filterIsNull public="1" params="A" set="method" line="15" static="1"><f a="iter">
	<t path="Iterable"><c path="filterIsNull.A"/></t>
	<t path="Iterable"><c path="filterIsNull.A"/></t>
</f></filterIsNull>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.CodeBlocks" params="" file="src/main/haxe/stx/Functions.hx" module="stx.Functions">
		<promote public="1" set="method" line="17" static="1">
			<f a="c">
				<t path="stx.CodeBlock"/>
				<t path="stx.Thunk"><d/></t>
			</f>
			<haxe_doc><![CDATA[
	 * Takes a Void->Void and returns a Void->Dynamic.
	 * @param	c
	 * @return
	 ]]></haxe_doc>
		</promote>
		<catching public="1" params="A:B" set="method" line="23" static="1"><f a="c">
	<t path="stx.Thunk"><c path="catching.A"/></t>
	<e path="stx.Either">
		<d/>
		<c path="catching.A"/>
	</e>
</f></catching>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Functions0" params="" file="src/main/haxe/stx/Functions.hx" module="stx.Functions">
		<enclose public="1" params="R" set="method" line="37" static="1">
			<f a="f">
				<t path="stx.Thunk"><c path="enclose.R"/></t>
				<t path="stx.CodeBlock"/>
			</f>
			<haxe_doc>
	 * Takes a function that returns a result, and produces one that ignores that result.
	 </haxe_doc>
		</enclose>
		<swallow public="1" set="method" line="47" static="1">
			<f a="f">
				<f a=""><e path="Void"/></f>
				<f a=""><e path="Void"/></f>
			</f>
			<haxe_doc>
	 * Takes a function 'f' and produces one that ignores any error the occurs whilst calling 'f'.
	 * @param	f
	 </haxe_doc>
		</swallow>
		<thenDo public="1" set="method" line="61" static="1">
			<f a="f1:f2">
				<f a=""><e path="Void"/></f>
				<f a=""><e path="Void"/></f>
				<f a=""><e path="Void"/></f>
			</f>
			<haxe_doc>
   * Produces a function that calls 'f1' and 'f2' in left to right order.
   * @param	f1
   * @param	f2
	 * @return The composite function.
   </haxe_doc>
		</thenDo>
		<returning public="1" params="R1:R2" set="method" line="72" static="1">
			<f a="f:thunk">
				<f a=""><c path="returning.R1"/></f>
				<t path="stx.Thunk"><c path="returning.R2"/></t>
				<f a=""><c path="returning.R2"/></f>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores its result, and returns the result produced by thunk.
	 * @param f	
	 * @param thunk
	 </haxe_doc>
		</returning>
		<returningC public="1" params="R1:R2" set="method" line="84" static="1">
			<f a="f:value">
				<f a=""><c path="returningC.R2"/></f>
				<c path="returningC.R2"/>
				<f a=""><c path="returningC.R2"/></f>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores it's result, and returns 'value'
	 * @param f
	 * @param value
	 </haxe_doc>
		</returningC>
		<promote public="1" params="A:Z" set="method" line="91" static="1">
			<f a="f">
				<f a=""><c path="promote.Z"/></f>
				<f a="">
					<c path="promote.A"/>
					<c path="promote.Z"/>
				</f>
			</f>
			<haxe_doc>
	 * Produces a function that takes a parameter. ignores it, and calls 'f', returning it's result.
	 * @param f
	 </haxe_doc>
		</promote>
		<promoteEffect public="1" params="A" set="method" line="101" static="1">
			<f a="f">
				<f a=""><e path="Void"/></f>
				<f a="">
					<c path="promoteEffect.A"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
	 * Produces a function that takes a parameter, ignores it, and calls 'f'.
	 * @param f
	 * @return a Function1
   </haxe_doc>
		</promoteEffect>
		<stage public="1" params="Z:T" set="method" line="114" static="1">
			<f a="f:before:after">
				<t path="stx.Function0"><c path="stage.Z"/></t>
				<f a=""><c path="stage.T"/></f>
				<f a="">
					<c path="stage.T"/>
					<e path="Void"/>
				</f>
				<c path="stage.Z"/>
			</f>
			<haxe_doc>
	 * Produces a function that calls and stores the result of 'before', then 'f', then calls 'after' with the result of 
	 * 'before' and finally returns the result of 'f'.
	 * @param f function that produces output
	 * @param before
	 * @param after
	 * @return the output of f;
   </haxe_doc>
		</stage>
		<toEffect public="1" params="T" set="method" line="128" static="1">
			<f a="f">
				<t path="stx.Function0"><c path="toEffect.T"/></t>
				<f a=""><e path="Void"/></f>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignoring the result.
	 * @param f
	 * @return 
   </haxe_doc>
		</toEffect>
		<map public="1" params="A:B" set="method" line="133" static="1"><f a="f:f1">
	<t path="stx.Thunk"><c path="map.A"/></t>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<t path="stx.Thunk"><c path="map.B"/></t>
</f></map>
	</class>
	<class path="stx.Functions1" params="" file="src/main/haxe/stx/Functions.hx" module="stx.Functions">
		<swallow public="1" params="A" set="method" line="143" static="1">
			<f a="f">
				<t path="stx.Function1">
					<c path="swallow.A"/>
					<e path="Void"/>
				</t>
				<t path="stx.Function1">
					<c path="swallow.A"/>
					<e path="Void"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that ignores any error the occurs whilst calling the input function.
	 * @param	f
	 * @return 
	 </haxe_doc>
		</swallow>
		<swallowWith public="1" params="P1:R" set="method" line="151" static="1">
			<f a="f:d">
				<t path="stx.Function1">
					<c path="swallowWith.P1"/>
					<c path="swallowWith.R"/>
				</t>
				<c path="swallowWith.R"/>
				<t path="stx.Function1">
					<c path="swallowWith.P1"/>
					<c path="swallowWith.R"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that ignores any error the occurs whilst calling the input function, and produces 'd' if error occurs.
	 * @param	f
	 * @return 
	 </haxe_doc>
		</swallowWith>
		<thenDo public="1" params="P1" set="method" line="166" static="1">
			<f a="f1:f2">
				<f a="">
					<c path="thenDo.P1"/>
					<e path="Void"/>
				</f>
				<f a="">
					<c path="thenDo.P1"/>
					<e path="Void"/>
				</f>
				<f a="">
					<c path="thenDo.P1"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
   * Produces a function that calls 'f1' and 'f2' in left to right order with the same input, and returns no result.
   * @param	f1
   * @param	f2
	 * @return The composite function.
   </haxe_doc>
		</thenDo>
		<curry public="1" params="P1:R" set="method" line="177" static="1">
			<f a="f">
				<t path="stx.Function1">
					<c path="curry.P1"/>
					<c path="curry.R"/>
				</t>
				<f a=""><f a="p1">
	<c path="curry.P1"/>
	<c path="curry.R"/>
</f></f>
			</f>
			<haxe_doc>
	 * Produces a function that produces a function for each parameter in the originating function. When these
	 * functions have been called, the result of the original function is produced.
	 * @param f
	 </haxe_doc>
		</curry>
		<returning public="1" params="P1:R1:R2" set="method" line="189" static="1">
			<f a="f:thunk">
				<t path="stx.Function1">
					<c path="returning.P1"/>
					<c path="returning.R1"/>
				</t>
				<t path="stx.Thunk"><c path="returning.R2"/></t>
				<t path="stx.Function1">
					<c path="returning.P1"/>
					<c path="returning.R2"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores its result, and returns the result produced by thunk.
	 * @param f
	 * @param thunk
	 </haxe_doc>
		</returning>
		<returningC public="1" params="P1:R1:R2" set="method" line="201" static="1">
			<f a="f:value">
				<t path="stx.Function1">
					<c path="returningC.P1"/>
					<c path="returningC.R2"/>
				</t>
				<c path="returningC.R2"/>
				<t path="stx.Function1">
					<c path="returningC.P1"/>
					<c path="returningC.R2"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores it's result, and returns 'value'
	 * @param f
	 * @param value
	 </haxe_doc>
		</returningC>
		<compose public="1" params="U:V:W" set="method" line="209" static="1">
			<f a="f1:f2">
				<t path="stx.Function1">
					<c path="compose.V"/>
					<c path="compose.W"/>
				</t>
				<t path="stx.Function1">
					<c path="compose.U"/>
					<c path="compose.V"/>
				</t>
				<t path="stx.Function1">
					<c path="compose.U"/>
					<c path="compose.W"/>
				</t>
			</f>
			<haxe_doc>
	 * Returns a function that calls 'f1' with the output of 'f2'.
	 * @param f1
	 * @param f2
	 </haxe_doc>
		</compose>
		<andThen public="1" params="U:V:W" set="method" line="219" static="1">
			<f a="f1:f2">
				<t path="stx.Function1">
					<c path="andThen.U"/>
					<c path="andThen.V"/>
				</t>
				<t path="stx.Function1">
					<c path="andThen.V"/>
					<c path="andThen.W"/>
				</t>
				<t path="stx.Function1">
					<c path="andThen.U"/>
					<c path="andThen.W"/>
				</t>
			</f>
			<haxe_doc>
	 * Returns a function that calls 'f2' with the output of 'f1'.
	 * @param f1
	 * @param f2
	 </haxe_doc>
		</andThen>
		<lazy public="1" params="P1:R" set="method" line="225" static="1">
			<f a="f:p1">
				<t path="stx.Function1">
					<c path="lazy.P1"/>
					<c path="lazy.R"/>
				</t>
				<c path="lazy.P1"/>
				<t path="stx.Thunk"><c path="lazy.R"/></t>
			</f>
			<haxe_doc>
	 * Produdes a function that calls 'f' with the given parameters p1....pn.
	 </haxe_doc>
		</lazy>
		<toEffect public="1" params="P1:R" set="method" line="237" static="1">
			<f a="f">
				<t path="stx.Function1">
					<c path="toEffect.P1"/>
					<c path="toEffect.R"/>
				</t>
				<f a="">
					<c path="toEffect.P1"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignoring the result.
	 * @param f
	 * @return 
   </haxe_doc>
		</toEffect>
	</class>
	<class path="stx.Functions2" params="" file="src/main/haxe/stx/Functions.hx" module="stx.Functions">
		<swallow public="1" params="P1:P2" set="method" line="249" static="1">
			<f a="f">
				<t path="stx.Function2">
					<c path="swallow.P1"/>
					<c path="swallow.P2"/>
					<e path="Void"/>
				</t>
				<t path="stx.Function2">
					<c path="swallow.P1"/>
					<c path="swallow.P2"/>
					<e path="Void"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that ignores any error the occurs whilst calling the input function.
	 * @param	f
	 * @return 
	 </haxe_doc>
		</swallow>
		<swallowWith public="1" params="P1:P2:R" set="method" line="257" static="1">
			<f a="f:d">
				<t path="stx.Function2">
					<c path="swallowWith.P1"/>
					<c path="swallowWith.P2"/>
					<c path="swallowWith.R"/>
				</t>
				<c path="swallowWith.R"/>
				<t path="stx.Function2">
					<c path="swallowWith.P1"/>
					<c path="swallowWith.P2"/>
					<c path="swallowWith.R"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that ignores any error the occurs whilst calling the input function, and produces 'd' if error occurs.
	 * @param	f
	 * @return 
	 </haxe_doc>
		</swallowWith>
		<thenDo public="1" params="P1:P2" set="method" line="272" static="1">
			<f a="f1:f2">
				<f a=":">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<e path="Void"/>
				</f>
				<f a=":">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<e path="Void"/>
				</f>
				<f a=":">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
   * Produces a function that calls 'f1' and 'f2' in left to right order with the same input, and returns no result.
   * @param	f1
   * @param	f2
	 * @return The composite function.
   </haxe_doc>
		</thenDo>
		<returning public="1" params="P1:P2:R1:R2" set="method" line="283" static="1">
			<f a="f:thunk">
				<t path="stx.Function2">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.R1"/>
				</t>
				<t path="stx.Thunk"><c path="returning.R2"/></t>
				<t path="stx.Function2">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.R2"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores its result, and returns the result produced by thunk.
	 * @param f
	 * @param thunk
	 </haxe_doc>
		</returning>
		<returningC public="1" set="method" line="295" static="1">
			<f a="f:value">
				<t path="stx.Function2">
					<unknown/>
					<unknown/>
					<unknown/>
				</t>
				<a><toThunk set="null"><f a=""><t path="stx.Thunk"><unknown/></t></f></toThunk></a>
				<t path="stx.Function2">
					<unknown/>
					<unknown/>
					<unknown/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores it's result, and returns 'value'
	 * @param f
	 * @param value
	 </haxe_doc>
		</returningC>
		<flip public="1" params="P1:P2:R" set="method" line="301" static="1">
			<f a="f">
				<t path="stx.Function2">
					<c path="flip.P1"/>
					<c path="flip.P2"/>
					<c path="flip.R"/>
				</t>
				<t path="stx.Function2">
					<c path="flip.P2"/>
					<c path="flip.P1"/>
					<c path="flip.R"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function which takes the parameters of 'f' in a flipped order.
	 </haxe_doc>
		</flip>
		<curry public="1" params="P1:P2:R" set="method" line="311" static="1">
			<f a="f">
				<t path="stx.Function2">
					<c path="curry.P1"/>
					<c path="curry.P2"/>
					<c path="curry.R"/>
				</t>
				<t path="stx.Function1">
					<c path="curry.P1"/>
					<t path="stx.Function1">
						<c path="curry.P2"/>
						<c path="curry.R"/>
					</t>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that produces a function for each parameter in the originating function. When these
	 * functions have been called, the result of the original function is returned.
	 * @param f
	 </haxe_doc>
		</curry>
		<uncurry public="1" params="P1:P2:R" set="method" line="322" static="1">
			<f a="f">
				<t path="stx.Function1">
					<c path="uncurry.P1"/>
					<t path="stx.Function1">
						<c path="uncurry.P2"/>
						<c path="uncurry.R"/>
					</t>
				</t>
				<t path="stx.Function2">
					<c path="uncurry.P1"/>
					<c path="uncurry.P2"/>
					<c path="uncurry.R"/>
				</t>
			</f>
			<haxe_doc>
	 * Takes a function with one parameter that returns a function of one parameter, and produces
	 * a function that takes two parameters that calls the two functions sequentially,
	 </haxe_doc>
		</uncurry>
		<lazy public="1" params="P1:P2:R" set="method" line="330" static="1">
			<f a="f:p1:p2">
				<t path="stx.Function2">
					<c path="lazy.P1"/>
					<c path="lazy.P2"/>
					<c path="lazy.R"/>
				</t>
				<c path="lazy.P1"/>
				<c path="lazy.P2"/>
				<t path="stx.Thunk"><c path="lazy.R"/></t>
			</f>
			<haxe_doc>
	 * Produdes a function that calls 'f' with the given parameters p1....pn.
	 </haxe_doc>
		</lazy>
		<toEffect public="1" params="P1:P2:R" set="method" line="342" static="1">
			<f a="f">
				<t path="stx.Function2">
					<c path="toEffect.P1"/>
					<c path="toEffect.P2"/>
					<c path="toEffect.R"/>
				</t>
				<f a=":">
					<c path="toEffect.P1"/>
					<c path="toEffect.P2"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignoring the result.
	 * @param f
	 * @return 
   </haxe_doc>
		</toEffect>
	</class>
	<class path="stx.Functions3" params="" file="src/main/haxe/stx/Functions.hx" module="stx.Functions">
		<swallow public="1" params="A:B:C" set="method" line="354" static="1">
			<f a="f">
				<t path="stx.Function3">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<e path="Void"/>
				</t>
				<t path="stx.Function3">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<e path="Void"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that ignores any error the occurs whilst calling the input function.
	 * @param	f
	 * @return 
	 </haxe_doc>
		</swallow>
		<swallowWith public="1" params="A:B:C:R" set="method" line="362" static="1">
			<f a="f:d">
				<t path="stx.Function3">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.R"/>
				</t>
				<c path="swallowWith.R"/>
				<t path="stx.Function3">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.R"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that ignores any error the occurs whilst calling the input function, and produces 'd' if error occurs.
	 * @param	f
	 * @return 
	 </haxe_doc>
		</swallowWith>
		<thenDo public="1" params="P1:P2:P3" set="method" line="377" static="1">
			<f a="f1:f2">
				<f a="::">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<c path="thenDo.P3"/>
					<e path="Void"/>
				</f>
				<f a="::">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<c path="thenDo.P3"/>
					<e path="Void"/>
				</f>
				<f a="::">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<c path="thenDo.P3"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
   * Produces a function that calls 'f1' and 'f2' in left to right order with the same input, and returns no result.
   * @param	f1
   * @param	f2
	 * @return The composite function.
   </haxe_doc>
		</thenDo>
		<returning public="1" params="P1:P2:P3:R1:R2" set="method" line="388" static="1">
			<f a="f:thunk">
				<t path="stx.Function3">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.R1"/>
				</t>
				<t path="stx.Thunk"><c path="returning.R2"/></t>
				<t path="stx.Function3">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.R2"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores its result, and returns the result produced by thunk.
	 * @param f
	 * @param thunk
	 </haxe_doc>
		</returning>
		<returningC public="1" set="method" line="400" static="1">
			<f a="f:value">
				<t path="stx.Function3">
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
				</t>
				<a><toThunk set="null"><f a=""><t path="stx.Thunk"><unknown/></t></f></toThunk></a>
				<t path="stx.Function3">
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores it's result, and returns 'value'
	 * @param f
	 * @param value
	 </haxe_doc>
		</returningC>
		<curry public="1" params="P1:P2:P3:R" set="method" line="408" static="1">
			<f a="f">
				<t path="stx.Function3">
					<c path="curry.P1"/>
					<c path="curry.P2"/>
					<c path="curry.P3"/>
					<c path="curry.R"/>
				</t>
				<t path="stx.Function1">
					<c path="curry.P1"/>
					<t path="stx.Function1">
						<c path="curry.P2"/>
						<t path="stx.Function1">
							<c path="curry.P3"/>
							<c path="curry.R"/>
						</t>
					</t>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that produces a function for each parameter in the originating function. When these
	 * functions have been called, the result of the original function is produced.
	 * @param f
	 </haxe_doc>
		</curry>
		<uncurry public="1" params="P1:P2:P3:R" set="method" line="421" static="1">
			<f a="f">
				<t path="stx.Function1">
					<c path="uncurry.P1"/>
					<t path="stx.Function1">
						<c path="uncurry.P2"/>
						<t path="stx.Function1">
							<c path="uncurry.P3"/>
							<c path="uncurry.R"/>
						</t>
					</t>
				</t>
				<t path="stx.Function3">
					<c path="uncurry.P1"/>
					<c path="uncurry.P2"/>
					<c path="uncurry.P3"/>
					<c path="uncurry.R"/>
				</t>
			</f>
			<haxe_doc>
	 * Takes a function with one parameter that returns a function of one parameter, and produces
	 * a function that takes two parameters that calls the two functions sequentially,
	 </haxe_doc>
		</uncurry>
		<lazy public="1" params="P1:P2:P3:R" set="method" line="429" static="1">
			<f a="f:p1:p2:p3">
				<t path="stx.Function3">
					<c path="lazy.P1"/>
					<c path="lazy.P2"/>
					<c path="lazy.P3"/>
					<c path="lazy.R"/>
				</t>
				<c path="lazy.P1"/>
				<c path="lazy.P2"/>
				<c path="lazy.P3"/>
				<t path="stx.Thunk"><c path="lazy.R"/></t>
			</f>
			<haxe_doc>
	 * Produdes a function that calls 'f' with the given parameters p1....pn.
	 </haxe_doc>
		</lazy>
		<toEffect public="1" params="P1:P2:P3:R" set="method" line="441" static="1">
			<f a="f">
				<t path="stx.Function3">
					<c path="toEffect.P1"/>
					<c path="toEffect.P2"/>
					<c path="toEffect.P3"/>
					<c path="toEffect.R"/>
				</t>
				<f a="::">
					<c path="toEffect.P1"/>
					<c path="toEffect.P2"/>
					<c path="toEffect.P3"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignoring the result.
	 * @param f
	 * @return 
   </haxe_doc>
		</toEffect>
	</class>
	<class path="stx.Functions4" params="" file="src/main/haxe/stx/Functions.hx" module="stx.Functions">
		<swallow public="1" params="A:B:C:D" set="method" line="453" static="1">
			<f a="f">
				<t path="stx.Function4">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<c path="swallow.D"/>
					<e path="Void"/>
				</t>
				<t path="stx.Function4">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<c path="swallow.D"/>
					<e path="Void"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that ignores any error the occurs whilst calling the input function.
	 * @param	f
	 * @return 
	 </haxe_doc>
		</swallow>
		<swallowWith public="1" params="A:B:C:D:R" set="method" line="461" static="1">
			<f a="f:def">
				<t path="stx.Function4">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.D"/>
					<c path="swallowWith.R"/>
				</t>
				<c path="swallowWith.R"/>
				<t path="stx.Function4">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.D"/>
					<c path="swallowWith.R"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that ignores any error the occurs whilst calling the input function, and produces 'd' if error occurs.
	 * @param	f
	 * @return 
	 </haxe_doc>
		</swallowWith>
		<thenDo public="1" params="P1:P2:P3:P4" set="method" line="476" static="1">
			<f a="f1:f2">
				<f a=":::">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<c path="thenDo.P3"/>
					<c path="thenDo.P4"/>
					<e path="Void"/>
				</f>
				<f a=":::">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<c path="thenDo.P3"/>
					<c path="thenDo.P4"/>
					<e path="Void"/>
				</f>
				<f a=":::">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<c path="thenDo.P3"/>
					<c path="thenDo.P4"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
   * Produces a function that calls 'f1' and 'f2' in left to right order with the same input, and returns no result.
   * @param	f1
   * @param	f2
	 * @return The composite function.
   </haxe_doc>
		</thenDo>
		<returning public="1" params="P1:P2:P3:P4:R1:R2" set="method" line="487" static="1">
			<f a="f:thunk">
				<t path="stx.Function4">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.P4"/>
					<c path="returning.R1"/>
				</t>
				<t path="stx.Thunk"><c path="returning.R2"/></t>
				<t path="stx.Function4">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.P4"/>
					<c path="returning.R2"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores its result, and returns the result produced by thunk.
	 * @param f
	 * @param thunk
	 </haxe_doc>
		</returning>
		<returningC public="1" set="method" line="499" static="1">
			<f a="f:value">
				<t path="stx.Function4">
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
				</t>
				<a><toThunk set="null"><f a=""><t path="stx.Thunk"><unknown/></t></f></toThunk></a>
				<t path="stx.Function4">
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores it's result, and returns 'value'
	 * @param f
	 * @param value
	 </haxe_doc>
		</returningC>
		<curry public="1" params="P1:P2:P3:P4:R" set="method" line="507" static="1">
			<f a="f">
				<t path="stx.Function4">
					<c path="curry.P1"/>
					<c path="curry.P2"/>
					<c path="curry.P3"/>
					<c path="curry.P4"/>
					<c path="curry.R"/>
				</t>
				<t path="stx.Function1">
					<c path="curry.P1"/>
					<t path="stx.Function1">
						<c path="curry.P2"/>
						<t path="stx.Function1">
							<c path="curry.P3"/>
							<t path="stx.Function1">
								<c path="curry.P4"/>
								<c path="curry.R"/>
							</t>
						</t>
					</t>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that produces a function for each parameter in the originating function. When these
	 * functions have been called, the result of the original function is produced.
	 * @param f
	 </haxe_doc>
		</curry>
		<uncurry public="1" params="P1:P2:P3:P4:R" set="method" line="522" static="1">
			<f a="f">
				<t path="stx.Function1">
					<c path="uncurry.P1"/>
					<t path="stx.Function1">
						<c path="uncurry.P2"/>
						<t path="stx.Function1">
							<c path="uncurry.P3"/>
							<t path="stx.Function1">
								<c path="uncurry.P4"/>
								<c path="uncurry.R"/>
							</t>
						</t>
					</t>
				</t>
				<t path="stx.Function4">
					<c path="uncurry.P1"/>
					<c path="uncurry.P2"/>
					<c path="uncurry.P3"/>
					<c path="uncurry.P4"/>
					<c path="uncurry.R"/>
				</t>
			</f>
			<haxe_doc>
	 * Takes a function with one parameter that returns a function of one parameter, and produces
	 * a function that takes two parameters that calls the two functions sequentially,
	 </haxe_doc>
		</uncurry>
		<lazy public="1" params="P1:P2:P3:P4:R" set="method" line="530" static="1">
			<f a="f:p1:p2:p3:p4">
				<t path="stx.Function4">
					<c path="lazy.P1"/>
					<c path="lazy.P2"/>
					<c path="lazy.P3"/>
					<c path="lazy.P4"/>
					<c path="lazy.R"/>
				</t>
				<c path="lazy.P1"/>
				<c path="lazy.P2"/>
				<c path="lazy.P3"/>
				<c path="lazy.P4"/>
				<t path="stx.Thunk"><c path="lazy.R"/></t>
			</f>
			<haxe_doc>
	 * Produdes a function that calls 'f' with the given parameters p1....pn.
	 </haxe_doc>
		</lazy>
		<toEffect public="1" params="P1:P2:P3:P4:R" set="method" line="542" static="1">
			<f a="f">
				<t path="stx.Function4">
					<c path="toEffect.P1"/>
					<c path="toEffect.P2"/>
					<c path="toEffect.P3"/>
					<c path="toEffect.P4"/>
					<c path="toEffect.R"/>
				</t>
				<f a=":::">
					<c path="toEffect.P1"/>
					<c path="toEffect.P2"/>
					<c path="toEffect.P3"/>
					<c path="toEffect.P4"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignoring the result.
	 * @param f
	 * @return 
   </haxe_doc>
		</toEffect>
	</class>
	<class path="stx.Functions5" params="" file="src/main/haxe/stx/Functions.hx" module="stx.Functions">
		<swallow public="1" params="A:B:C:D:E" set="method" line="554" static="1">
			<f a="f">
				<t path="stx.Function5">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<c path="swallow.D"/>
					<c path="swallow.E"/>
					<e path="Void"/>
				</t>
				<t path="stx.Function5">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<c path="swallow.D"/>
					<c path="swallow.E"/>
					<e path="Void"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that ignores any error the occurs whilst calling the input function.
	 * @param	f
	 * @return 
	 </haxe_doc>
		</swallow>
		<swallowWith public="1" params="A:B:C:D:E:R" set="method" line="562" static="1">
			<f a="f:def">
				<t path="stx.Function5">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.D"/>
					<c path="swallowWith.E"/>
					<c path="swallowWith.R"/>
				</t>
				<c path="swallowWith.R"/>
				<t path="stx.Function5">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.D"/>
					<c path="swallowWith.E"/>
					<c path="swallowWith.R"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that ignores any error the occurs whilst calling the input function, and produces 'd' if error occurs.
	 * @param	f
	 * @return 
	 </haxe_doc>
		</swallowWith>
		<thenDo public="1" params="P1:P2:P3:P4:P5" set="method" line="577" static="1">
			<f a="f1:f2">
				<f a="::::">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<c path="thenDo.P3"/>
					<c path="thenDo.P4"/>
					<c path="thenDo.P5"/>
					<e path="Void"/>
				</f>
				<f a="::::">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<c path="thenDo.P3"/>
					<c path="thenDo.P4"/>
					<c path="thenDo.P5"/>
					<e path="Void"/>
				</f>
				<f a="::::">
					<c path="thenDo.P1"/>
					<c path="thenDo.P2"/>
					<c path="thenDo.P3"/>
					<c path="thenDo.P4"/>
					<c path="thenDo.P5"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
   * Produces a function that calls 'f1' and 'f2' in left to right order with the same input, and returns no result.
   * @param	f1
   * @param	f2
	 * @return The composite function.
   </haxe_doc>
		</thenDo>
		<returning public="1" params="P1:P2:P3:P4:P5:R1:R2" set="method" line="588" static="1">
			<f a="f:thunk">
				<t path="stx.Function5">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.P4"/>
					<c path="returning.P5"/>
					<c path="returning.R1"/>
				</t>
				<t path="stx.Thunk"><c path="returning.R2"/></t>
				<t path="stx.Function5">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.P4"/>
					<c path="returning.P5"/>
					<c path="returning.R2"/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores its result, and returns the result produced by thunk.
	 * @param f
	 * @param thunk
	 </haxe_doc>
		</returning>
		<returningC public="1" set="method" line="600" static="1">
			<f a="f:value">
				<t path="stx.Function5">
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
				</t>
				<a><toThunk set="null"><f a=""><t path="stx.Thunk"><unknown/></t></f></toThunk></a>
				<t path="stx.Function5">
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
					<unknown/>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignores it's result, and returns 'value'
	 * @param f
	 * @param value
	 </haxe_doc>
		</returningC>
		<curry public="1" params="P1:P2:P3:P4:P5:R" set="method" line="608" static="1">
			<f a="f">
				<t path="stx.Function5">
					<c path="curry.P1"/>
					<c path="curry.P2"/>
					<c path="curry.P3"/>
					<c path="curry.P4"/>
					<c path="curry.P5"/>
					<c path="curry.R"/>
				</t>
				<t path="stx.Function1">
					<c path="curry.P1"/>
					<t path="stx.Function1">
						<c path="curry.P2"/>
						<t path="stx.Function1">
							<c path="curry.P3"/>
							<t path="stx.Function1">
								<c path="curry.P4"/>
								<t path="stx.Function1">
									<c path="curry.P5"/>
									<c path="curry.R"/>
								</t>
							</t>
						</t>
					</t>
				</t>
			</f>
			<haxe_doc>
	 * Produces a function that produces a function for each parameter in the originating function. When these
	 * functions have been called, the result of the original function is produced.
	 * @param f
	 </haxe_doc>
		</curry>
		<uncurry public="1" params="P1:P2:P3:P4:P5:R" set="method" line="625" static="1">
			<f a="f">
				<t path="stx.Function1">
					<c path="uncurry.P1"/>
					<t path="stx.Function1">
						<c path="uncurry.P2"/>
						<t path="stx.Function1">
							<c path="uncurry.P3"/>
							<t path="stx.Function1">
								<c path="uncurry.P4"/>
								<t path="stx.Function1">
									<c path="uncurry.P5"/>
									<c path="uncurry.R"/>
								</t>
							</t>
						</t>
					</t>
				</t>
				<t path="stx.Function5">
					<c path="uncurry.P1"/>
					<c path="uncurry.P2"/>
					<c path="uncurry.P3"/>
					<c path="uncurry.P4"/>
					<c path="uncurry.P5"/>
					<c path="uncurry.R"/>
				</t>
			</f>
			<haxe_doc>
	 * Takes a function with one parameter that returns a function of one parameter, and produces
	 * a function that takes two parameters that calls the two functions sequentially,
	 </haxe_doc>
		</uncurry>
		<lazy public="1" params="P1:P2:P3:P4:P5:R" set="method" line="633" static="1">
			<f a="f:p1:p2:p3:p4:p5">
				<t path="stx.Function5">
					<c path="lazy.P1"/>
					<c path="lazy.P2"/>
					<c path="lazy.P3"/>
					<c path="lazy.P4"/>
					<c path="lazy.P5"/>
					<c path="lazy.R"/>
				</t>
				<c path="lazy.P1"/>
				<c path="lazy.P2"/>
				<c path="lazy.P3"/>
				<c path="lazy.P4"/>
				<c path="lazy.P5"/>
				<t path="stx.Thunk"><c path="lazy.R"/></t>
			</f>
			<haxe_doc>
	 * Produdes a function that calls 'f' with the given parameters p1....pn.
	 </haxe_doc>
		</lazy>
		<toEffect public="1" params="P1:P2:P3:P4:P5:R" set="method" line="645" static="1">
			<f a="f">
				<t path="stx.Function5">
					<c path="toEffect.P1"/>
					<c path="toEffect.P2"/>
					<c path="toEffect.P3"/>
					<c path="toEffect.P4"/>
					<c path="toEffect.P5"/>
					<c path="toEffect.R"/>
				</t>
				<f a="::::">
					<c path="toEffect.P1"/>
					<c path="toEffect.P2"/>
					<c path="toEffect.P3"/>
					<c path="toEffect.P4"/>
					<c path="toEffect.P5"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
	 * Produces a function that calls 'f', ignoring the result.
	 * @param f
	 * @return 
   </haxe_doc>
		</toEffect>
	</class>
	<class path="stx.Future" params="T" file="src/main/haxe/stx/Future.hx">
		<dead public="1" params="T" set="method" line="46" static="1">
			<f a=""><c path="stx.Future"><c path="dead.T"/></c></f>
			<haxe_doc> Creates a "dead" future that is canceled and will never be delivered.
   </haxe_doc>
		</dead>
		<create public="1" params="T" set="method" line="269" static="1"><f a=""><c path="stx.Future"><c path="create.T"/></c></f></create>
		<toFuture public="1" params="T" set="method" line="272" static="1"><f a="t">
	<c path="toFuture.T"/>
	<c path="stx.Future"><c path="toFuture.T"/></c>
</f></toFuture>
		<waitFor public="1" set="method" line="283" static="1"><f a="toJoin">
	<c path="Array"><c path="stx.Future"><d/></c></c>
	<c path="stx.Future"><c path="Array"><d/></c></c>
</f></waitFor>
		<_listeners><c path="Array"><f a="">
	<c path="stx.Future.T"/>
	<e path="Void"/>
</f></c></_listeners>
		<_result><c path="stx.Future.T"/></_result>
		<_isSet><e path="Bool"/></_isSet>
		<_isCanceled><e path="Bool"/></_isCanceled>
		<_cancelers><c path="Array"><f a=""><e path="Bool"/></f></c></_cancelers>
		<_canceled><c path="Array"><f a=""><e path="Void"/></f></c></_canceled>
		<isEmpty public="1" set="method" line="41"><f a=""><e path="Bool"/></f></isEmpty>
		<deliver public="1" set="method" line="55">
			<f a="t:?pos">
				<c path="stx.Future.T"/>
				<t path="haxe.PosInfos"/>
				<c path="stx.Future"><c path="stx.Future.T"/></c>
			</f>
			<haxe_doc> Delivers the value of the future to anyone awaiting it. If the value has
   * already been delivered, this method will throw an exception.
   </haxe_doc>
		</deliver>
		<allowCancelOnlyIf public="1" set="method" line="77">
			<f a="f">
				<f a=""><e path="Bool"/></f>
				<c path="stx.Future"><c path="stx.Future.T"/></c>
			</f>
			<haxe_doc><![CDATA[ Installs the specified canceler on the future. Under ordinary
   * circumstances, the future will not be canceled unless all cancelers
   * return true. If the future is already done, this method has no effect.
   * <p>
   * This method does not normally need to be called. It's provided primarily
   * for the implementation of future primitives.
   ]]></haxe_doc>
		</allowCancelOnlyIf>
		<ifCanceled public="1" set="method" line="92">
			<f a="f">
				<f a=""><e path="Void"/></f>
				<c path="stx.Future"><c path="stx.Future.T"/></c>
			</f>
			<haxe_doc><![CDATA[ Installs a handler that will be called if and only if the future is
   * canceled.
   * <p>
   * This method does not normally need to be called, since there is no
   * difference between a future being canceled and a future taking an
   * arbitrarily long amount of time to evaluate. It's provided primarily
   * for implementation of future primitives to save resources when it's
   * explicitly known the result of a future will not be used.
   ]]></haxe_doc>
		</ifCanceled>
		<cancel public="1" set="method" line="106">
			<f a=""><e path="Bool"/></f>
			<haxe_doc><![CDATA[ Attempts to cancel the future. This may succeed only if the future is
   * not already delivered, and if all cancel conditions are satisfied.
   * <p>
   * If a future is canceled, the result will never be delivered.
   *
   * @return true if the future is canceled, false otherwise.
   ]]></haxe_doc>
		</cancel>
		<isDone public="1" set="method" line="125">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> Determines if the future is "done" -- that is, delivered or canceled.
   </haxe_doc>
		</isDone>
		<isDelivered public="1" set="method" line="131">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> Determines if the future is delivered.
   </haxe_doc>
		</isDelivered>
		<isCanceled public="1" set="method" line="137">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> Determines if the future is canceled.
   </haxe_doc>
		</isCanceled>
		<deliverTo public="1" set="method" line="144">
			<f a="f">
				<f a="">
					<c path="stx.Future.T"/>
					<e path="Void"/>
				</f>
				<c path="stx.Future"><c path="stx.Future.T"/></c>
			</f>
			<haxe_doc> Delivers the result of the future to the specified handler as soon as it
   * is delivered.
   </haxe_doc>
		</deliverTo>
		<foreach public="1" set="method" line="151"><f a="f">
	<f a="">
		<c path="stx.Future.T"/>
		<e path="Void"/>
	</f>
	<c path="stx.Future"><c path="stx.Future.T"/></c>
</f></foreach>
		<map public="1" params="S" set="method" line="159">
			<f a="f">
				<f a="">
					<c path="stx.Future.T"/>
					<c path="map.S"/>
				</f>
				<c path="stx.Future"><c path="map.S"/></c>
			</f>
			<haxe_doc><![CDATA[ Uses the specified function to transform the result of this future into
   * a different value, returning a future of that value.
   * <p>
   * urlLoader.load("image.png").map(function(data) return new Image(data)).deliverTo(function(image) imageContainer.add(image));
   ]]></haxe_doc>
		</map>
		<then public="1" params="S" set="method" line="168"><f a="f">
	<c path="stx.Future"><c path="then.S"/></c>
	<c path="stx.Future"><c path="then.S"/></c>
</f></then>
		<flatMap public="1" params="S" set="method" line="186">
			<f a="f">
				<f a="">
					<c path="stx.Future.T"/>
					<c path="stx.Future"><c path="flatMap.S"/></c>
				</f>
				<c path="stx.Future"><c path="flatMap.S"/></c>
			</f>
			<haxe_doc><![CDATA[ Maps the result of this future to another future, and returns a future
   * of the result of that future. Useful when chaining together multiple
   * asynchronous operations that must be completed sequentially.
   * <p>
   * <pre>
   * <code>
   * urlLoader.load("config.xml").flatMap(function(xml){
   *   return urlLoader.load(parse(xml).mediaUrl);
   * }).deliverTo(function(loadedMedia){
   *   container.add(loadedMedia);
   * });
   * </code>
   * </pre>
   ]]></haxe_doc>
		</flatMap>
		<filter public="1" set="method" line="206">
			<f a="f">
				<f a="">
					<c path="stx.Future.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.Future"><c path="stx.Future.T"/></c>
			</f>
			<haxe_doc> Returns a new future that will be delivered only if the result of this
   * future is accepted by the specified filter (otherwise, the new future
   * will be canceled).
   </haxe_doc>
		</filter>
		<zip public="1" params="A" set="method" line="221">
			<f a="f2">
				<c path="stx.Future"><c path="zip.A"/></c>
				<c path="stx.Future"><c path="stx.Tuple2">
	<c path="stx.Future.T"/>
	<c path="zip.A"/>
</c></c>
			</f>
			<haxe_doc> Zips this future and the specified future into another future, whose
   * result is a tuple of the individual results of the futures. Useful when
   * an operation requires the result of two futures, but each future may
   * execute independently of the other.
   </haxe_doc>
		</zip>
		<value public="1" set="method" line="247">
			<f a=""><e path="stx.Option"><c path="stx.Future.T"/></e></f>
			<haxe_doc> Retrieves the value of the future, as an option.
   </haxe_doc>
		</value>
		<toOption public="1" set="method" line="251"><f a=""><e path="stx.Option"><c path="stx.Future.T"/></e></f></toOption>
		<toArray public="1" set="method" line="255"><f a=""><c path="Array"><c path="stx.Future.T"/></c></f></toArray>
		<forceCancel set="method" line="259"><f a=""><c path="stx.Future"><c path="stx.Future.T"/></c></f></forceCancel>
		<deliverMe public="1" set="method" line="275"><f a="f">
	<f a="">
		<c path="stx.Future"><c path="stx.Future.T"/></c>
		<e path="Void"/>
	</f>
	<c path="stx.Future"><c path="stx.Future.T"/></c>
</f></deliverMe>
		<new public="1" set="method" line="33"><f a=""><e path="Void"/></f></new>
		<haxe_doc><![CDATA[
 * An asynchronous operation that may complete in the future unless
 * successfully canceled.
 * <p>
 * Futures can be combined and chained together to form complicated
 * asynchronous control flows. Often used operations are map() and
 * flatMap().
 * <p>
 ]]></haxe_doc>
	</class>
	<class path="stx.Hashes" params="" file="src/main/haxe/stx/Hashes.hx">
		<toHash public="1" params="A" set="method" line="11" static="1"><f a="iter">
	<c path="Array"><c path="stx.Tuple2">
	<c path="String"/>
	<c path="toHash.A"/>
</c></c>
	<c path="Hash"><c path="toHash.A"/></c>
</f></toHash>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Iterables" params="" file="src/main/haxe/stx/Iterables.hx">
		<foldl1 public="1" params="T:T" set="method" line="27" static="1"><f a="iter:mapper">
	<t path="Iterable"><c path="foldl1.T"/></t>
	<f a=":">
		<c path="foldl1.T"/>
		<c path="foldl1.T"/>
		<c path="foldl1.T"/>
	</f>
	<c path="foldl1.T"/>
</f></foldl1>
		<concat public="1" params="T" set="method" line="38" static="1"><f a="iter1:iter2">
	<t path="Iterable"><c path="concat.T"/></t>
	<t path="Iterable"><c path="concat.T"/></t>
	<t path="Iterable"><c path="concat.T"/></t>
</f></concat>
		<foldr public="1" params="T:Z" set="method" line="41" static="1"><f a="iterable:z:f">
	<t path="Iterable"><c path="foldr.T"/></t>
	<c path="foldr.Z"/>
	<f a=":">
		<c path="foldr.T"/>
		<c path="foldr.Z"/>
		<c path="foldr.Z"/>
	</f>
	<c path="foldr.Z"/>
</f></foldr>
		<headOption public="1" params="T" set="method" line="45" static="1"><f a="iter">
	<t path="Iterable"><c path="headOption.T"/></t>
	<e path="stx.Option"><c path="headOption.T"/></e>
</f></headOption>
		<head public="1" params="T" set="method" line="54" static="1"><f a="iter">
	<t path="Iterable"><c path="head.T"/></t>
	<c path="head.T"/>
</f></head>
		<tailOption public="1" params="T" set="method" line="61" static="1"><f a="iter">
	<t path="Iterable"><c path="tailOption.T"/></t>
	<e path="stx.Option"><t path="Iterable"><c path="tailOption.T"/></t></e>
</f></tailOption>
		<drop public="1" params="T" set="method" line="67" static="1"><f a="iter:n">
	<t path="Iterable"><c path="drop.T"/></t>
	<c path="Int"/>
	<t path="Iterable"><c path="drop.T"/></t>
</f></drop>
		<dropWhile public="1" params="T" set="method" line="84" static="1"><f a="a:p">
	<t path="Iterable"><c path="dropWhile.T"/></t>
	<f a="">
		<c path="dropWhile.T"/>
		<e path="Bool"/>
	</f>
	<t path="Iterable"><c path="dropWhile.T"/></t>
</f></dropWhile>
		<take public="1" params="T" set="method" line="99" static="1"><f a="iter:n">
	<t path="Iterable"><c path="take.T"/></t>
	<c path="Int"/>
	<t path="Iterable"><c path="take.T"/></t>
</f></take>
		<takeWhile public="1" params="T" set="method" line="109" static="1"><f a="a:p">
	<t path="Iterable"><c path="takeWhile.T"/></t>
	<f a="">
		<c path="takeWhile.T"/>
		<e path="Bool"/>
	</f>
	<t path="Iterable"><c path="takeWhile.T"/></t>
</f></takeWhile>
		<tail public="1" params="T" set="method" line="123" static="1">
			<f a="iter">
				<t path="Iterable"><c path="tail.T"/></t>
				<t path="Iterable"><c path="tail.T"/></t>
			</f>
			<haxe_doc>
   * Take element[1...n] from the Iterable, or if Iterable.size() == 1, element[0]
	 * @param iter
	 * @return Iterable
   </haxe_doc>
		</tail>
		<exists public="1" params="T" set="method" line="131" static="1"><f a="iter:eq:value">
	<t path="Iterable"><c path="exists.T"/></t>
	<f a=":">
		<c path="exists.T"/>
		<c path="exists.T"/>
		<e path="Bool"/>
	</f>
	<c path="exists.T"/>
	<e path="Bool"/>
</f></exists>
		<nub public="1" params="T" set="method" line="137" static="1"><f a="iter">
	<t path="Iterable"><c path="nub.T"/></t>
	<t path="Iterable"><c path="nub.T"/></t>
</f></nub>
		<at public="1" params="T" set="method" line="146" static="1"><f a="iter:index">
	<t path="Iterable"><c path="at.T"/></t>
	<c path="Int"/>
	<c path="at.T"/>
</f></at>
		<flatten public="1" params="T" set="method" line="160" static="1"><f a="iter">
	<t path="Iterable"><t path="Iterable"><c path="flatten.T"/></t></t>
	<t path="Iterable"><c path="flatten.T"/></t>
</f></flatten>
		<interleave public="1" params="T" set="method" line="164" static="1"><f a="iter">
	<t path="Iterable"><t path="Iterable"><c path="interleave.T"/></t></t>
	<t path="Iterable"><c path="interleave.T"/></t>
</f></interleave>
		<zip public="1" params="T1:T2" set="method" line="173" static="1"><f a="iter1:iter2">
	<t path="Iterable"><c path="zip.T1"/></t>
	<t path="Iterable"><c path="zip.T2"/></t>
	<t path="Iterable"><c path="stx.Tuple2">
	<c path="zip.T1"/>
	<c path="zip.T2"/>
</c></t>
</f></zip>
		<zipup public="1" params="T1:T2" set="method" line="188" static="1"><f a="tuple">
	<c path="stx.Tuple2">
		<t path="Iterable"><c path="zipup.T1"/></t>
		<t path="Iterable"><c path="zipup.T2"/></t>
	</c>
	<t path="Iterable"><c path="stx.Tuple2">
	<c path="zipup.T1"/>
	<c path="zipup.T2"/>
</c></t>
</f></zipup>
		<append public="1" params="T" set="method" line="202" static="1"><f a="iter:e">
	<t path="Iterable"><c path="append.T"/></t>
	<c path="append.T"/>
	<t path="Iterable"><c path="append.T"/></t>
</f></append>
		<cons public="1" params="T" set="method" line="214" static="1">
			<f a="iter:e">
				<t path="Iterable"><c path="cons.T"/></t>
				<c path="cons.T"/>
				<t path="Iterable"><c path="cons.T"/></t>
			</f>
			<haxe_doc>
   * Returns an iterable with an element prepended.
	 * @param iter 	Iterable
	 * @param e 		The element to prepend.
   </haxe_doc>
		</cons>
		<reversed public="1" params="T" set="method" line="224" static="1">
			<f a="iter">
				<t path="Iterable"><c path="reversed.T"/></t>
				<t path="Iterable"><c path="reversed.T"/></t>
			</f>
			<haxe_doc>
	 * Returns the Iterable with elements in reverse order.
	 </haxe_doc>
		</reversed>
		<and public="1" params="T" set="method" line="234" static="1">
			<f a="iter">
				<t path="Iterable"><e path="Bool"/></t>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   * Returns that all elements in 'iter' are true.
   </haxe_doc>
		</and>
		<or public="1" params="T" set="method" line="246" static="1">
			<f a="iter">
				<t path="Iterable"><e path="Bool"/></t>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   * Returns that any element in 'iter' is true.
   </haxe_doc>
		</or>
		<scanl public="1" params="T" set="method" line="257" static="1">
			<f a="iter:init:f">
				<t path="Iterable"><c path="scanl.T"/></t>
				<c path="scanl.T"/>
				<f a=":">
					<c path="scanl.T"/>
					<c path="scanl.T"/>
					<c path="scanl.T"/>
				</f>
				<t path="Iterable"><c path="scanl.T"/></t>
			</f>
			<haxe_doc>
   * 
   </haxe_doc>
		</scanl>
		<scanr public="1" params="T" set="method" line="267" static="1"><f a="iter:init:f">
	<t path="Iterable"><c path="scanr.T"/></t>
	<c path="scanr.T"/>
	<f a=":">
		<c path="scanr.T"/>
		<c path="scanr.T"/>
		<c path="scanr.T"/>
	</f>
	<t path="Iterable"><c path="scanr.T"/></t>
</f></scanr>
		<scanl1 public="1" params="T" set="method" line="271" static="1"><f a="iter:f">
	<t path="Iterable"><c path="scanl1.T"/></t>
	<f a=":">
		<c path="scanl1.T"/>
		<c path="scanl1.T"/>
		<c path="scanl1.T"/>
	</f>
	<t path="Iterable"><c path="scanl1.T"/></t>
</f></scanl1>
		<scanr1 public="1" params="T" set="method" line="284" static="1"><f a="iter:f">
	<t path="Iterable"><c path="scanr1.T"/></t>
	<f a=":">
		<c path="scanr1.T"/>
		<c path="scanr1.T"/>
		<c path="scanr1.T"/>
	</f>
	<t path="Iterable"><c path="scanr1.T"/></t>
</f></scanr1>
		<existsP public="1" params="T" set="method" line="288" static="1"><f a="iter:ref:f">
	<t path="Iterable"><c path="existsP.T"/></t>
	<c path="existsP.T"/>
	<f a=":">
		<c path="existsP.T"/>
		<c path="existsP.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></existsP>
		<nubBy public="1" params="T" set="method" line="298" static="1"><f a="iter:f">
	<t path="Iterable"><c path="nubBy.T"/></t>
	<f a=":">
		<c path="nubBy.T"/>
		<c path="nubBy.T"/>
		<e path="Bool"/>
	</f>
	<t path="Iterable"><c path="nubBy.T"/></t>
</f></nubBy>
		<intersectBy public="1" params="T" set="method" line="310" static="1"><f a="iter1:iter2:f">
	<t path="Iterable"><c path="intersectBy.T"/></t>
	<t path="Iterable"><c path="intersectBy.T"/></t>
	<f a=":">
		<c path="intersectBy.T"/>
		<c path="intersectBy.T"/>
		<e path="Bool"/>
	</f>
	<t path="Iterable"><c path="intersectBy.T"/></t>
</f></intersectBy>
		<intersect public="1" params="T" set="method" line="316" static="1"><f a="iter1:iter2">
	<t path="Iterable"><c path="intersect.T"/></t>
	<t path="Iterable"><c path="intersect.T"/></t>
	<t path="Iterable"><c path="intersect.T"/></t>
</f></intersect>
		<unionBy public="1" params="T" set="method" line="322" static="1"><f a="iter1:iter2:f">
	<t path="Iterable"><c path="unionBy.T"/></t>
	<t path="Iterable"><c path="unionBy.T"/></t>
	<f a=":">
		<c path="unionBy.T"/>
		<c path="unionBy.T"/>
		<e path="Bool"/>
	</f>
	<t path="Iterable"><c path="unionBy.T"/></t>
</f></unionBy>
		<union public="1" params="T" set="method" line="341" static="1"><f a="iter1:iter2">
	<t path="Iterable"><c path="union.T"/></t>
	<t path="Iterable"><c path="union.T"/></t>
	<t path="Iterable"><c path="union.T"/></t>
</f></union>
		<partition public="1" params="T" set="method" line="345" static="1"><f a="iter:f">
	<t path="Iterable"><c path="partition.T"/></t>
	<f a="">
		<c path="partition.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.Tuple2">
		<t path="Iterable"><c path="partition.T"/></t>
		<t path="Iterable"><c path="partition.T"/></t>
	</c>
</f></partition>
		<partitionWhile public="1" params="T" set="method" line="349" static="1"><f a="iter:f">
	<t path="Iterable"><c path="partitionWhile.T"/></t>
	<f a="">
		<c path="partitionWhile.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.Tuple2">
		<t path="Iterable"><c path="partitionWhile.T"/></t>
		<t path="Iterable"><c path="partitionWhile.T"/></t>
	</c>
</f></partitionWhile>
		<count public="1" params="T" set="method" line="353" static="1"><f a="iter:f">
	<t path="Iterable"><c path="count.T"/></t>
	<f a="">
		<c path="count.T"/>
		<e path="Bool"/>
	</f>
	<c path="Int"/>
</f></count>
		<countWhile public="1" params="T" set="method" line="357" static="1"><f a="iter:f">
	<t path="Iterable"><c path="countWhile.T"/></t>
	<f a="">
		<c path="countWhile.T"/>
		<e path="Bool"/>
	</f>
	<c path="Int"/>
</f></countWhile>
		<elements public="1" params="T" set="method" line="361" static="1"><f a="iter">
	<t path="Iterable"><c path="elements.T"/></t>
	<t path="Iterable"><c path="elements.T"/></t>
</f></elements>
		<appendAll public="1" params="T" set="method" line="365" static="1"><f a="iter:i">
	<t path="Iterable"><c path="appendAll.T"/></t>
	<t path="Iterable"><c path="appendAll.T"/></t>
	<t path="Iterable"><c path="appendAll.T"/></t>
</f></appendAll>
		<isEmpty public="1" params="T" set="method" line="369" static="1"><f a="iter">
	<t path="Iterable"><c path="isEmpty.T"/></t>
	<e path="Bool"/>
</f></isEmpty>
		<find public="1" params="T" set="method" line="373" static="1"><f a="iter:f">
	<t path="Iterable"><c path="find.T"/></t>
	<f a="">
		<c path="find.T"/>
		<e path="Bool"/>
	</f>
	<e path="stx.Option"><c path="find.T"/></e>
</f></find>
		<forAll public="1" params="T" set="method" line="377" static="1"><f a="iter:f">
	<t path="Iterable"><c path="forAll.T"/></t>
	<f a="">
		<c path="forAll.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></forAll>
		<forAny public="1" params="T" set="method" line="381" static="1"><f a="iter:f">
	<t path="Iterable"><c path="forAny.T"/></t>
	<f a="">
		<c path="forAny.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></forAny>
		<first public="1" params="T" get="inline" set="null" line="384" static="1"><f a="iter">
	<t path="Iterable"><c path="first.T"/></t>
	<c path="first.T"/>
</f></first>
		<unwind public="1" params="T" set="method" line="388" static="1"><f a="root:children:?breadth">
	<c path="unwind.T"/>
	<f a="">
		<c path="unwind.T"/>
		<t path="Iterable"><c path="unwind.T"/></t>
	</f>
	<e path="Bool"/>
	<t path="Iterable"><c path="unwind.T"/></t>
</f></unwind>
		<yield public="1" params="A" set="method" line="407" static="1"><f a="fn">
	<f a=""><e path="stx.Option"><c path="yield.A"/></e></f>
	<t path="Iterable"><c path="yield.A"/></t>
</f></yield>
	</class>
	<class path="stx.Iterators" params="" file="src/main/haxe/stx/Iterators.hx">
		<yield public="1" params="A" set="method" line="11" static="1"><f a="fn">
	<f a=""><e path="stx.Option"><c path="yield.A"/></e></f>
	<t path="Iterator"><c path="yield.A"/></t>
</f></yield>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<enum path="stx.LogLevel" params="" file="src/main/haxe/stx/Log.hx" module="stx.Log">
		<Warning/>
		<Info/>
		<Fatal/>
		<Error/>
		<Debug/>
		<haxe_doc>
  * To use the Log 
	* 	haxe.Log.//trace = stx.io.log.Logger.trace;
	* then
	* 	//trace('any normal string');
	* 	//trace('any string'.debug());
	* 	//trace(obj.warning());
  </haxe_doc>
	</enum>
	<class path="stx.LogItem" params="" file="src/main/haxe/stx/Log.hx" module="stx.Log">
		<toString public="1" set="method" line="41"><f a=""><c path="String"/></f></toString>
		<level public="1"><e path="stx.LogLevel"/></level>
		<value public="1"><d/></value>
		<new public="1" set="method" line="37"><f a="level:value">
	<e path="stx.LogLevel"/>
	<unknown/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="stx.LogListing" params="" file="src/main/haxe/stx/Log.hx" module="stx.Log">
		<Include a="s"><c path="String"/></Include>
		<Exclude a="s"><c path="String"/></Exclude>
	</enum>
	<class path="stx.Log" params="" file="src/main/haxe/stx/Log.hx">
		<debug public="1" set="method" line="52" static="1"><f a="v">
	<d/>
	<c path="stx.LogItem"/>
</f></debug>
		<info public="1" set="method" line="55" static="1"><f a="v">
	<d/>
	<c path="stx.LogItem"/>
</f></info>
		<warning public="1" set="method" line="58" static="1"><f a="v">
	<d/>
	<c path="stx.LogItem"/>
</f></warning>
		<error public="1" set="method" line="61" static="1"><f a="v">
	<d/>
	<c path="stx.LogItem"/>
</f></error>
		<fatal public="1" set="method" line="64" static="1"><f a="v">
	<d/>
	<c path="stx.LogItem"/>
</f></fatal>
		<trace public="1" set="method" line="67" static="1"><f a="v:?pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<format public="1" set="method" line="86" static="1"><f a="p">
	<t path="haxe.PosInfos"/>
	<c path="String"/>
</f></format>
		<whitelist public="1" set="method" line="89" static="1"><f a="s">
	<c path="String"/>
	<e path="stx.LogListing"/>
</f></whitelist>
		<blacklist public="1" set="method" line="92" static="1"><f a="s">
	<c path="String"/>
	<e path="stx.LogListing"/>
</f></blacklist>
		<pack public="1" set="method" line="95" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></pack>
		<func public="1" set="method" line="96" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></func>
		<file public="1" set="method" line="97" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></file>
	</class>
	<class path="stx.Logger" params="" file="src/main/haxe/stx/Log.hx" module="stx.Log" interface="1">
		<__meta__ public="1" line="100" static="1"><d/></__meta__>
		<check public="1" set="method"><f a="v:?pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Bool"/>
</f></check>
		<trace public="1" set="method"><f a="v:?pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<level public="1"><e path="stx.LogLevel"/></level>
	</class>
	<class path="stx.DefaultLogger" params="" file="src/main/haxe/stx/Log.hx" module="stx.Log">
		<create public="1" set="method" line="106" static="1"><f a="listings:?level">
	<c path="Array"><e path="stx.LogListing"/></c>
	<e path="stx.LogLevel"/>
	<c path="stx.DefaultLogger"/>
</f></create>
		<listings><c path="Array"><e path="stx.LogListing"/></c></listings>
		<permissive><e path="Bool"/></permissive>
		<level public="1" set="null"><e path="stx.LogLevel"/></level>
		<check public="1" set="method" line="125">
			<f a="v:pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * If there is no whitelist, make sure there are no matches in the blacklist,
	 * If there is a whitelist, make sure it passes at least one, and then chek the blacklist as above.
	 * @param	v
	 * @param	?pos
	 * @return
	 </haxe_doc>
		</check>
		<checker set="method" line="173"><f a="pos:v">
	<t path="haxe.PosInfos"/>
	<c path="String"/>
	<e path="Bool"/>
</f></checker>
		<trace public="1" set="method" line="186"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<new public="1" set="method" line="113"><f a="?listings:?level:?permissive">
	<c path="Array"><e path="stx.LogListing"/></c>
	<e path="stx.LogLevel"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Maths" params="" file="src/main/haxe/stx/Maths.hx">
		<rndOne public="1" get="inline" set="null" line="13" static="1">
			<f a="?weight">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
	 * Produces either a zero or a one randomly, influenced by weight
	 * @return
	 </haxe_doc>
		</rndOne>
		<radians public="1" get="inline" set="null" line="20" static="1">
			<f a="v">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
	 * Produces the radians of a given angle in degrees.
	 * @param	v
	 </haxe_doc>
		</radians>
		<degrees public="1" get="inline" set="null" line="27" static="1">
			<f a="v">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
	 * Produces the degrees of a given angle in radians.
	 * @param	v
	 </haxe_doc>
		</degrees>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Ints" params="" file="src/main/haxe/stx/Maths.hx" module="stx.Maths">
		<max public="1" get="inline" set="null" line="38" static="1">
			<f a="v1:v2">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
	 * Produces whichever is the greater.
	 * @param	v1
	 * @param	v2
	 * @return
	 </haxe_doc>
		</max>
		<min public="1" set="method" line="45" static="1">
			<f a="v1:v2">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
	 * Produces whichever is the lesser.
	 * @param	v1
	 * @param	v2
	 * @return
	 </haxe_doc>
		</min>
		<toBool public="1" set="method" line="51" static="1">
			<f a="v">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Produces a Bool if 'v' == 0;
	 * @param	v
	 * @return
	 </haxe_doc>
		</toBool>
		<toFloat public="1" set="method" line="57" static="1">
			<f a="v">
				<c path="Int"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
	 * Coerces an Int to a Float.
	 * @param	v
	 * @return
	 </haxe_doc>
		</toFloat>
		<compare public="1" set="method" line="65" static="1">
			<f a="v1:v2">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
	 * Produces -1 if 'v1' is smaller, 1 if 'v1' is greater, or 0 if 'v1' == 'v2'
	 * @param	v1
	 * @param	v2
	 * @return
	 </haxe_doc>
		</compare>
		<equals public="1" set="method" line="74" static="1">
			<f a="v1:v2">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Produces true if 'v1' == 'v2'
	 * @param	v1
	 * @param	v2
	 * @return
	 </haxe_doc>
		</equals>
		<isOdd public="1" get="inline" set="null" line="81" static="1">
			<f a="value">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Produces true if 'value' is odd, false otherwise.
	 * @param	value
	 </haxe_doc>
		</isOdd>
		<isEven public="1" get="inline" set="null" line="88" static="1">
			<f a="value">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Produces true if 'value' is even, false otherwise.
	 * @param	value
	 </haxe_doc>
		</isEven>
		<isInteger public="1" get="inline" set="null" line="95" static="1">
			<f a="n">
				<c path="Float"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Produces true if 'n' is an integer, false otherwise.
	 * @param	n
	 </haxe_doc>
		</isInteger>
		<isNatural public="1" get="inline" set="null" line="102" static="1">
			<f a="n">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Produces true if 'n' is a natural number, false otherwise.
	 * @param	n
	 </haxe_doc>
		</isNatural>
		<isPrime public="1" get="inline" set="null" line="109" static="1">
			<f a="n">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Produces true if 'n' is a prime number, false otherwise.
	 * @param	n
	 </haxe_doc>
		</isPrime>
		<factorial public="1" set="method" line="126" static="1">
			<f a="n">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
	 * Produces the factorial of 'n'.
	 * @param	n
	 </haxe_doc>
		</factorial>
		<divisors public="1" get="inline" set="null" line="140" static="1"><f a="n">
	<c path="Int"/>
	<c path="Array"><c path="Int"/></c>
</f></divisors>
		<clamp public="1" get="inline" set="null" line="151" static="1"><f a="n:min:max">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></clamp>
		<half public="1" get="inline" set="null" line="163" static="1">
			<f a="n">
				<c path="Int"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
	 * Produces half of 'n'.
	 * @param	n
	 </haxe_doc>
		</half>
		<sum public="1" get="inline" set="null" line="171" static="1">
			<f a="xs">
				<t path="Iterable"><c path="Int"/></t>
				<c path="Int"/>
			</f>
			<haxe_doc>
	 * Produces the sum of the elements in 'xs'.
	 * @param	xs
	 * @return
	 </haxe_doc>
		</sum>
	</class>
	<class path="stx.Floats" params="" file="src/main/haxe/stx/Maths.hx" module="stx.Maths">
		<delta public="1" get="inline" set="null" line="185" static="1">
			<f a="n0:n1">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
	 * Produces the difference between 'n1' and 'n0'.
	 * @param	n0
	 * @param	n1
	 </haxe_doc>
		</delta>
		<normalize public="1" get="inline" set="null" line="193" static="1">
			<f a="v:n0:n1">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
	 * @param	v
	 * @param	n0
	 * @param	n1
	 </haxe_doc>
		</normalize>
		<interpolate public="1" get="inline" set="null" line="196" static="1"><f a="v:n0:n1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></interpolate>
		<map public="1" get="inline" set="null" line="199" static="1"><f a="v:min0:max0:min1:max1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></map>
		<round public="1" get="inline" set="null" line="202" static="1"><f a="n:?c">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Int"/>
</f></round>
		<ceil public="1" get="inline" set="null" line="206" static="1"><f a="n:?c">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Int"/>
</f></ceil>
		<floor public="1" get="inline" set="null" line="210" static="1"><f a="n:?c">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Int"/>
</f></floor>
		<clamp public="1" get="inline" set="null" line="214" static="1"><f a="n:min:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></clamp>
		<sgn public="1" get="inline" set="null" line="218" static="1"><f a="n">
	<c path="Float"/>
	<c path="Float"/>
</f></sgn>
		<max public="1" set="method" line="221" static="1"><f a="v1:v2">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<min public="1" set="method" line="222" static="1"><f a="v1:v2">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<int public="1" set="method" line="223" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></int>
		<compare public="1" set="method" line="224" static="1"><f a="v1:v2">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></compare>
		<equals public="1" set="method" line="227" static="1"><f a="v1:v2">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="230" static="1"><f a="v">
	<c path="Float"/>
	<c path="String"/>
</f></toString>
	</class>
	<typedef path="stx.DynMethod" params="" file="src/main/haxe/stx/Methods.hx" module="stx.Methods">
		<c path="stx.Method">
			<d/>
			<d/>
			<d/>
		</c>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</typedef>
	<enum path="stx.MethodConvention" params="" file="src/main/haxe/stx/Methods.hx" module="stx.Methods">
		<Replace/>
		<Patch/>
		<Ignore/>
	</enum>
	<class path="stx.Method" params="I:O:F" file="src/main/haxe/stx/Methods.hx" module="stx.Methods">
		<pos public="1"><t path="haxe.PosInfos"/></pos>
		<name public="1"><c path="String"/></name>
		<setName public="1" set="method" line="34"><f a="n">
	<c path="String"/>
	<c path="stx.Method">
		<c path="stx.Method.I"/>
		<c path="stx.Method.O"/>
		<c path="stx.Method.F"/>
	</c>
</f></setName>
		<convention public="1"><e path="stx.MethodConvention"/></convention>
		<fn public="1" set="null"><c path="stx.Method.F"/></fn>
		<args public="1" set="null"><c path="stx.Method.I"/></args>
		<length public="1" get="get_length" set="null"><c path="Int"/></length>
		<get_length set="method" line="44"><f a=""><c path="Int"/></f></get_length>
		<execute public="1" set="method" line="57"><f a="?v:?pos">
	<c path="stx.Method.I"/>
	<t path="haxe.PosInfos"/>
	<c path="stx.Method.O"/>
</f></execute>
		<patch public="1" set="method" line="61"><f a="args">
	<c path="stx.Method.I"/>
	<c path="stx.Method">
		<c path="stx.Method.I"/>
		<c path="stx.Method.O"/>
		<c path="stx.Method.F"/>
	</c>
</f></patch>
		<replaceAt public="1" set="method" line="65"><f a="i:v">
	<c path="Int"/>
	<d/>
	<c path="stx.Method">
		<c path="stx.Method.I"/>
		<c path="stx.Method.O"/>
		<c path="stx.Method.F"/>
	</c>
</f></replaceAt>
		<equals public="1" set="method" line="69"><f a="m">
	<c path="stx.Method">
		<d/>
		<d/>
		<d/>
	</c>
	<e path="Bool"/>
</f></equals>
		<requals public="1" set="method" line="73"><f a="f">
	<d/>
	<e path="Bool"/>
</f></requals>
		<isEmpty public="1" set="method" line="76"><f a=""><e path="Bool"/></f></isEmpty>
		<toString public="1" set="method" line="79"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="48"><f a="fn:name:?pos">
	<c path="stx.Method.F"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Method0" params="O" file="src/main/haxe/stx/Methods.hx" module="stx.Methods">
		<extends path="stx.Method">
			<e path="Void"/>
			<c path="stx.Method0.O"/>
			<f a=""><c path="stx.Method0.O"/></f>
		</extends>
		<toMethod public="1" params="O" set="method" line="91" static="1"><f a="fn:name">
	<f a=""><c path="toMethod.O"/></f>
	<c path="String"/>
	<c path="stx.Method0"><c path="toMethod.O"/></c>
</f></toMethod>
		<execute public="1" set="method" line="87" override="1"><f a="?v:?pos">
	<e path="Void"/>
	<t path="haxe.PosInfos"/>
	<c path="stx.Method0.O"/>
</f></execute>
		<new public="1" set="method" line="84"><f a="fn:name:?pos">
	<f a=""><c path="stx.Method0.O"/></f>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Method1" params="I:O" file="src/main/haxe/stx/Methods.hx" module="stx.Methods">
		<extends path="stx.Method">
			<c path="stx.Method1.I"/>
			<c path="stx.Method1.O"/>
			<f a="">
				<c path="stx.Method1.I"/>
				<c path="stx.Method1.O"/>
			</f>
		</extends>
		<toMethod public="1" params="I:O" set="method" line="119" static="1"><f a="v:name:?pos">
	<f a="">
		<c path="toMethod.I"/>
		<c path="toMethod.O"/>
	</f>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<c path="stx.Method1">
		<c path="toMethod.I"/>
		<c path="toMethod.O"/>
	</c>
</f></toMethod>
		<get_length set="method" line="99" override="1"><f a=""><c path="Int"/></f></get_length>
		<execute public="1" set="method" line="102" override="1"><f a="?v:?pos">
	<c path="stx.Method1.I"/>
	<t path="haxe.PosInfos"/>
	<c path="stx.Method1.O"/>
</f></execute>
		<patch public="1" set="method" line="122" override="1"><f a="args">
	<c path="stx.Method1.I"/>
	<c path="stx.Method">
		<c path="stx.Method1.I"/>
		<c path="stx.Method1.O"/>
		<f a="">
			<c path="stx.Method1.I"/>
			<c path="stx.Method1.O"/>
		</f>
	</c>
</f></patch>
		<replaceAt public="1" set="method" line="126" override="1"><f a="i:v">
	<c path="Int"/>
	<d/>
	<c path="stx.Method">
		<c path="stx.Method1.I"/>
		<c path="stx.Method1.O"/>
		<f a="">
			<c path="stx.Method1.I"/>
			<c path="stx.Method1.O"/>
		</f>
	</c>
</f></replaceAt>
		<new public="1" set="method" line="96"><f a="fn:name:?pos">
	<f a="">
		<c path="stx.Method1.I"/>
		<c path="stx.Method1.O"/>
	</f>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Method2" params="A:B:O" file="src/main/haxe/stx/Methods.hx" module="stx.Methods">
		<extends path="stx.Method">
			<c path="stx.Tuple2">
				<c path="stx.Method2.A"/>
				<c path="stx.Method2.B"/>
			</c>
			<c path="stx.Method2.O"/>
			<f a=":">
				<c path="stx.Method2.A"/>
				<c path="stx.Method2.B"/>
				<c path="stx.Method2.O"/>
			</f>
		</extends>
		<toMethod public="1" params="A:B:O" set="method" line="169" static="1"><f a="v:name">
	<f a=":">
		<c path="toMethod.A"/>
		<c path="toMethod.B"/>
		<c path="toMethod.O"/>
	</f>
	<c path="String"/>
	<c path="stx.Method2">
		<c path="toMethod.A"/>
		<c path="toMethod.B"/>
		<c path="toMethod.O"/>
	</c>
</f></toMethod>
		<get_length set="method" line="135" override="1"><f a=""><c path="Int"/></f></get_length>
		<execute public="1" set="method" line="141" override="1"><f a="?v:?pos">
	<c path="stx.Tuple2">
		<c path="stx.Method2.A"/>
		<c path="stx.Method2.B"/>
	</c>
	<t path="haxe.PosInfos"/>
	<c path="stx.Method2.O"/>
</f></execute>
		<patch public="1" set="method" line="151" override="1"><f a="args">
	<c path="stx.Tuple2">
		<c path="stx.Method2.A"/>
		<c path="stx.Method2.B"/>
	</c>
	<c path="stx.Method">
		<c path="stx.Tuple2">
			<c path="stx.Method2.A"/>
			<c path="stx.Method2.B"/>
		</c>
		<c path="stx.Method2.O"/>
		<f a=":">
			<c path="stx.Method2.A"/>
			<c path="stx.Method2.B"/>
			<c path="stx.Method2.O"/>
		</f>
	</c>
</f></patch>
		<replaceAt public="1" set="method" line="155" override="1"><f a="i:v">
	<c path="Int"/>
	<d/>
	<c path="stx.Method">
		<c path="stx.Tuple2">
			<c path="stx.Method2.A"/>
			<c path="stx.Method2.B"/>
		</c>
		<c path="stx.Method2.O"/>
		<f a=":">
			<c path="stx.Method2.A"/>
			<c path="stx.Method2.B"/>
			<c path="stx.Method2.O"/>
		</f>
	</c>
</f></replaceAt>
		<new public="1" set="method" line="138"><f a="fn:name:?pos">
	<f a=":">
		<c path="stx.Method2.A"/>
		<c path="stx.Method2.B"/>
		<c path="stx.Method2.O"/>
	</f>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Method3" params="A:B:C:O" file="src/main/haxe/stx/Methods.hx" module="stx.Methods">
		<extends path="stx.Method">
			<c path="stx.Tuple3">
				<c path="stx.Method3.A"/>
				<c path="stx.Method3.B"/>
				<c path="stx.Method3.C"/>
			</c>
			<c path="stx.Method3.O"/>
			<f a="::">
				<c path="stx.Method3.A"/>
				<c path="stx.Method3.B"/>
				<c path="stx.Method3.C"/>
				<c path="stx.Method3.O"/>
			</f>
		</extends>
		<toMethod public="1" params="A:B:C:O" set="method" line="211" static="1"><f a="v:name">
	<f a="::">
		<c path="toMethod.A"/>
		<c path="toMethod.B"/>
		<c path="toMethod.C"/>
		<c path="toMethod.O"/>
	</f>
	<c path="String"/>
	<c path="stx.Method3">
		<c path="toMethod.A"/>
		<c path="toMethod.B"/>
		<c path="toMethod.C"/>
		<c path="toMethod.O"/>
	</c>
</f></toMethod>
		<get_length set="method" line="176" override="1"><f a=""><c path="Int"/></f></get_length>
		<execute public="1" set="method" line="182" override="1"><f a="?v:?pos">
	<c path="stx.Tuple3">
		<c path="stx.Method3.A"/>
		<c path="stx.Method3.B"/>
		<c path="stx.Method3.C"/>
	</c>
	<t path="haxe.PosInfos"/>
	<c path="stx.Method3.O"/>
</f></execute>
		<patch public="1" set="method" line="192" override="1"><f a="args">
	<c path="stx.Tuple3">
		<c path="stx.Method3.A"/>
		<c path="stx.Method3.B"/>
		<c path="stx.Method3.C"/>
	</c>
	<c path="stx.Method">
		<c path="stx.Tuple3">
			<c path="stx.Method3.A"/>
			<c path="stx.Method3.B"/>
			<c path="stx.Method3.C"/>
		</c>
		<c path="stx.Method3.O"/>
		<f a="::">
			<c path="stx.Method3.A"/>
			<c path="stx.Method3.B"/>
			<c path="stx.Method3.C"/>
			<c path="stx.Method3.O"/>
		</f>
	</c>
</f></patch>
		<replaceAt public="1" set="method" line="196" override="1"><f a="i:v">
	<c path="Int"/>
	<d/>
	<c path="stx.Method">
		<c path="stx.Tuple3">
			<c path="stx.Method3.A"/>
			<c path="stx.Method3.B"/>
			<c path="stx.Method3.C"/>
		</c>
		<c path="stx.Method3.O"/>
		<f a="::">
			<c path="stx.Method3.A"/>
			<c path="stx.Method3.B"/>
			<c path="stx.Method3.C"/>
			<c path="stx.Method3.O"/>
		</f>
	</c>
</f></replaceAt>
		<new public="1" set="method" line="179"><f a="fn:name:?pos">
	<f a="::">
		<c path="stx.Method3.A"/>
		<c path="stx.Method3.B"/>
		<c path="stx.Method3.C"/>
		<c path="stx.Method3.O"/>
	</f>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Method4" params="A:B:C:D:O" file="src/main/haxe/stx/Methods.hx" module="stx.Methods">
		<extends path="stx.Method">
			<c path="stx.Tuple4">
				<c path="stx.Method4.A"/>
				<c path="stx.Method4.B"/>
				<c path="stx.Method4.C"/>
				<c path="stx.Method4.D"/>
			</c>
			<c path="stx.Method4.O"/>
			<f a=":::">
				<c path="stx.Method4.A"/>
				<c path="stx.Method4.B"/>
				<c path="stx.Method4.C"/>
				<c path="stx.Method4.D"/>
				<c path="stx.Method4.O"/>
			</f>
		</extends>
		<toMethod public="1" params="A:B:C:D:O" set="method" line="252" static="1"><f a="v:name">
	<f a=":::">
		<c path="toMethod.A"/>
		<c path="toMethod.B"/>
		<c path="toMethod.C"/>
		<c path="toMethod.D"/>
		<c path="toMethod.O"/>
	</f>
	<c path="String"/>
	<c path="stx.Method4">
		<c path="toMethod.A"/>
		<c path="toMethod.B"/>
		<c path="toMethod.C"/>
		<c path="toMethod.D"/>
		<c path="toMethod.O"/>
	</c>
</f></toMethod>
		<get_length set="method" line="216" override="1"><f a=""><c path="Int"/></f></get_length>
		<execute public="1" set="method" line="222" override="1"><f a="?v:?pos">
	<c path="stx.Tuple4">
		<c path="stx.Method4.A"/>
		<c path="stx.Method4.B"/>
		<c path="stx.Method4.C"/>
		<c path="stx.Method4.D"/>
	</c>
	<t path="haxe.PosInfos"/>
	<c path="stx.Method4.O"/>
</f></execute>
		<patch public="1" set="method" line="232" override="1"><f a="args">
	<c path="stx.Tuple4">
		<c path="stx.Method4.A"/>
		<c path="stx.Method4.B"/>
		<c path="stx.Method4.C"/>
		<c path="stx.Method4.D"/>
	</c>
	<c path="stx.Method">
		<c path="stx.Tuple4">
			<c path="stx.Method4.A"/>
			<c path="stx.Method4.B"/>
			<c path="stx.Method4.C"/>
			<c path="stx.Method4.D"/>
		</c>
		<c path="stx.Method4.O"/>
		<f a=":::">
			<c path="stx.Method4.A"/>
			<c path="stx.Method4.B"/>
			<c path="stx.Method4.C"/>
			<c path="stx.Method4.D"/>
			<c path="stx.Method4.O"/>
		</f>
	</c>
</f></patch>
		<replaceAt public="1" set="method" line="236" override="1"><f a="i:v">
	<c path="Int"/>
	<d/>
	<c path="stx.Method">
		<c path="stx.Tuple4">
			<c path="stx.Method4.A"/>
			<c path="stx.Method4.B"/>
			<c path="stx.Method4.C"/>
			<c path="stx.Method4.D"/>
		</c>
		<c path="stx.Method4.O"/>
		<f a=":::">
			<c path="stx.Method4.A"/>
			<c path="stx.Method4.B"/>
			<c path="stx.Method4.C"/>
			<c path="stx.Method4.D"/>
			<c path="stx.Method4.O"/>
		</f>
	</c>
</f></replaceAt>
		<new public="1" set="method" line="219"><f a="fn:name:?pos">
	<f a=":::">
		<c path="stx.Method4.A"/>
		<c path="stx.Method4.B"/>
		<c path="stx.Method4.C"/>
		<c path="stx.Method4.D"/>
		<c path="stx.Method4.O"/>
	</f>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Method5" params="A:B:C:D:E:O" file="src/main/haxe/stx/Methods.hx" module="stx.Methods">
		<extends path="stx.Method">
			<c path="stx.Tuple5">
				<c path="stx.Method5.A"/>
				<c path="stx.Method5.B"/>
				<c path="stx.Method5.C"/>
				<c path="stx.Method5.D"/>
				<c path="stx.Method5.E"/>
			</c>
			<c path="stx.Method5.O"/>
			<f a="::::">
				<c path="stx.Method5.A"/>
				<c path="stx.Method5.B"/>
				<c path="stx.Method5.C"/>
				<c path="stx.Method5.D"/>
				<c path="stx.Method5.E"/>
				<c path="stx.Method5.O"/>
			</f>
		</extends>
		<toMethod public="1" params="A:B:C:D:E:O" set="method" line="293" static="1"><f a="v:name">
	<f a="::::">
		<c path="toMethod.A"/>
		<c path="toMethod.B"/>
		<c path="toMethod.C"/>
		<c path="toMethod.D"/>
		<c path="toMethod.E"/>
		<c path="toMethod.O"/>
	</f>
	<c path="String"/>
	<c path="stx.Method5">
		<c path="toMethod.A"/>
		<c path="toMethod.B"/>
		<c path="toMethod.C"/>
		<c path="toMethod.D"/>
		<c path="toMethod.E"/>
		<c path="toMethod.O"/>
	</c>
</f></toMethod>
		<get_length set="method" line="257" override="1"><f a=""><c path="Int"/></f></get_length>
		<execute public="1" set="method" line="263" override="1"><f a="?v:?pos">
	<c path="stx.Tuple5">
		<c path="stx.Method5.A"/>
		<c path="stx.Method5.B"/>
		<c path="stx.Method5.C"/>
		<c path="stx.Method5.D"/>
		<c path="stx.Method5.E"/>
	</c>
	<t path="haxe.PosInfos"/>
	<c path="stx.Method5.O"/>
</f></execute>
		<patch public="1" set="method" line="273" override="1"><f a="args">
	<c path="stx.Tuple5">
		<c path="stx.Method5.A"/>
		<c path="stx.Method5.B"/>
		<c path="stx.Method5.C"/>
		<c path="stx.Method5.D"/>
		<c path="stx.Method5.E"/>
	</c>
	<c path="stx.Method">
		<c path="stx.Tuple5">
			<c path="stx.Method5.A"/>
			<c path="stx.Method5.B"/>
			<c path="stx.Method5.C"/>
			<c path="stx.Method5.D"/>
			<c path="stx.Method5.E"/>
		</c>
		<c path="stx.Method5.O"/>
		<f a="::::">
			<c path="stx.Method5.A"/>
			<c path="stx.Method5.B"/>
			<c path="stx.Method5.C"/>
			<c path="stx.Method5.D"/>
			<c path="stx.Method5.E"/>
			<c path="stx.Method5.O"/>
		</f>
	</c>
</f></patch>
		<replaceAt public="1" set="method" line="277" override="1"><f a="i:v">
	<c path="Int"/>
	<d/>
	<c path="stx.Method">
		<c path="stx.Tuple5">
			<c path="stx.Method5.A"/>
			<c path="stx.Method5.B"/>
			<c path="stx.Method5.C"/>
			<c path="stx.Method5.D"/>
			<c path="stx.Method5.E"/>
		</c>
		<c path="stx.Method5.O"/>
		<f a="::::">
			<c path="stx.Method5.A"/>
			<c path="stx.Method5.B"/>
			<c path="stx.Method5.C"/>
			<c path="stx.Method5.D"/>
			<c path="stx.Method5.E"/>
			<c path="stx.Method5.O"/>
		</f>
	</c>
</f></replaceAt>
		<new public="1" set="method" line="260"><f a="fn:name:?pos">
	<f a="::::">
		<c path="stx.Method5.A"/>
		<c path="stx.Method5.B"/>
		<c path="stx.Method5.C"/>
		<c path="stx.Method5.D"/>
		<c path="stx.Method5.E"/>
		<c path="stx.Method5.O"/>
	</f>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Methods" params="" file="src/main/haxe/stx/Methods.hx">
		<apply public="1" params="I:O:F" set="method" line="298" static="1"><f a="f:v:?pos">
	<e path="stx.Option"><c path="stx.Method">
	<c path="apply.I"/>
	<c path="apply.O"/>
	<c path="apply.F"/>
</c></e>
	<c path="apply.I"/>
	<t path="haxe.PosInfos"/>
	<c path="apply.O"/>
</f></apply>
		<applyOr public="1" params="I:O:F" set="method" line="304" static="1"><f a="o:x:f0:?pos">
	<e path="stx.Option"><c path="stx.Method">
	<c path="applyOr.I"/>
	<c path="applyOr.O"/>
	<c path="applyOr.F"/>
</c></e>
	<c path="applyOr.I"/>
	<t path="stx.CodeBlock"/>
	<t path="haxe.PosInfos"/>
	<e path="stx.Option"><c path="applyOr.O"/></e>
</f></applyOr>
	</class>
	<class path="stx.Term1" params="" file="src/main/haxe/stx/Methods.hx" module="stx.Methods"><toMethod public="1" params="I" set="method" line="312" static="1"><f a="v:name">
	<f a="">
		<c path="toMethod.I"/>
		<e path="Void"/>
	</f>
	<c path="String"/>
	<c path="stx.Method1">
		<c path="toMethod.I"/>
		<e path="Void"/>
	</c>
</f></toMethod></class>
	<typedef path="stx.Object" params="" file="src/main/haxe/stx/Objects.hx" module="stx.Objects"><a/></typedef>
	<class path="stx.Objects" params="" file="src/main/haxe/stx/Objects.hx">
		<__meta__ public="1" line="30" static="1"><d/></__meta__>
		<copyDeep public="1" get="inline" set="null" line="32" static="1"><f a="d">
	<t path="stx.Object"/>
	<t path="stx.Object"/>
</f></copyDeep>
		<copy public="1" set="method" line="41" static="1"><f a="d:?shallow">
	<t path="stx.Object"/>
	<e path="Bool"/>
	<t path="stx.Object"/>
</f></copy>
		<copyTypedDeep public="1" params="T" get="inline" set="null" line="47" static="1"><f a="d">
	<c path="copyTypedDeep.T"/>
	<c path="copyTypedDeep.T"/>
</f></copyTypedDeep>
		<copyTyped public="1" params="T" get="inline" set="null" line="50" static="1"><f a="d:?shallow">
	<c path="copyTyped.T"/>
	<e path="Bool"/>
	<c path="copyTyped.T"/>
</f></copyTyped>
		<copyTo public="1" set="method" line="53" static="1"><f a="src:dest:?shallow">
	<t path="stx.Object"/>
	<t path="stx.Object"/>
	<e path="Bool"/>
	<t path="stx.Object"/>
</f></copyTo>
		<extendWith public="1" set="method" line="70" static="1"><f a="dest:src:?shallow">
	<t path="stx.Object"/>
	<t path="stx.Object"/>
	<e path="Bool"/>
	<t path="stx.Object"/>
</f></extendWith>
		<copyExtendedWith public="1" set="method" line="74" static="1"><f a="a:b:?shallow">
	<t path="stx.Object"/>
	<t path="stx.Object"/>
	<e path="Bool"/>
	<t path="stx.Object"/>
</f></copyExtendedWith>
		<extendWithDeep public="1" set="method" line="80" static="1"><f a="dest:src">
	<t path="stx.Object"/>
	<t path="stx.Object"/>
	<t path="stx.Object"/>
</f></extendWithDeep>
		<copyExtendedWithDeep public="1" set="method" line="85" static="1"><f a="a:b">
	<t path="stx.Object"/>
	<t path="stx.Object"/>
	<t path="stx.Object"/>
</f></copyExtendedWithDeep>
		<fields public="1" set="method" line="91" static="1"><f a="d">
	<t path="stx.Object"/>
	<c path="Array"><c path="String"/></c>
</f></fields>
		<mapValues public="1" params="T:S" set="method" line="95" static="1"><f a="d:f">
	<d><c path="mapValues.T"/></d>
	<f a="">
		<c path="mapValues.T"/>
		<c path="mapValues.S"/>
	</f>
	<d><c path="mapValues.S"/></d>
</f></mapValues>
		<set public="1" params="T" set="method" line="101" static="1"><f a="d:k:v">
	<d><c path="set.T"/></d>
	<c path="String"/>
	<c path="set.T"/>
	<d><c path="set.T"/></d>
</f></set>
		<setAny public="1" set="method" line="107" static="1"><f a="d:k:v">
	<t path="stx.Object"/>
	<c path="String"/>
	<d/>
	<t path="stx.Object"/>
</f></setAny>
		<setAll public="1" params="T" set="method" line="113" static="1"><f a="d:fields">
	<d><c path="setAll.T"/></d>
	<t path="Iterable"><c path="stx.Tuple2">
	<c path="String"/>
	<c path="setAll.T"/>
</c></t>
	<d><c path="setAll.T"/></d>
</f></setAll>
		<replaceAll public="1" params="T" set="method" line="121" static="1"><f a="d1:d2:def">
	<d><c path="replaceAll.T"/></d>
	<d><c path="replaceAll.T"/></d>
	<c path="replaceAll.T"/>
	<t path="stx.Object"/>
</f></replaceAll>
		<setAllAny public="1" set="method" line="135" static="1"><f a="d:fields">
	<t path="stx.Object"/>
	<t path="Iterable"><c path="stx.Tuple2">
	<c path="String"/>
	<d/>
</c></t>
	<t path="stx.Object"/>
</f></setAllAny>
		<replaceAllAny public="1" set="method" line="143" static="1"><f a="d1:d2:def">
	<t path="stx.Object"/>
	<t path="stx.Object"/>
	<d/>
	<t path="stx.Object"/>
</f></replaceAllAny>
		<get public="1" params="T" set="method" line="157" static="1"><f a="d:k">
	<d><c path="get.T"/></d>
	<c path="String"/>
	<e path="stx.Option"><c path="get.T"/></e>
</f></get>
		<getAny public="1" set="method" line="161" static="1"><f a="d:k">
	<t path="stx.Object"/>
	<c path="String"/>
	<e path="stx.Option"><d/></e>
</f></getAny>
		<extractFieldValues public="1" set="method" line="165" static="1"><f a="obj:field">
	<d/>
	<c path="String"/>
	<c path="Array"><d/></c>
</f></extractFieldValues>
		<extractAll public="1" params="T" set="method" line="176" static="1"><f a="d">
	<d><c path="extractAll.T"/></d>
	<c path="Array"><c path="stx.Tuple2">
	<c path="String"/>
	<c path="extractAll.T"/>
</c></c>
</f></extractAll>
		<extractAllAny public="1" set="method" line="180" static="1"><f a="d">
	<t path="stx.Object"/>
	<c path="Array"><c path="stx.Tuple2">
	<c path="String"/>
	<d/>
</c></c>
</f></extractAllAny>
		<extractValuesAny public="1" set="method" line="184" static="1"><f a="d:names:def">
	<t path="stx.Object"/>
	<t path="Iterable"><c path="String"/></t>
	<d/>
	<c path="Array"><d/></c>
</f></extractValuesAny>
		<extractValues public="1" params="T" set="method" line="188" static="1"><f a="d:names:def">
	<d><c path="extractValues.T"/></d>
	<t path="Iterable"><c path="String"/></t>
	<c path="extractValues.T"/>
	<c path="Array"><c path="extractValues.T"/></c>
</f></extractValues>
		<iterator public="1" set="method" line="200" static="1"><f a="d">
	<t path="stx.Object"/>
	<t path="Iterator"><c path="String"/></t>
</f></iterator>
	</class>
	<class path="stx.Options" params="" file="src/main/haxe/stx/Options.hx">
		<toOption public="1" params="T" set="method" line="17" static="1">
			<f a="t">
				<c path="toOption.T"/>
				<e path="stx.Option"><c path="toOption.T"/></e>
			</f>
			<haxe_doc>
   * Produces Option.Some(t) if 't' is not null, Option.None otherwise. 
   * n.b Not safe to use with 'using'
   </haxe_doc>
		</toOption>
		<toArray public="1" params="T" set="method" line="23" static="1">
			<f a="o">
				<e path="stx.Option"><c path="toArray.T"/></e>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc>
   * Produces an Array of length 0 if 'o' is None, length 1 otherwise.return
   </haxe_doc>
		</toArray>
		<map public="1" params="T:S" set="method" line="32" static="1">
			<f a="o:f">
				<e path="stx.Option"><c path="map.T"/></e>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<e path="stx.Option"><c path="map.S"/></e>
			</f>
			<haxe_doc>
   * Performs 'f' on the contents of 'o' if o != None
   </haxe_doc>
		</map>
		<then public="1" params="T:S" set="method" line="41" static="1">
			<f a="o1:o2">
				<e path="stx.Option"><c path="then.T"/></e>
				<e path="stx.Option"><c path="then.S"/></e>
				<e path="stx.Option"><c path="then.S"/></e>
			</f>
			<haxe_doc>
   * Swallows 'o1' and produces 'o2'.
   </haxe_doc>
		</then>
		<foreach public="1" params="T" set="method" line="47" static="1">
			<f a="o:f">
				<e path="stx.Option"><c path="foreach.T"/></e>
				<f a="">
					<c path="foreach.T"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
   * Performs 'f' on the contents of 'o' if 'o' != None
   </haxe_doc>
		</foreach>
		<filter public="1" params="T" set="method" line="56" static="1">
			<f a="o:f">
				<e path="stx.Option"><c path="filter.T"/></e>
				<f a="">
					<c path="filter.T"/>
					<e path="Bool"/>
				</f>
				<e path="stx.Option"><c path="filter.T"/></e>
			</f>
			<haxe_doc>
   * Produces the input if predicate 'f' returns true, None otherwise.
   </haxe_doc>
		</filter>
		<flatMap public="1" params="T:S" set="method" line="65" static="1">
			<f a="o:f">
				<e path="stx.Option"><c path="flatMap.T"/></e>
				<f a="">
					<c path="flatMap.T"/>
					<e path="stx.Option"><c path="flatMap.S"/></e>
				</f>
				<e path="stx.Option"><c path="flatMap.S"/></e>
			</f>
			<haxe_doc>
   * Produces the result of 'f' which takes the contents of 'o' as a parameter.
   </haxe_doc>
		</flatMap>
		<flatten public="1" params="T" set="method" line="71" static="1">
			<f a="o1">
				<e path="stx.Option"><e path="stx.Option"><c path="flatten.T"/></e></e>
				<e path="stx.Option"><c path="flatten.T"/></e>
			</f>
			<haxe_doc> 
   * Produces an Option where 'o1' may contain another Option.
   </haxe_doc>
		</flatten>
		<zip public="1" params="T:S" set="method" line="80" static="1">
			<f a="o1:o2">
				<e path="stx.Option"><c path="zip.T"/></e>
				<e path="stx.Option"><c path="zip.S"/></e>
				<e path="stx.Option"><c path="stx.Tuple2">
	<c path="zip.T"/>
	<c path="zip.S"/>
</c></e>
			</f>
			<haxe_doc>
   * Produces a Tuple2 of 'o1' and 'o2'.
   </haxe_doc>
		</zip>
		<zipWith public="1" params="T:S:V" set="method" line="89" static="1">
			<f a="o1:o2:f">
				<e path="stx.Option"><c path="zipWith.T"/></e>
				<e path="stx.Option"><c path="zipWith.S"/></e>
				<f a=":">
					<c path="zipWith.T"/>
					<c path="zipWith.S"/>
					<c path="zipWith.V"/>
				</f>
				<e path="stx.Option"><c path="zipWith.V"/></e>
			</f>
			<haxe_doc>
   * Produces the result of 'f' if both 'o1' and 'o2' are not None.
   </haxe_doc>
		</zipWith>
		<get public="1" params="T" set="method" line="102" static="1">
			<f a="o">
				<e path="stx.Option"><c path="get.T"/></e>
				<c path="get.T"/>
			</f>
			<haxe_doc>
   * Produces the contents of 'o', throwing an error if 'o' is None.
   </haxe_doc>
		</get>
		<orElse public="1" params="T" set="method" line="111" static="1">
			<f a="o1:thunk">
				<e path="stx.Option"><c path="orElse.T"/></e>
				<t path="stx.Thunk"><e path="stx.Option"><c path="orElse.T"/></e></t>
				<e path="stx.Option"><c path="orElse.T"/></e>
			</f>
			<haxe_doc>
   * Produces 'o1' if it is not None, the result of 'thunk' otherwise.
   </haxe_doc>
		</orElse>
		<orElseC public="1" params="T" set="method" line="121" static="1">
			<f a="o1:o2">
				<e path="stx.Option"><c path="orElseC.T"/></e>
				<e path="stx.Option"><c path="orElseC.T"/></e>
				<e path="stx.Option"><c path="orElseC.T"/></e>
			</f>
			<haxe_doc>
   * Produces 'o1' if it is not None, 'o2' otherwise.
   </haxe_doc>
		</orElseC>
		<orEither public="1" params="T:S" set="method" line="128" static="1">
			<f a="o1:thunk">
				<e path="stx.Option"><c path="orEither.T"/></e>
				<t path="stx.Thunk"><c path="orEither.S"/></t>
				<e path="stx.Either">
					<c path="orEither.S"/>
					<c path="orEither.T"/>
				</e>
			</f>
			<haxe_doc>
   * Produces an Either where 'o1' is on the left, or if None, the result of 'thunk' on the right.
   </haxe_doc>
		</orEither>
		<orEitherC public="1" params="T:S" set="method" line="137" static="1">
			<f a="o1:c">
				<e path="stx.Option"><c path="orEitherC.T"/></e>
				<c path="orEitherC.S"/>
				<e path="stx.Either">
					<c path="orEitherC.S"/>
					<c path="orEitherC.T"/>
				</e>
			</f>
			<haxe_doc>
   * Produces an Either where 'o1' is on the left, or if None, 'c'.
   </haxe_doc>
		</orEitherC>
		<getOrElse public="1" params="T" set="method" line="144" static="1">
			<f a="o:thunk">
				<e path="stx.Option"><c path="getOrElse.T"/></e>
				<t path="stx.Thunk"><c path="getOrElse.T"/></t>
				<c path="getOrElse.T"/>
			</f>
			<haxe_doc>
   * Produces the value of 'o' if not None, the result of 'thunk' otehrwise.
   </haxe_doc>
		</getOrElse>
		<getOrElseC public="1" params="T" set="method" line="153" static="1">
			<f a="o:c">
				<e path="stx.Option"><c path="getOrElseC.T"/></e>
				<c path="getOrElseC.T"/>
				<c path="getOrElseC.T"/>
			</f>
			<haxe_doc>
   * Produces the value of 'o' if not None, 'c' otehrwise.
   </haxe_doc>
		</getOrElseC>
		<isEmpty public="1" params="T" set="method" line="159" static="1">
			<f a="o">
				<e path="stx.Option"><c path="isEmpty.T"/></e>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   * Produces true if 'o' is None, false otherwise.
   </haxe_doc>
		</isEmpty>
		<isDefined public="1" params="T" set="method" line="168" static="1">
			<f a="o">
				<e path="stx.Option"><c path="isDefined.T"/></e>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   *^Produces true if 'o' is not None, false otherwise.
   </haxe_doc>
		</isDefined>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<enum path="stx.Unit" params="" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><Unit/></enum>
	<typedef path="stx.AnyRef" params="" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><a/></typedef>
	<typedef path="stx.CodeBlock" params="" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a=""><e path="Void"/></f></typedef>
	<typedef path="stx.Function" params="P1:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a="">
	<c path="stx.Function.P1"/>
	<c path="stx.Function.R"/>
</f></typedef>
	<typedef path="stx.Function0" params="R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a=""><c path="stx.Function0.R"/></f></typedef>
	<typedef path="stx.Function1" params="P1:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a="">
	<c path="stx.Function1.P1"/>
	<c path="stx.Function1.R"/>
</f></typedef>
	<typedef path="stx.Function2" params="P1:P2:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a=":">
	<c path="stx.Function2.P1"/>
	<c path="stx.Function2.P2"/>
	<c path="stx.Function2.R"/>
</f></typedef>
	<typedef path="stx.Function3" params="P1:P2:P3:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a="::">
	<c path="stx.Function3.P1"/>
	<c path="stx.Function3.P2"/>
	<c path="stx.Function3.P3"/>
	<c path="stx.Function3.R"/>
</f></typedef>
	<typedef path="stx.Function4" params="P1:P2:P3:P4:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a=":::">
	<c path="stx.Function4.P1"/>
	<c path="stx.Function4.P2"/>
	<c path="stx.Function4.P3"/>
	<c path="stx.Function4.P4"/>
	<c path="stx.Function4.R"/>
</f></typedef>
	<typedef path="stx.Function5" params="P1:P2:P3:P4:P5:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a="::::">
	<c path="stx.Function5.P1"/>
	<c path="stx.Function5.P2"/>
	<c path="stx.Function5.P3"/>
	<c path="stx.Function5.P4"/>
	<c path="stx.Function5.P5"/>
	<c path="stx.Function5.R"/>
</f></typedef>
	<typedef path="stx.Function6" params="P1:P2:P3:P4:P5:P6:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a=":::::">
	<c path="stx.Function6.P1"/>
	<c path="stx.Function6.P2"/>
	<c path="stx.Function6.P3"/>
	<c path="stx.Function6.P4"/>
	<c path="stx.Function6.P5"/>
	<c path="stx.Function6.P6"/>
	<c path="stx.Function6.R"/>
</f></typedef>
	<typedef path="stx.Function7" params="P1:P2:P3:P4:P5:P6:P7:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a="::::::">
	<c path="stx.Function7.P1"/>
	<c path="stx.Function7.P2"/>
	<c path="stx.Function7.P3"/>
	<c path="stx.Function7.P4"/>
	<c path="stx.Function7.P5"/>
	<c path="stx.Function7.P6"/>
	<c path="stx.Function7.P7"/>
	<c path="stx.Function7.R"/>
</f></typedef>
	<typedef path="stx.Function8" params="P1:P2:P3:P4:P5:P6:P7:P8:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a=":::::::">
	<c path="stx.Function8.P1"/>
	<c path="stx.Function8.P2"/>
	<c path="stx.Function8.P3"/>
	<c path="stx.Function8.P4"/>
	<c path="stx.Function8.P5"/>
	<c path="stx.Function8.P6"/>
	<c path="stx.Function8.P7"/>
	<c path="stx.Function8.P8"/>
	<c path="stx.Function8.R"/>
</f></typedef>
	<typedef path="stx.Function9" params="P1:P2:P3:P4:P5:P6:P7:P8:P9:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a="::::::::">
	<c path="stx.Function9.P1"/>
	<c path="stx.Function9.P2"/>
	<c path="stx.Function9.P3"/>
	<c path="stx.Function9.P4"/>
	<c path="stx.Function9.P5"/>
	<c path="stx.Function9.P6"/>
	<c path="stx.Function9.P7"/>
	<c path="stx.Function9.P8"/>
	<c path="stx.Function9.P9"/>
	<c path="stx.Function9.R"/>
</f></typedef>
	<typedef path="stx.Function10" params="P1:P2:P3:P4:P5:P6:P7:P8:P9:P10:R" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a=":::::::::">
	<c path="stx.Function10.P1"/>
	<c path="stx.Function10.P2"/>
	<c path="stx.Function10.P3"/>
	<c path="stx.Function10.P4"/>
	<c path="stx.Function10.P5"/>
	<c path="stx.Function10.P6"/>
	<c path="stx.Function10.P7"/>
	<c path="stx.Function10.P8"/>
	<c path="stx.Function10.P9"/>
	<c path="stx.Function10.P10"/>
	<c path="stx.Function10.R"/>
</f></typedef>
	<typedef path="stx.Reducer" params="T" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a=":">
	<c path="stx.Reducer.T"/>
	<c path="stx.Reducer.T"/>
	<c path="stx.Reducer.T"/>
</f></typedef>
	<typedef path="stx.Factory" params="T" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><f a=""><c path="stx.Factory.T"/></f></typedef>
	<typedef path="stx.Thunk" params="T" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude">
		<f a=""><c path="stx.Thunk.T"/></f>
		<haxe_doc>
 * A function which takes no parameter and returns a result.
 </haxe_doc>
	</typedef>
	<enum path="stx.Option" params="T" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude">
		<Some a="v"><c path="stx.Option.T"/></Some>
		<None/>
		<haxe_doc> An option represents an optional value -- the value may or may not be
 * present. Option is a much safer alternative to null that often enables
 * reduction in code size and increase in code clarity.
 </haxe_doc>
	</enum>
	<enum path="stx.TraversalOrder" params="" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude">
		<PreOrder/>
		<PostOrder/>
		<LevelOrder/>
		<InOrder/>
	</enum>
	<typedef path="stx.Tree" params="T" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><a>
	<right><t path="stx.Tree"><c path="stx.Tree.T"/></t></right>
	<left><t path="stx.Tree"><c path="stx.Tree.T"/></t></left>
	<data><c path="stx.Tree.T"/></data>
</a></typedef>
	<enum path="stx.Either" params="A:B" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude">
		<Right a="v"><c path="stx.Either.B"/></Right>
		<Left a="v"><c path="stx.Either.A"/></Left>
		<haxe_doc> Either represents a type that is either a "left" value or a "right" value,
 * but not both. Either is often used to represent success/failure, where the
 * left side represents failure, and the right side represents success.
 </haxe_doc>
	</enum>
	<typedef path="stx.FailureOrSuccess" params="A:B" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><e path="stx.Either">
	<c path="stx.FailureOrSuccess.A"/>
	<c path="stx.FailureOrSuccess.B"/>
</e></typedef>
	<typedef path="stx.OrderFunction" params="T" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><t path="stx.Function2">
	<c path="stx.OrderFunction.T"/>
	<c path="stx.OrderFunction.T"/>
	<c path="Int"/>
</t></typedef>
	<typedef path="stx.EqualFunction" params="T" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><t path="stx.Function2">
	<c path="stx.EqualFunction.T"/>
	<c path="stx.EqualFunction.T"/>
	<e path="Bool"/>
</t></typedef>
	<typedef path="stx.ShowFunction" params="T" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><t path="stx.Function1">
	<c path="stx.ShowFunction.T"/>
	<c path="String"/>
</t></typedef>
	<typedef path="stx.HashFunction" params="T" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><t path="stx.Function1">
	<c path="stx.HashFunction.T"/>
	<c path="Int"/>
</t></typedef>
	<typedef path="stx.CollectionTools" params="T" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude"><a>
	<show><t path="Null"><t path="stx.ShowFunction"><c path="stx.CollectionTools.T"/></t></t></show>
	<order><t path="Null"><t path="stx.OrderFunction"><c path="stx.CollectionTools.T"/></t></t></order>
	<hash><t path="Null"><t path="stx.HashFunction"><c path="stx.CollectionTools.T"/></t></t></hash>
	<equal><t path="Null"><t path="stx.EqualFunction"><c path="stx.CollectionTools.T"/></t></t></equal>
</a></typedef>
	<class path="stx.FieldOrder" params="" file="src/main/haxe/stx/Prelude.hx" module="stx.Prelude">
		<Ascending public="1" get="inline" set="null" line="90" static="1"><c path="Int"/></Ascending>
		<Descending public="1" get="inline" set="null" line="91" static="1"><c path="Int"/></Descending>
		<Ignore public="1" get="inline" set="null" line="92" static="1"><c path="Int"/></Ignore>
	</class>
	<class path="stx.Promise" params="A:B" file="src/main/haxe/stx/Promise.hx">
		<count public="1" line="20" static="1"><c path="Int"/></count>
		<success public="1" params="A" set="method" line="210" static="1"><f a="value">
	<c path="success.A"/>
	<c path="stx.Promise">
		<d/>
		<c path="success.A"/>
	</c>
</f></success>
		<failure public="1" params="A" set="method" line="216" static="1"><f a="value">
	<c path="failure.A"/>
	<c path="stx.Promise">
		<c path="failure.A"/>
		<d/>
	</c>
</f></failure>
		<fromCallback public="1" params="T" set="method" line="221" static="1"><f a="promise">
	<c path="stx.Promise">
		<d/>
		<c path="fromCallback.T"/>
	</c>
	<f a=":">
		<d/>
		<d/>
		<e path="Void"/>
	</f>
</f></fromCallback>
		<waitFor public="1" set="method" line="245" static="1"><f a="toJoin">
	<c path="Array"><c path="stx.Promise">
	<d/>
	<d/>
</c></c>
	<c path="stx.Promise">
		<c path="String"/>
		<c path="Array"><d/></c>
	</c>
</f></waitFor>
		<fut><c path="stx.Future"><e path="stx.Either">
	<c path="stx.Promise.A"/>
	<c path="stx.Promise.B"/>
</e></c></fut>
		<userCancel public="1"><c path="stx.reactive.Arrow">
	<c path="stx.Promise.A"/>
	<c path="stx.Promise.A"/>
</c></userCancel>
		<done><e path="Bool"/></done>
		<id public="1"><c path="Int"/></id>
		<err><e path="stx.Option"><c path="stx.Promise.A"/></e></err>
		<toString public="1" set="method" line="40"><f a=""><c path="String"/></f></toString>
		<isDone public="1" set="method" line="43"><f a=""><e path="Bool"/></f></isDone>
		<onCancel set="method" line="46"><f a="e">
	<c path="stx.Promise.A"/>
	<e path="Void"/>
</f></onCancel>
		<foreach public="1" set="method" line="58"><f a="f">
	<f a="">
		<c path="stx.Promise.B"/>
		<e path="Void"/>
	</f>
	<c path="stx.Promise">
		<c path="stx.Promise.A"/>
		<c path="stx.Promise.B"/>
	</c>
</f></foreach>
		<future public="1" set="method" line="61"><f a=""><c path="stx.Future"><e path="stx.Either">
	<c path="stx.Promise.A"/>
	<c path="stx.Promise.B"/>
</e></c></f></future>
		<onError public="1" set="method" line="64"><f a="cb">
	<c path="stx.reactive.Arrow">
		<c path="stx.Promise.A"/>
		<c path="stx.Promise.A"/>
	</c>
	<c path="stx.Promise">
		<c path="stx.Promise.A"/>
		<c path="stx.Promise.B"/>
	</c>
</f></onError>
		<error public="1" set="method" line="92"><f a=""><e path="stx.Option"><c path="stx.Promise.A"/></e></f></error>
		<deliverTo public="1" set="method" line="95"><f a="cb">
	<f a="">
		<c path="stx.Promise.B"/>
		<e path="Void"/>
	</f>
	<c path="stx.Promise">
		<c path="stx.Promise.A"/>
		<c path="stx.Promise.B"/>
	</c>
</f></deliverTo>
		<resolve public="1" set="method" line="111"><f a="e:?pos">
	<e path="stx.Either">
		<c path="stx.Promise.A"/>
		<c path="stx.Promise.B"/>
	</e>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></resolve>
		<left public="1" set="method" line="123"><f a="a">
	<c path="stx.Promise.A"/>
	<c path="stx.Promise">
		<c path="stx.Promise.A"/>
		<c path="stx.Promise.B"/>
	</c>
</f></left>
		<right public="1" set="method" line="127"><f a="b">
	<c path="stx.Promise.B"/>
	<c path="stx.Promise">
		<c path="stx.Promise.A"/>
		<c path="stx.Promise.B"/>
	</c>
</f></right>
		<map public="1" params="S" set="method" line="131"><f a="f">
	<f a="">
		<c path="stx.Promise.B"/>
		<c path="map.S"/>
	</f>
	<c path="stx.Promise">
		<c path="stx.Promise.A"/>
		<c path="map.S"/>
	</c>
</f></map>
		<flatMap public="1" params="S" set="method" line="160"><f a="cb">
	<f a="">
		<c path="stx.Promise.B"/>
		<c path="stx.Promise">
			<c path="stx.Promise.A"/>
			<c path="flatMap.S"/>
		</c>
	</f>
	<c path="stx.Promise">
		<c path="stx.Promise.A"/>
		<c path="flatMap.S"/>
	</c>
</f></flatMap>
		<cancel public="1" set="method" line="206"><f a=""><e path="Void"/></f></cancel>
		<toCallback public="1" set="method" line="230"><f a="cb">
	<f a=":">
		<c path="stx.Promise.A"/>
		<c path="stx.Promise.B"/>
		<e path="Void"/>
	</f>
	<unknown/>
</f></toCallback>
		<new public="1" set="method" line="30"><f a="?cancel">
	<c path="stx.reactive.Arrow">
		<c path="stx.Promise.A"/>
		<c path="stx.Promise.A"/>
	</c>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Strings" params="" file="src/main/haxe/stx/Strings.hx">
		<SepAlphaPattern line="13" static="1"><c path="EReg"/></SepAlphaPattern>
		<AlphaUpperAlphaPattern line="14" static="1"><c path="EReg"/></AlphaUpperAlphaPattern>
		<toBool public="1" set="method" line="16" static="1"><f a="v:?d">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></toBool>
		<int public="1" set="method" line="23" static="1"><f a="v:?d">
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
</f></int>
		<toFloat public="1" set="method" line="28" static="1"><f a="v:?d">
	<c path="String"/>
	<c path="Float"/>
	<c path="Float"/>
</f></toFloat>
		<startsWith public="1" set="method" line="33" static="1"><f a="v:frag">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
</f></startsWith>
		<endsWith public="1" set="method" line="36" static="1"><f a="v:frag">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
</f></endsWith>
		<urlEncode public="1" set="method" line="39" static="1"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></urlEncode>
		<urlDecode public="1" set="method" line="42" static="1"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></urlDecode>
		<htmlEscape public="1" set="method" line="45" static="1"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></htmlEscape>
		<htmlUnescape public="1" set="method" line="48" static="1"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></htmlUnescape>
		<trim public="1" set="method" line="51" static="1"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></trim>
		<contains public="1" set="method" line="54" static="1"><f a="v:s">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
</f></contains>
		<replace public="1" set="method" line="57" static="1"><f a="s:sub:by">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></replace>
		<compare public="1" set="method" line="60" static="1"><f a="v1:v2">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
</f></compare>
		<equals public="1" set="method" line="63" static="1"><f a="v1:v2">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="66" static="1"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></toString>
		<surround public="1" set="method" line="69" static="1"><f a="str:before:after">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></surround>
		<prepend public="1" set="method" line="72" static="1"><f a="str:before">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></prepend>
		<append public="1" set="method" line="75" static="1"><f a="str:after">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></append>
		<cca public="1" set="method" line="78" static="1"><f a="str:i">
	<c path="String"/>
	<c path="Int"/>
	<t path="Null"><c path="Int"/></t>
</f></cca>
		<chunk public="1" set="method" line="82" static="1"><f a="str:len">
	<c path="String"/>
	<c path="Int"/>
	<c path="Array"><c path="String"/></c>
</f></chunk>
		<chars public="1" set="method" line="94" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></chars>
		<string public="1" set="method" line="103" static="1"><f a="l">
	<t path="Iterable"><c path="String"/></t>
	<c path="String"/>
</f></string>
		<toCamelCase public="1" set="method" line="111" static="1"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></toCamelCase>
		<fromCamelCase public="1" set="method" line="115" static="1"><f a="str:sep">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></fromCamelCase>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Tuples" params="" file="src/main/haxe/stx/Tuples.hx">
		<entuple public="1" params="A:B" set="method" line="13" static="1"><f a="a:b">
	<c path="entuple.A"/>
	<c path="entuple.B"/>
	<c path="stx.Tuple2">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
	</c>
</f></entuple>
		<t2 public="1" params="A:B" get="inline" set="null" line="16" static="1"><f a="_1:_2">
	<c path="t2.A"/>
	<c path="t2.B"/>
	<c path="stx.Tuple2">
		<c path="t2.A"/>
		<c path="t2.B"/>
	</c>
</f></t2>
		<t3 public="1" params="A:B:C" get="inline" set="null" line="19" static="1"><f a="_1:_2:_3">
	<c path="t3.A"/>
	<c path="t3.B"/>
	<c path="t3.C"/>
	<c path="stx.Tuple3">
		<c path="t3.A"/>
		<c path="t3.B"/>
		<c path="t3.C"/>
	</c>
</f></t3>
		<t4 public="1" params="A:B:C:D" get="inline" set="null" line="22" static="1"><f a="_1:_2:_3:_4">
	<c path="t4.A"/>
	<c path="t4.B"/>
	<c path="t4.C"/>
	<c path="t4.D"/>
	<c path="stx.Tuple4">
		<c path="t4.A"/>
		<c path="t4.B"/>
		<c path="t4.C"/>
		<c path="t4.D"/>
	</c>
</f></t4>
		<t5 public="1" params="A:B:C:D:E" get="inline" set="null" line="25" static="1"><f a="_1:_2:_3:_4:_5">
	<c path="t5.A"/>
	<c path="t5.B"/>
	<c path="t5.C"/>
	<c path="t5.D"/>
	<c path="t5.E"/>
	<c path="stx.Tuple5">
		<c path="t5.A"/>
		<c path="t5.B"/>
		<c path="t5.C"/>
		<c path="t5.D"/>
		<c path="t5.E"/>
	</c>
</f></t5>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.Product" params="" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples" interface="1">
		<prefix public="1" get="get_prefix" set="null"><c path="String"/></prefix>
		<length public="1" get="get_length" set="null"><c path="Int"/></length>
		<element public="1" set="method"><f a="n">
	<c path="Int"/>
	<d/>
</f></element>
		<elements public="1" set="method"><f a=""><c path="Array"><d/></c></f></elements>
		<flatten public="1" set="method"><f a=""><c path="Array"><d/></c></f></flatten>
	</class>
	<class path="stx.AbstractProduct" params="" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<implements path="stx.Product"/>
		<tools><c path="Array"><t path="stx.Function1">
	<d/>
	<d/>
</t></c></tools>
		<prefix public="1" get="get_prefix" set="null"><c path="String"/></prefix>
		<length public="1" get="get_length" set="null"><c path="Int"/></length>
		<_elements public="1"><c path="Array"><d/></c></_elements>
		<element public="1" set="method" line="54"><f a="n">
	<c path="Int"/>
	<d/>
</f></element>
		<toString public="1" set="method" line="58"><f a=""><c path="String"/></f></toString>
		<get_prefix set="method" line="64"><f a=""><c path="String"/></f></get_prefix>
		<get_length set="method" line="68"><f a=""><c path="Int"/></f></get_length>
		<elements public="1" set="method" line="72"><f a=""><c path="Array"><d/></c></f></elements>
		<flatten public="1" set="method" line="88"><f a=""><c path="Array"><d/></c></f></flatten>
		<new public="1" set="method" line="50"><f a="elements">
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Tuple2" params="A:B" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<extends path="stx.AbstractProduct"/>
		<entuple public="1" params="A:B:C" set="method" line="115" static="1"><f a="t:c">
	<c path="stx.Tuple2">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
	</c>
	<c path="entuple.C"/>
	<c path="stx.Tuple3">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
		<c path="entuple.C"/>
	</c>
</f></entuple>
		<first public="1" params="A:B" set="method" line="122" static="1"><f a="t">
	<c path="stx.Tuple2">
		<c path="first.A"/>
		<c path="first.B"/>
	</c>
	<c path="first.A"/>
</f></first>
		<second public="1" params="A:B" set="method" line="123" static="1"><f a="t">
	<c path="stx.Tuple2">
		<c path="second.A"/>
		<c path="second.B"/>
	</c>
	<c path="second.B"/>
</f></second>
		<patch public="1" params="A:B" set="method" line="136" static="1"><f a="t0:t1">
	<c path="stx.Tuple2">
		<c path="patch.A"/>
		<c path="patch.B"/>
	</c>
	<c path="stx.Tuple2">
		<c path="patch.A"/>
		<c path="patch.B"/>
	</c>
	<c path="stx.Tuple2">
		<c path="patch.A"/>
		<c path="patch.B"/>
	</c>
</f></patch>
		<_1 public="1" set="null"><c path="stx.Tuple2.A"/></_1>
		<_2 public="1" set="null"><c path="stx.Tuple2.B"/></_2>
		<into public="1" params="C" set="method" line="118"><f a="f">
	<f a=":">
		<c path="stx.Tuple2.A"/>
		<c path="stx.Tuple2.B"/>
		<c path="into.C"/>
	</f>
	<c path="into.C"/>
</f></into>
		<get_prefix set="method" line="125" override="1"><f a=""><c path="String"/></f></get_prefix>
		<get_length set="method" line="129" override="1"><f a=""><c path="Int"/></f></get_length>
		<new public="1" set="method" line="110"><f a="_1:_2">
	<c path="stx.Tuple2.A"/>
	<c path="stx.Tuple2.B"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Tuple3" params="A:B:C" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<extends path="stx.AbstractProduct"/>
		<entuple public="1" params="A:B:C:D" set="method" line="156" static="1"><f a="t:d">
	<c path="stx.Tuple3">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
		<c path="entuple.C"/>
	</c>
	<c path="entuple.D"/>
	<c path="stx.Tuple4">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
		<c path="entuple.C"/>
		<c path="entuple.D"/>
	</c>
</f></entuple>
		<first public="1" params="A:B" set="method" line="159" static="1"><f a="t">
	<c path="stx.Tuple2">
		<c path="first.A"/>
		<c path="first.B"/>
	</c>
	<c path="first.A"/>
</f></first>
		<second public="1" params="A:B" set="method" line="160" static="1"><f a="t">
	<c path="stx.Tuple2">
		<c path="second.A"/>
		<c path="second.B"/>
	</c>
	<c path="second.B"/>
</f></second>
		<third public="1" params="A:B:C" set="method" line="161" static="1"><f a="t">
	<c path="stx.Tuple3">
		<c path="third.A"/>
		<c path="third.B"/>
		<c path="third.C"/>
	</c>
	<c path="third.C"/>
</f></third>
		<patch public="1" params="A:B:C" set="method" line="174" static="1"><f a="t0:t1">
	<c path="stx.Tuple3">
		<c path="patch.A"/>
		<c path="patch.B"/>
		<c path="patch.C"/>
	</c>
	<c path="stx.Tuple3">
		<c path="patch.A"/>
		<c path="patch.B"/>
		<c path="patch.C"/>
	</c>
	<c path="stx.Tuple3">
		<c path="patch.A"/>
		<c path="patch.B"/>
		<c path="patch.C"/>
	</c>
</f></patch>
		<_1 public="1" set="null"><c path="stx.Tuple3.A"/></_1>
		<_2 public="1" set="null"><c path="stx.Tuple3.B"/></_2>
		<_3 public="1" set="null"><c path="stx.Tuple3.C"/></_3>
		<into public="1" params="D" set="method" line="153"><f a="f">
	<f a="::">
		<c path="stx.Tuple3.A"/>
		<c path="stx.Tuple3.B"/>
		<c path="stx.Tuple3.C"/>
		<c path="into.D"/>
	</f>
	<c path="into.D"/>
</f></into>
		<get_prefix set="method" line="163" override="1"><f a=""><c path="String"/></f></get_prefix>
		<get_length set="method" line="167" override="1"><f a=""><c path="Int"/></f></get_length>
		<new public="1" set="method" line="147"><f a="_1:_2:_3">
	<c path="stx.Tuple3.A"/>
	<c path="stx.Tuple3.B"/>
	<c path="stx.Tuple3.C"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Tuple4" params="A:B:C:D" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<extends path="stx.AbstractProduct"/>
		<first public="1" params="A:B:C:D" set="method" line="196" static="1"><f a="t">
	<c path="stx.Tuple4">
		<c path="first.A"/>
		<c path="first.B"/>
		<c path="first.C"/>
		<c path="first.D"/>
	</c>
	<c path="first.A"/>
</f></first>
		<second public="1" params="A:B:C:D" set="method" line="197" static="1"><f a="t">
	<c path="stx.Tuple4">
		<c path="second.A"/>
		<c path="second.B"/>
		<c path="second.C"/>
		<c path="second.D"/>
	</c>
	<c path="second.B"/>
</f></second>
		<third public="1" params="A:B:C:D" set="method" line="198" static="1"><f a="t">
	<c path="stx.Tuple4">
		<c path="third.A"/>
		<c path="third.B"/>
		<c path="third.C"/>
		<c path="third.D"/>
	</c>
	<c path="third.C"/>
</f></third>
		<fourth public="1" params="A:B:C:D" set="method" line="199" static="1"><f a="t">
	<c path="stx.Tuple4">
		<c path="fourth.A"/>
		<c path="fourth.B"/>
		<c path="fourth.C"/>
		<c path="fourth.D"/>
	</c>
	<c path="fourth.D"/>
</f></fourth>
		<patch public="1" params="A:B:C:D" set="method" line="216" static="1"><f a="t0:t1">
	<c path="stx.Tuple4">
		<c path="patch.A"/>
		<c path="patch.B"/>
		<c path="patch.C"/>
		<c path="patch.D"/>
	</c>
	<c path="stx.Tuple4">
		<c path="patch.A"/>
		<c path="patch.B"/>
		<c path="patch.C"/>
		<c path="patch.D"/>
	</c>
	<c path="stx.Tuple4">
		<c path="patch.A"/>
		<c path="patch.B"/>
		<c path="patch.C"/>
		<c path="patch.D"/>
	</c>
</f></patch>
		<_1 public="1" set="null"><c path="stx.Tuple4.A"/></_1>
		<_2 public="1" set="null"><c path="stx.Tuple4.B"/></_2>
		<_3 public="1" set="null"><c path="stx.Tuple4.C"/></_3>
		<_4 public="1" set="null"><c path="stx.Tuple4.D"/></_4>
		<into public="1" params="E" set="method" line="193"><f a="f">
	<f a=":::">
		<c path="stx.Tuple4.A"/>
		<c path="stx.Tuple4.B"/>
		<c path="stx.Tuple4.C"/>
		<c path="stx.Tuple4.D"/>
		<c path="into.E"/>
	</f>
	<c path="into.E"/>
</f></into>
		<get_prefix set="method" line="201" override="1"><f a=""><c path="String"/></f></get_prefix>
		<get_length set="method" line="205" override="1"><f a=""><c path="Int"/></f></get_length>
		<entuple public="1" params="E" set="method" line="209"><f a="_5">
	<c path="entuple.E"/>
	<c path="stx.Tuple5">
		<c path="stx.Tuple4.A"/>
		<c path="stx.Tuple4.B"/>
		<c path="stx.Tuple4.C"/>
		<c path="stx.Tuple4.D"/>
		<c path="entuple.E"/>
	</c>
</f></entuple>
		<new public="1" set="method" line="187"><f a="first:second:third:fourth">
	<c path="stx.Tuple4.A"/>
	<c path="stx.Tuple4.B"/>
	<c path="stx.Tuple4.C"/>
	<c path="stx.Tuple4.D"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Tuple5" params="A:B:C:D:E" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<extends path="stx.AbstractProduct"/>
		<first public="1" params="A:B:C:D:E" set="method" line="241" static="1"><f a="t">
	<c path="stx.Tuple5">
		<c path="first.A"/>
		<c path="first.B"/>
		<c path="first.C"/>
		<c path="first.D"/>
		<c path="first.E"/>
	</c>
	<c path="first.A"/>
</f></first>
		<second public="1" params="A:B:C:D:E" set="method" line="242" static="1"><f a="t">
	<c path="stx.Tuple5">
		<c path="second.A"/>
		<c path="second.B"/>
		<c path="second.C"/>
		<c path="second.D"/>
		<c path="second.E"/>
	</c>
	<c path="second.B"/>
</f></second>
		<third public="1" params="A:B:C:D:E" set="method" line="243" static="1"><f a="t">
	<c path="stx.Tuple5">
		<c path="third.A"/>
		<c path="third.B"/>
		<c path="third.C"/>
		<c path="third.D"/>
		<c path="third.E"/>
	</c>
	<c path="third.C"/>
</f></third>
		<fourth public="1" params="A:B:C:D:E" set="method" line="244" static="1"><f a="t">
	<c path="stx.Tuple5">
		<c path="fourth.A"/>
		<c path="fourth.B"/>
		<c path="fourth.C"/>
		<c path="fourth.D"/>
		<c path="fourth.E"/>
	</c>
	<c path="fourth.D"/>
</f></fourth>
		<fifth public="1" params="A:B:C:D:E" set="method" line="245" static="1"><f a="t">
	<c path="stx.Tuple5">
		<c path="fifth.A"/>
		<c path="fifth.B"/>
		<c path="fifth.C"/>
		<c path="fifth.D"/>
		<c path="fifth.E"/>
	</c>
	<c path="fifth.E"/>
</f></fifth>
		<patch public="1" params="A:B:C:D:E" set="method" line="258" static="1"><f a="t0:t1">
	<c path="stx.Tuple5">
		<c path="patch.A"/>
		<c path="patch.B"/>
		<c path="patch.C"/>
		<c path="patch.D"/>
		<c path="patch.E"/>
	</c>
	<c path="stx.Tuple5">
		<c path="patch.A"/>
		<c path="patch.B"/>
		<c path="patch.C"/>
		<c path="patch.D"/>
		<c path="patch.E"/>
	</c>
	<c path="stx.Tuple5">
		<c path="patch.A"/>
		<c path="patch.B"/>
		<c path="patch.C"/>
		<c path="patch.D"/>
		<c path="patch.E"/>
	</c>
</f></patch>
		<_1 public="1" set="null"><c path="stx.Tuple5.A"/></_1>
		<_2 public="1" set="null"><c path="stx.Tuple5.B"/></_2>
		<_3 public="1" set="null"><c path="stx.Tuple5.C"/></_3>
		<_4 public="1" set="null"><c path="stx.Tuple5.D"/></_4>
		<_5 public="1" set="null"><c path="stx.Tuple5.E"/></_5>
		<into public="1" params="F" set="method" line="238"><f a="f">
	<f a="::::">
		<c path="stx.Tuple5.A"/>
		<c path="stx.Tuple5.B"/>
		<c path="stx.Tuple5.C"/>
		<c path="stx.Tuple5.D"/>
		<c path="stx.Tuple5.E"/>
		<c path="into.F"/>
	</f>
	<c path="into.F"/>
</f></into>
		<get_prefix public="1" set="method" line="247" override="1"><f a=""><c path="String"/></f></get_prefix>
		<get_length set="method" line="251" override="1"><f a=""><c path="Int"/></f></get_length>
		<new public="1" set="method" line="232"><f a="first:second:third:fourth:fifth">
	<c path="stx.Tuple5.A"/>
	<c path="stx.Tuple5.B"/>
	<c path="stx.Tuple5.C"/>
	<c path="stx.Tuple5.D"/>
	<c path="stx.Tuple5.E"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.Util" params="" file="src/main/haxe/stx/Util.hx"><printer public="1" params="A" set="method" line="3" static="1"><f a="value:?pos">
	<c path="printer.A"/>
	<t path="haxe.PosInfos"/>
	<c path="printer.A"/>
</f></printer></class>
	<enum path="stx.concurrent.ActorStatus" params="" file="src/main/haxe/stx/concurrent/Actor.hx" module="stx.concurrent.Actor">
		<Stopped/>
		<Running/>
		<Failed/>
	</enum>
	<class path="stx.concurrent.Actor" params="T:S" file="src/main/haxe/stx/concurrent/Actor.hx" interface="1">
		<status public="1" set="method">
			<f a=""><e path="stx.concurrent.ActorStatus"/></f>
			<haxe_doc> The status of the actor. </haxe_doc>
		</status>
		<start public="1" set="method">
			<f a=""><c path="stx.Future"><c path="stx.concurrent.Actor">
	<c path="stx.concurrent.Actor.T"/>
	<c path="stx.concurrent.Actor.S"/>
</c></c></f>
			<haxe_doc> Starts the actor, if it is not already running. </haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a=""><c path="stx.Future"><c path="stx.concurrent.Actor">
	<c path="stx.concurrent.Actor.T"/>
	<c path="stx.concurrent.Actor.S"/>
</c></c></f>
			<haxe_doc> Stops the actor, if it is not already running. </haxe_doc>
		</stop>
		<load public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc> Returns a number from 0 to 1 indicating load on the actor. </haxe_doc>
		</load>
		<send public="1" set="method">
			<f a="data">
				<c path="stx.concurrent.Actor.T"/>
				<c path="stx.Future"><c path="stx.concurrent.Actor.S"/></c>
			</f>
			<haxe_doc> Sends data to the actor, and returns a future of the response. </haxe_doc>
		</send>
		<haxe_doc> An actor.
 </haxe_doc>
	</class>
	<typedef path="stx.concurrent.Coalescer" params="T" file="src/main/haxe/stx/concurrent/Actor.hx" module="stx.concurrent.Actor"><a>
	<commutes><f a=":">
	<c path="stx.concurrent.Coalescer.T"/>
	<c path="stx.concurrent.Coalescer.T"/>
	<e path="Bool"/>
</f></commutes>
	<coalesce><f a=":">
	<c path="stx.concurrent.Coalescer.T"/>
	<c path="stx.concurrent.Coalescer.T"/>
	<e path="stx.Option"><c path="stx.concurrent.Coalescer.T"/></e>
</f></coalesce>
</a></typedef>
	<class path="stx.concurrent.ActorFactory" params="T:S" file="src/main/haxe/stx/concurrent/Actor.hx" module="stx.concurrent.Actor" interface="1">
		<create public="1" params="X" set="method">
			<f a="handler:?coalescer">
				<f a=":">
					<c path="create.X"/>
					<c path="stx.concurrent.ActorFactory.T"/>
					<c path="stx.Tuple2">
						<c path="create.X"/>
						<c path="stx.Future"><c path="stx.concurrent.ActorFactory.S"/></c>
					</c>
				</f>
				<t path="stx.concurrent.Coalescer"><c path="stx.concurrent.ActorFactory.T"/></t>
				<c path="stx.concurrent.Actor">
					<c path="stx.concurrent.ActorFactory.T"/>
					<c path="stx.concurrent.ActorFactory.S"/>
				</c>
			</f>
			<haxe_doc> Creates an actor using a function that will be called to handle every 
   * message the actor receives. The function should not enclose any variables
   * and should maintain state exclusively through its parameter and return value.
   *
   * @param handler   The message handler. This function will be passed the 
   *                  current state and the current message, and should return
   *                  the next state and a future of the response.
   *
   * @param coalescer An optional function to coalesce adjacent messages in 
   *                  the actor's queue.
   </haxe_doc>
		</create>
		<createStateless public="1" set="method">
			<f a="loop:?coalescer">
				<f a="">
					<c path="stx.concurrent.ActorFactory.T"/>
					<c path="stx.Future"><c path="stx.concurrent.ActorFactory.S"/></c>
				</f>
				<t path="stx.concurrent.Coalescer"><c path="stx.concurrent.ActorFactory.T"/></t>
				<c path="stx.concurrent.Actor">
					<c path="stx.concurrent.ActorFactory.T"/>
					<c path="stx.concurrent.ActorFactory.S"/>
				</c>
			</f>
			<haxe_doc> Creates a stateless actor (an actor that requires no initial state, and 
   * does not produce any state.
   </haxe_doc>
		</createStateless>
		<haxe_doc> Tries to coalesce the two elements into a single element </haxe_doc>
	</class>
	<class path="stx.core.Initializable" params="" file="src/main/haxe/stx/core/Initializable.hx" interface="1">
		<initialize public="1" set="method"><f a=""><e path="Void"/></f></initialize>
		<initialized public="1" set="null"><e path="Bool"/></initialized>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.functional.Foldable" params="A:B" file="src/main/haxe/stx/functional/Foldable.hx" interface="1">
		<empty public="1" params="C:D" set="method">
			<f a=""><c path="stx.functional.Foldable">
	<c path="empty.C"/>
	<c path="empty.D"/>
</c></f>
			<haxe_doc> Creates an "empty" version of the foldable structure. </haxe_doc>
		</empty>
		<append public="1" set="method">
			<f a="b">
				<c path="stx.functional.Foldable.B"/>
				<c path="stx.functional.Foldable.A"/>
			</f>
			<haxe_doc> Append a value to the specified foldable and returns the result. </haxe_doc>
		</append>
		<foldl public="1" params="T" set="method">
			<f a="t:f">
				<c path="foldl.T"/>
				<f a=":">
					<c path="foldl.T"/>
					<c path="stx.functional.Foldable.B"/>
					<c path="foldl.T"/>
				</f>
				<c path="foldl.T"/>
			</f>
			<haxe_doc> Left folds over the structure. </haxe_doc>
		</foldl>
		<haxe_doc><![CDATA[ A structure that can be folded over. The type system cannot enforce it, but
 * a structure that implements this interface should specify its own type as the
 * first type parameter; e.g.: Set<T> implements Foldable<Set<T>, T>
 ]]></haxe_doc>
	</class>
	<class path="stx.ds.Collection" params="C:T" file="src/main/haxe/stx/ds/Collection.hx" interface="1">
		<implements path="stx.functional.Foldable">
			<c path="stx.ds.Collection.C"/>
			<c path="stx.ds.Collection.T"/>
		</implements>
		<size public="1" set="method"><f a=""><c path="Int"/></f></size>
		<contains public="1" set="method"><f a="t">
	<c path="stx.ds.Collection.T"/>
	<e path="Bool"/>
</f></contains>
		<add public="1" set="method"><f a="t">
	<c path="stx.ds.Collection.T"/>
	<c path="stx.ds.Collection.C"/>
</f></add>
		<addAll public="1" set="method"><f a="t">
	<t path="Iterable"><c path="stx.ds.Collection.T"/></t>
	<c path="stx.ds.Collection.C"/>
</f></addAll>
		<remove public="1" set="method"><f a="t">
	<c path="stx.ds.Collection.T"/>
	<c path="stx.ds.Collection.C"/>
</f></remove>
		<removeAll public="1" set="method"><f a="t">
	<t path="Iterable"><c path="stx.ds.Collection.T"/></t>
	<c path="stx.ds.Collection.C"/>
</f></removeAll>
		<haxe_doc> A collection is a foldable data structure with additional methods to add 
 * and remove elements, determine the size of the collection, and evaluate 
 * equality predicates on elements in the collection.
 </haxe_doc>
	</class>
	<class path="stx.ds.Group" params="" file="src/main/haxe/stx/ds/Group.hx">
		<new public="1" set="method" line="17"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.ds.ArrayGroup" params="" file="src/main/haxe/stx/ds/Group.hx" module="stx.ds.Group"><groupBy public="1" params="T:K" set="method" line="23" static="1"><f a="arr:grouper">
	<c path="Array"><c path="groupBy.T"/></c>
	<f a="">
		<c path="groupBy.T"/>
		<c path="groupBy.K"/>
	</f>
	<c path="stx.ds.Map">
		<c path="groupBy.K"/>
		<c path="Array"><c path="groupBy.T"/></c>
	</c>
</f></groupBy></class>
	<class path="stx.ds.IterableGroup" params="" file="src/main/haxe/stx/ds/Group.hx" module="stx.ds.Group"><groupBy public="1" params="T:K" set="method" line="33" static="1"><f a="iter:grouper">
	<t path="Iterable"><c path="groupBy.T"/></t>
	<f a="">
		<c path="groupBy.T"/>
		<c path="groupBy.K"/>
	</f>
	<c path="stx.ds.Map">
		<c path="groupBy.K"/>
		<t path="Iterable"><c path="groupBy.T"/></t>
	</c>
</f></groupBy></class>
	<class path="stx.ds.FoldableGroup" params="" file="src/main/haxe/stx/ds/Group.hx" module="stx.ds.Group"><groupBy public="1" params="C:T:K" set="method" line="39" static="1"><f a="foldable:grouper">
	<c path="stx.functional.Foldable">
		<c path="groupBy.C"/>
		<c path="groupBy.T"/>
	</c>
	<f a="">
		<c path="groupBy.T"/>
		<c path="groupBy.K"/>
	</f>
	<c path="stx.ds.Map">
		<c path="groupBy.K"/>
		<c path="groupBy.C"/>
	</c>
</f></groupBy></class>
	<class path="stx.ds.ArrayToList" params="" file="src/main/haxe/stx/ds/List.hx" module="stx.ds.List"><toList public="1" params="T" set="method" line="40" static="1"><f a="arr">
	<c path="Array"><c path="toList.T"/></c>
	<c path="stx.ds.List"><c path="toList.T"/></c>
</f></toList></class>
	<class path="stx.ds.FoldableToList" params="" file="src/main/haxe/stx/ds/List.hx" module="stx.ds.List"><toList public="1" params="A:B" set="method" line="45" static="1"><f a="foldable">
	<c path="stx.functional.Foldable">
		<c path="toList.A"/>
		<c path="toList.B"/>
	</c>
	<c path="stx.ds.List"><c path="toList.B"/></c>
</f></toList></class>
	<class path="stx.ds.List" params="T" file="src/main/haxe/stx/ds/List.hx">
		<implements path="stx.ds.Collection">
			<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
			<c path="stx.ds.List.T"/>
		</implements>
		<toList public="1" params="T" set="method" line="69" static="1"><f a="i">
	<t path="Iterable"><c path="toList.T"/></t>
	<c path="stx.ds.List"><c path="toList.T"/></c>
</f></toList>
		<nil public="1" params="T" set="method" line="72" static="1"><f a="?order:?tools">
	<t path="stx.OrderFunction"><c path="nil.T"/></t>
	<t path="stx.CollectionTools"><c path="nil.T"/></t>
	<c path="stx.ds.List"><c path="nil.T"/></c>
</f></nil>
		<create public="1" params="T" set="method" line="76" static="1"><f a="?tools">
	<t path="stx.CollectionTools"><c path="create.T"/></t>
	<c path="stx.ds.List"><c path="create.T"/></c>
</f></create>
		<factory public="1" params="T" set="method" line="81" static="1">
			<f a="?tools">
				<t path="stx.CollectionTools"><c path="factory.T"/></t>
				<t path="stx.Factory"><c path="stx.ds.List"><c path="factory.T"/></c></t>
			</f>
			<haxe_doc> Creates a factory for lists of the specified type. </haxe_doc>
		</factory>
		<head public="1" get="getHead" set="null"><c path="stx.ds.List.T"/></head>
		<tail public="1" get="getTail" set="null"><c path="stx.ds.List"><c path="stx.ds.List.T"/></c></tail>
		<first public="1" get="getHead" set="null"><c path="stx.ds.List.T"/></first>
		<last public="1" get="getLast" set="null"><c path="stx.ds.List.T"/></last>
		<headOption public="1" get="getHeadOption" set="null"><e path="stx.Option"><c path="stx.ds.List.T"/></e></headOption>
		<firstOption public="1" get="getHeadOption" set="null"><e path="stx.Option"><c path="stx.ds.List.T"/></e></firstOption>
		<lastOption public="1" get="getLastOption" set="null"><e path="stx.Option"><c path="stx.ds.List.T"/></e></lastOption>
		<equal public="1" get="getEqual" set="null"><t path="stx.EqualFunction"><c path="stx.ds.List.T"/></t></equal>
		<order public="1" get="getOrder" set="null"><t path="stx.OrderFunction"><c path="stx.ds.List.T"/></t></order>
		<hash public="1" get="getHash" set="null"><t path="stx.HashFunction"><c path="stx.ds.List.T"/></t></hash>
		<show public="1" get="getShow" set="null"><t path="stx.ShowFunction"><c path="stx.ds.List.T"/></t></show>
		<empty public="1" params="C:D" set="method" line="96"><f a=""><c path="stx.functional.Foldable">
	<c path="empty.C"/>
	<c path="empty.D"/>
</c></f></empty>
		<cons public="1" set="method" line="104">
			<f a="head">
				<c path="stx.ds.List.T"/>
				<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
			</f>
			<haxe_doc> Prepends an element to the list. This method is dramatically faster than
   * appending an element to the end of the list. In general, you should
   * construct lists by prepending, and then reverse at the end if necessary.
   </haxe_doc>
		</cons>
		<prepend public="1" set="method" line="109">
			<f a="head">
				<c path="stx.ds.List.T"/>
				<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
			</f>
			<haxe_doc> Synonym for cons. </haxe_doc>
		</prepend>
		<prependAll public="1" set="method" line="113"><f a="iterable">
	<t path="Iterable"><c path="stx.ds.List.T"/></t>
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
</f></prependAll>
		<prependAllR public="1" set="method" line="125"><f a="iterable">
	<t path="Iterable"><c path="stx.ds.List.T"/></t>
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
</f></prependAllR>
		<append public="1" set="method" line="133"><f a="b">
	<c path="stx.ds.List.T"/>
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
</f></append>
		<foldl public="1" params="Z" set="method" line="137"><f a="z:f">
	<c path="foldl.Z"/>
	<f a=":">
		<c path="foldl.Z"/>
		<c path="stx.ds.List.T"/>
		<c path="foldl.Z"/>
	</f>
	<c path="foldl.Z"/>
</f></foldl>
		<foldr public="1" params="Z" set="method" line="153">
			<f a="z:f">
				<c path="foldr.Z"/>
				<f a=":">
					<c path="stx.ds.List.T"/>
					<c path="foldr.Z"/>
					<c path="foldr.Z"/>
				</f>
				<c path="foldr.Z"/>
			</f>
			<haxe_doc> A right fold. Right folds are much more efficient when folding to
   * another list.
   </haxe_doc>
		</foldr>
		<contains public="1" set="method" line="167"><f a="t">
	<c path="stx.ds.List.T"/>
	<e path="Bool"/>
</f></contains>
		<add public="1" set="method" line="181">
			<f a="t">
				<c path="stx.ds.List.T"/>
				<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
			</f>
			<haxe_doc> Adds an item to the end of the list. This is a slow method; for high performance,
   * the cons() method should be used to grow the list.
   </haxe_doc>
		</add>
		<addAll public="1" set="method" line="187"><f a="i">
	<t path="Iterable"><c path="stx.ds.List.T"/></t>
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
</f></addAll>
		<remove public="1" set="method" line="203"><f a="t">
	<c path="stx.ds.List.T"/>
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
</f></remove>
		<removeAll public="1" set="method" line="232"><f a="i">
	<t path="Iterable"><c path="stx.ds.List.T"/></t>
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
</f></removeAll>
		<concat public="1" set="method" line="241">
			<f a="l">
				<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
				<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
			</f>
			<haxe_doc> Override Foldable to provide higher performance: </haxe_doc>
		</concat>
		<drop public="1" set="method" line="246">
			<f a="n">
				<c path="Int"/>
				<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
			</f>
			<haxe_doc> Override Foldable to provide higher performance: </haxe_doc>
		</drop>
		<dropWhile public="1" set="method" line="257">
			<f a="pred">
				<f a="">
					<c path="stx.ds.List.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
			</f>
			<haxe_doc> Override Foldable to provide higher performance: </haxe_doc>
		</dropWhile>
		<take public="1" set="method" line="270">
			<f a="n">
				<c path="Int"/>
				<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
			</f>
			<haxe_doc> Override Foldable to provide higher performance: </haxe_doc>
		</take>
		<map public="1" params="B" set="method" line="275">
			<f a="f">
				<f a="">
					<c path="stx.ds.List.T"/>
					<c path="map.B"/>
				</f>
				<c path="stx.ds.List"><c path="map.B"/></c>
			</f>
			<haxe_doc> Override Foldable to provide higher performance: </haxe_doc>
		</map>
		<flatMap public="1" params="B" set="method" line="280">
			<f a="f">
				<f a="">
					<c path="stx.ds.List.T"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="stx.ds.List"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc> Override Foldable to provide higher performance: </haxe_doc>
		</flatMap>
		<filter public="1" set="method" line="285">
			<f a="f">
				<f a="">
					<c path="stx.ds.List.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
			</f>
			<haxe_doc> Override Foldable to provide higher performance: </haxe_doc>
		</filter>
		<reverse public="1" set="method" line="291">
			<f a=""><c path="stx.ds.List"><c path="stx.ds.List.T"/></c></f>
			<haxe_doc> Returns a list that contains all the elements of this list in reverse
   * order </haxe_doc>
		</reverse>
		<zip public="1" params="U" set="method" line="296">
			<f a="that">
				<c path="stx.ds.List"><c path="zip.U"/></c>
				<c path="stx.ds.List"><c path="stx.Tuple2">
	<c path="stx.ds.List.T"/>
	<c path="zip.U"/>
</c></c>
			</f>
			<haxe_doc> Zips this list and the specified list into a list of tuples. </haxe_doc>
		</zip>
		<gaps public="1" params="G" set="method" line="315">
			<f a="f:?equal">
				<f a=":">
					<c path="stx.ds.List.T"/>
					<c path="stx.ds.List.T"/>
					<c path="stx.ds.List"><c path="gaps.G"/></c>
				</f>
				<t path="stx.EqualFunction"><c path="gaps.G"/></t>
				<c path="stx.ds.List"><c path="gaps.G"/></c>
			</f>
			<haxe_doc> Retrieves a list of gaps in this sequence.
   *
   * @param f Called with every two consecutive elements to retrieve a list of gaps.
   </haxe_doc>
		</gaps>
		<sort public="1" set="method" line="322">
			<f a=""><c path="stx.ds.List"><c path="stx.ds.List.T"/></c></f>
			<haxe_doc> Returns a list that contains all the elements of this list, sorted by
   * the ordering function.
   </haxe_doc>
		</sort>
		<iterator public="1" set="method" line="334"><f a=""><t path="Iterator"><c path="stx.ds.List.T"/></t></f></iterator>
		<withOrderFunction public="1" set="method" line="338"><f a="order">
	<t path="stx.OrderFunction"><c path="stx.ds.List.T"/></t>
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
</f></withOrderFunction>
		<withEqualFunction public="1" set="method" line="342"><f a="equal">
	<t path="stx.EqualFunction"><c path="stx.ds.List.T"/></t>
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
</f></withEqualFunction>
		<withHashFunction public="1" set="method" line="346"><f a="hash">
	<t path="stx.HashFunction"><c path="stx.ds.List.T"/></t>
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
</f></withHashFunction>
		<withShowFunction public="1" set="method" line="350"><f a="show">
	<t path="stx.ShowFunction"><c path="stx.ds.List.T"/></t>
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
</f></withShowFunction>
		<_equal><t path="stx.EqualFunction"><c path="stx.ds.List.T"/></t></_equal>
		<_order><t path="stx.OrderFunction"><c path="stx.ds.List.T"/></t></_order>
		<_hash><t path="stx.HashFunction"><c path="stx.ds.List.T"/></t></_hash>
		<_show><t path="stx.ShowFunction"><c path="stx.ds.List.T"/></t></_show>
		<getOrder set="method" line="358"><f a=""><t path="stx.OrderFunction"><c path="stx.ds.List.T"/></t></f></getOrder>
		<getEqual set="method" line="367"><f a=""><t path="stx.EqualFunction"><c path="stx.ds.List.T"/></t></f></getEqual>
		<getHash set="method" line="376"><f a=""><t path="stx.HashFunction"><c path="stx.ds.List.T"/></t></f></getHash>
		<getShow set="method" line="385"><f a=""><t path="stx.ShowFunction"><c path="stx.ds.List.T"/></t></f></getShow>
		<equals public="1" set="method" line="394"><f a="other">
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
	<e path="Bool"/>
</f></equals>
		<compare public="1" set="method" line="398"><f a="other">
	<c path="stx.ds.List"><c path="stx.ds.List.T"/></c>
	<c path="Int"/>
</f></compare>
		<hashCode public="1" set="method" line="402"><f a=""><c path="Int"/></f></hashCode>
		<toString public="1" set="method" line="407"><f a=""><c path="String"/></f></toString>
		<size public="1" set="method" line="411"><f a=""><c path="Int"/></f></size>
		<getHead set="method" line="415"><f a=""><c path="stx.ds.List.T"/></f></getHead>
		<getLast set="method" line="419"><f a=""><c path="stx.ds.List.T"/></f></getLast>
		<getHeadOption set="method" line="423"><f a=""><e path="stx.Option"><c path="stx.ds.List.T"/></e></f></getHeadOption>
		<getLastOption set="method" line="427"><f a=""><e path="stx.Option"><c path="stx.ds.List.T"/></e></f></getLastOption>
		<getTail set="method" line="431"><f a=""><c path="stx.ds.List"><c path="stx.ds.List.T"/></c></f></getTail>
		<new set="method" line="87"><f a="?tools">
	<t path="stx.CollectionTools"><c path="stx.ds.List.T"/></t>
	<e path="Void"/>
</f></new>
		<haxe_doc> A classic immutable list built from cons and nil elements. </haxe_doc>
	</class>
	<class path="stx.ds._List.Cons" params="T" file="src/main/haxe/stx/ds/List.hx" private="1" module="stx.ds.List">
		<extends path="stx.ds.List"><c path="stx.ds._List.Cons.T"/></extends>
		<_head><c path="stx.ds._List.Cons.T"/></_head>
		<_tail><c path="stx.ds.List"><c path="stx.ds._List.Cons.T"/></c></_tail>
		<_size><c path="Int"/></_size>
		<getHead set="method" line="448" override="1"><f a=""><c path="stx.ds._List.Cons.T"/></f></getHead>
		<getLast set="method" line="452" override="1"><f a=""><c path="stx.ds._List.Cons.T"/></f></getLast>
		<getTail set="method" line="462" override="1"><f a=""><c path="stx.ds.List"><c path="stx.ds._List.Cons.T"/></c></f></getTail>
		<getHeadOption set="method" line="466" override="1"><f a=""><e path="stx.Option"><c path="stx.ds._List.Cons.T"/></e></f></getHeadOption>
		<getLastOption set="method" line="470" override="1"><f a=""><e path="stx.Option"><c path="stx.ds._List.Cons.T"/></e></f></getLastOption>
		<size public="1" set="method" line="474" override="1"><f a=""><c path="Int"/></f></size>
		<new public="1" set="method" line="441"><f a="tools:head:tail">
	<t path="stx.CollectionTools"><c path="stx.ds._List.Cons.T"/></t>
	<c path="stx.ds._List.Cons.T"/>
	<c path="stx.ds.List"><c path="stx.ds._List.Cons.T"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.ds._List.Nil" params="T" file="src/main/haxe/stx/ds/List.hx" private="1" module="stx.ds.List">
		<extends path="stx.ds.List"><c path="stx.ds._List.Nil.T"/></extends>
		<new public="1" set="method" line="480"><f a="tools">
	<t path="stx.CollectionTools"><c path="stx.ds._List.Nil.T"/></t>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.functional.PartialFunction1" params="A:Z" file="src/main/haxe/stx/functional/PartialFunction.hx" module="stx.functional.PartialFunction" interface="1">
		<isDefinedAt public="1" set="method"><f a="a">
	<c path="stx.functional.PartialFunction1.A"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method"><f a="that">
	<c path="stx.functional.PartialFunction1">
		<c path="stx.functional.PartialFunction1.A"/>
		<c path="stx.functional.PartialFunction1.Z"/>
	</c>
	<c path="stx.functional.PartialFunction1">
		<c path="stx.functional.PartialFunction1.A"/>
		<c path="stx.functional.PartialFunction1.Z"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method"><f a="f">
	<f a="">
		<c path="stx.functional.PartialFunction1.A"/>
		<c path="stx.functional.PartialFunction1.Z"/>
	</f>
	<c path="stx.functional.PartialFunction1">
		<c path="stx.functional.PartialFunction1.A"/>
		<c path="stx.functional.PartialFunction1.Z"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method"><f a="z">
	<t path="stx.Thunk"><c path="stx.functional.PartialFunction1.Z"/></t>
	<c path="stx.functional.PartialFunction1">
		<c path="stx.functional.PartialFunction1.A"/>
		<c path="stx.functional.PartialFunction1.Z"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method"><f a="a">
	<c path="stx.functional.PartialFunction1.A"/>
	<c path="stx.functional.PartialFunction1.Z"/>
</f></call>
		<toFunction public="1" set="method"><f a=""><f a="">
	<c path="stx.functional.PartialFunction1.A"/>
	<e path="stx.Option"><c path="stx.functional.PartialFunction1.Z"/></e>
</f></f></toFunction>
	</class>
	<class path="stx.ds.Map" params="K:V" file="src/main/haxe/stx/ds/Map.hx">
		<implements path="stx.functional.PartialFunction1">
			<c path="stx.ds.Map.K"/>
			<c path="stx.ds.Map.V"/>
		</implements>
		<implements path="stx.ds.Collection">
			<c path="stx.ds.Map">
				<c path="stx.ds.Map.K"/>
				<c path="stx.ds.Map.V"/>
			</c>
			<c path="stx.Tuple2">
				<c path="stx.ds.Map.K"/>
				<c path="stx.ds.Map.V"/>
			</c>
		</implements>
		<MaxLoad public="1" line="47" static="1"><c path="Int"/></MaxLoad>
		<MinLoad public="1" line="48" static="1"><c path="Int"/></MinLoad>
		<create public="1" params="K:V" set="method" line="64" static="1"><f a="?korder:?kequal:?khash:?kshow:?vorder:?vequal:?vhash:?vshow">
	<t path="stx.OrderFunction"><c path="create.K"/></t>
	<t path="stx.EqualFunction"><c path="create.K"/></t>
	<t path="stx.HashFunction"><c path="create.K"/></t>
	<t path="stx.ShowFunction"><c path="create.K"/></t>
	<t path="stx.OrderFunction"><c path="create.V"/></t>
	<t path="stx.EqualFunction"><c path="create.V"/></t>
	<t path="stx.HashFunction"><c path="create.V"/></t>
	<t path="stx.ShowFunction"><c path="create.V"/></t>
	<c path="stx.ds.Map">
		<c path="create.K"/>
		<c path="create.V"/>
	</c>
</f></create>
		<factory public="1" params="K:V" set="method" line="69" static="1">
			<f a="?korder:?kequal:?khash:?kshow:?vorder:?vequal:?vhash:?vshow">
				<t path="stx.OrderFunction"><c path="factory.K"/></t>
				<t path="stx.EqualFunction"><c path="factory.K"/></t>
				<t path="stx.HashFunction"><c path="factory.K"/></t>
				<t path="stx.ShowFunction"><c path="factory.K"/></t>
				<t path="stx.OrderFunction"><c path="factory.V"/></t>
				<t path="stx.EqualFunction"><c path="factory.V"/></t>
				<t path="stx.HashFunction"><c path="factory.V"/></t>
				<t path="stx.ShowFunction"><c path="factory.V"/></t>
				<t path="stx.Factory"><c path="stx.ds.Map">
	<c path="factory.K"/>
	<c path="factory.V"/>
</c></t>
			</f>
			<haxe_doc> Creates a factory for maps of the specified types. </haxe_doc>
		</factory>
		<keyEqual public="1" get="getKeyEqual" set="null"><t path="stx.EqualFunction"><c path="stx.ds.Map.K"/></t></keyEqual>
		<keyOrder public="1" get="getKeyOrder" set="null"><t path="stx.OrderFunction"><c path="stx.ds.Map.K"/></t></keyOrder>
		<keyHash public="1" get="getKeyHash" set="null"><t path="stx.HashFunction"><c path="stx.ds.Map.K"/></t></keyHash>
		<keyShow public="1" get="getKeyShow" set="null"><t path="stx.ShowFunction"><c path="stx.ds.Map.K"/></t></keyShow>
		<valueEqual public="1" get="getValueEqual" set="null"><t path="stx.EqualFunction"><c path="stx.ds.Map.V"/></t></valueEqual>
		<valueOrder public="1" get="getValueOrder" set="null"><t path="stx.OrderFunction"><c path="stx.ds.Map.V"/></t></valueOrder>
		<valueHash public="1" get="getValueHash" set="null"><t path="stx.HashFunction"><c path="stx.ds.Map.V"/></t></valueHash>
		<valueShow public="1" get="getValueShow" set="null"><t path="stx.ShowFunction"><c path="stx.ds.Map.V"/></t></valueShow>
		<_buckets><c path="Array"><c path="Array"><c path="stx.Tuple2">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
</c></c></c></_buckets>
		<_size><c path="Int"/></_size>
		<_pf><c path="stx.functional.PartialFunction1">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
</c></_pf>
		<isDefinedAt public="1" set="method" line="94"><f a="k">
	<c path="stx.ds.Map.K"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method" line="98"><f a="that">
	<c path="stx.functional.PartialFunction1">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
	<c path="stx.functional.PartialFunction1">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method" line="102"><f a="f">
	<f a="">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</f>
	<c path="stx.functional.PartialFunction1">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method" line="106"><f a="v">
	<t path="stx.Thunk"><c path="stx.ds.Map.V"/></t>
	<c path="stx.functional.PartialFunction1">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method" line="110"><f a="k">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
</f></call>
		<toFunction public="1" set="method" line="114"><f a=""><f a="">
	<c path="stx.ds.Map.K"/>
	<e path="stx.Option"><c path="stx.ds.Map.V"/></e>
</f></f></toFunction>
		<empty public="1" params="C:D" set="method" line="118"><f a=""><c path="stx.functional.Foldable">
	<c path="empty.C"/>
	<c path="empty.D"/>
</c></f></empty>
		<append public="1" set="method" line="122"><f a="t">
	<c path="stx.Tuple2">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></append>
		<foldl public="1" params="Z" set="method" line="126"><f a="z:f">
	<c path="foldl.Z"/>
	<f a=":">
		<c path="foldl.Z"/>
		<c path="stx.Tuple2">
			<c path="stx.ds.Map.K"/>
			<c path="stx.ds.Map.V"/>
		</c>
		<c path="foldl.Z"/>
	</f>
	<c path="foldl.Z"/>
</f></foldl>
		<set public="1" set="method" line="136"><f a="k:v">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></set>
		<add public="1" set="method" line="140"><f a="t">
	<c path="stx.Tuple2">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></add>
		<addAll public="1" set="method" line="180"><f a="i">
	<t path="Iterable"><c path="stx.Tuple2">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
</c></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></addAll>
		<remove public="1" set="method" line="188"><f a="t">
	<c path="stx.Tuple2">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></remove>
		<removeAll public="1" set="method" line="192"><f a="i">
	<t path="Iterable"><c path="stx.Tuple2">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
</c></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></removeAll>
		<removeByKey public="1" set="method" line="200"><f a="k">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></removeByKey>
		<removeAllByKey public="1" set="method" line="204"><f a="i">
	<t path="Iterable"><c path="stx.ds.Map.K"/></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></removeAllByKey>
		<get public="1" set="method" line="212"><f a="k">
	<c path="stx.ds.Map.K"/>
	<e path="stx.Option"><c path="stx.ds.Map.V"/></e>
</f></get>
		<getOrElse public="1" set="method" line="222"><f a="k:def">
	<c path="stx.ds.Map.K"/>
	<t path="stx.Thunk"><c path="stx.ds.Map.V"/></t>
	<c path="stx.ds.Map.V"/>
</f></getOrElse>
		<getOrElseC public="1" set="method" line="229"><f a="k:c">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
	<c path="stx.ds.Map.V"/>
</f></getOrElseC>
		<contains public="1" set="method" line="236"><f a="t">
	<c path="stx.Tuple2">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
	<e path="Bool"/>
</f></contains>
		<containsKey public="1" set="method" line="246"><f a="k">
	<c path="stx.ds.Map.K"/>
	<e path="Bool"/>
</f></containsKey>
		<keys public="1" set="method" line="253"><f a=""><t path="Iterable"><c path="stx.ds.Map.K"/></t></f></keys>
		<keySet public="1" set="method" line="271"><f a=""><c path="stx.ds.Set"><c path="stx.ds.Map.K"/></c></f></keySet>
		<values public="1" set="method" line="275"><f a=""><t path="Iterable"><c path="stx.ds.Map.V"/></t></f></values>
		<iterator public="1" set="method" line="293"><f a=""><t path="Iterator"><c path="stx.Tuple2">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
</c></t></f></iterator>
		<compare public="1" set="method" line="297"><f a="other">
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
	<c path="Int"/>
</f></compare>
		<equals public="1" set="method" line="318"><f a="other">
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
	<e path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="333"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method" line="339"><f a=""><c path="Int"/></f></hashCode>
		<load public="1" set="method" line="345"><f a=""><c path="Int"/></f></load>
		<withKeyOrderFunction public="1" set="method" line="350"><f a="order">
	<t path="stx.OrderFunction"><c path="stx.ds.Map.K"/></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></withKeyOrderFunction>
		<withKeyEqualFunction public="1" set="method" line="354"><f a="equal">
	<t path="stx.EqualFunction"><c path="stx.ds.Map.K"/></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></withKeyEqualFunction>
		<withKeyHashFunction public="1" set="method" line="358"><f a="hash">
	<t path="stx.HashFunction"><c path="stx.ds.Map.K"/></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></withKeyHashFunction>
		<withKeyShowFunction public="1" set="method" line="362"><f a="show">
	<t path="stx.ShowFunction"><c path="stx.ds.Map.K"/></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></withKeyShowFunction>
		<withValueOrderFunction public="1" set="method" line="366"><f a="order">
	<t path="stx.OrderFunction"><c path="stx.ds.Map.V"/></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></withValueOrderFunction>
		<withValueEqualFunction public="1" set="method" line="370"><f a="equal">
	<t path="stx.EqualFunction"><c path="stx.ds.Map.V"/></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></withValueEqualFunction>
		<withValueHashFunction public="1" set="method" line="374"><f a="hash">
	<t path="stx.HashFunction"><c path="stx.ds.Map.V"/></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></withValueHashFunction>
		<withValueShowFunction public="1" set="method" line="378"><f a="show">
	<t path="stx.ShowFunction"><c path="stx.ds.Map.V"/></t>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></withValueShowFunction>
		<entries set="method" line="382"><f a=""><t path="Iterable"><c path="stx.Tuple2">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
</c></t></f></entries>
		<removeInternal set="method" line="424"><f a="k:v:ignoreValue">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
	<e path="Bool"/>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></removeInternal>
		<copyWithMod set="method" line="457"><f a="index">
	<c path="Int"/>
	<c path="stx.ds.Map">
		<c path="stx.ds.Map.K"/>
		<c path="stx.ds.Map.V"/>
	</c>
</f></copyWithMod>
		<rebalance set="method" line="473"><f a=""><e path="Void"/></f></rebalance>
		<bucketFor set="method" line="493"><f a="k">
	<c path="stx.ds.Map.K"/>
	<c path="Int"/>
</f></bucketFor>
		<listFor set="method" line="497"><f a="k">
	<c path="stx.ds.Map.K"/>
	<c path="Array"><c path="stx.Tuple2">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
</c></c>
</f></listFor>
		<size public="1" set="method" line="502"><f a=""><c path="Int"/></f></size>
		<_keyEqual><t path="stx.EqualFunction"><c path="stx.ds.Map.K"/></t></_keyEqual>
		<_keyOrder><t path="stx.OrderFunction"><c path="stx.ds.Map.K"/></t></_keyOrder>
		<_keyHash><t path="stx.HashFunction"><c path="stx.ds.Map.K"/></t></_keyHash>
		<_keyShow><t path="stx.ShowFunction"><c path="stx.ds.Map.K"/></t></_keyShow>
		<_valueEqual><t path="stx.EqualFunction"><c path="stx.ds.Map.V"/></t></_valueEqual>
		<_valueOrder><t path="stx.OrderFunction"><c path="stx.ds.Map.V"/></t></_valueOrder>
		<_valueHash><t path="stx.HashFunction"><c path="stx.ds.Map.V"/></t></_valueHash>
		<_valueShow><t path="stx.ShowFunction"><c path="stx.ds.Map.V"/></t></_valueShow>
		<getKeyOrder set="method" line="514"><f a=""><t path="stx.OrderFunction"><c path="stx.ds.Map.K"/></t></f></getKeyOrder>
		<getKeyEqual set="method" line="524"><f a=""><t path="stx.EqualFunction"><c path="stx.ds.Map.K"/></t></f></getKeyEqual>
		<getKeyHash set="method" line="534"><f a=""><t path="stx.HashFunction"><c path="stx.ds.Map.K"/></t></f></getKeyHash>
		<getKeyShow set="method" line="544"><f a=""><t path="stx.ShowFunction"><c path="stx.ds.Map.K"/></t></f></getKeyShow>
		<getValueOrder set="method" line="554"><f a=""><t path="stx.OrderFunction"><c path="stx.ds.Map.V"/></t></f></getValueOrder>
		<getValueEqual set="method" line="564"><f a=""><t path="stx.EqualFunction"><c path="stx.ds.Map.V"/></t></f></getValueEqual>
		<getValueHash set="method" line="574"><f a=""><t path="stx.HashFunction"><c path="stx.ds.Map.V"/></t></f></getValueHash>
		<getValueShow set="method" line="584"><f a=""><t path="stx.ShowFunction"><c path="stx.ds.Map.V"/></t></f></getValueShow>
		<new set="method" line="75"><f a="korder:kequal:khash:kshow:vorder:vequal:vhash:vshow:buckets:size">
	<t path="stx.OrderFunction"><c path="stx.ds.Map.K"/></t>
	<t path="stx.EqualFunction"><c path="stx.ds.Map.K"/></t>
	<t path="stx.HashFunction"><c path="stx.ds.Map.K"/></t>
	<t path="stx.ShowFunction"><c path="stx.ds.Map.K"/></t>
	<t path="stx.OrderFunction"><c path="stx.ds.Map.V"/></t>
	<t path="stx.EqualFunction"><c path="stx.ds.Map.V"/></t>
	<t path="stx.HashFunction"><c path="stx.ds.Map.V"/></t>
	<t path="stx.ShowFunction"><c path="stx.ds.Map.V"/></t>
	<c path="Array"><c path="Array"><c path="stx.Tuple2">
	<c path="stx.ds.Map.K"/>
	<c path="stx.ds.Map.V"/>
</c></c></c>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc> A cross-platform, immutable map with support for arbitrary keys.
 * TODO: Use an array of lists to avoid unnecessary copying when adding/removing elements.
 </haxe_doc>
	</class>
	<class path="stx.ds.MapExtensions" params="" file="src/main/haxe/stx/ds/Map.hx" module="stx.ds.Map">
		<toObject public="1" params="V" set="method" line="595" static="1"><f a="map">
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="toObject.V"/>
	</c>
	<d><c path="toObject.V"/></d>
</f></toObject>
		<toMap public="1" params="T" set="method" line="602" static="1"><f a="d">
	<d><c path="toMap.T"/></d>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="toMap.T"/>
	</c>
</f></toMap>
	</class>
	<class path="stx.ds.IterableToMap" params="" file="src/main/haxe/stx/ds/Map.hx" module="stx.ds.Map"><toMap public="1" params="K:V" set="method" line="615" static="1"><f a="i">
	<t path="Iterable"><c path="stx.Tuple2">
	<c path="toMap.K"/>
	<c path="toMap.V"/>
</c></t>
	<c path="stx.ds.Map">
		<c path="toMap.K"/>
		<c path="toMap.V"/>
	</c>
</f></toMap></class>
	<class path="stx.ds.FoldableToMap" params="" file="src/main/haxe/stx/ds/Map.hx" module="stx.ds.Map"><toMap public="1" params="A:K:V" set="method" line="620" static="1"><f a="foldable">
	<c path="stx.functional.Foldable">
		<c path="toMap.A"/>
		<c path="stx.Tuple2">
			<c path="toMap.K"/>
			<c path="toMap.V"/>
		</c>
	</c>
	<c path="stx.ds.Map">
		<c path="toMap.K"/>
		<c path="toMap.V"/>
	</c>
</f></toMap></class>
	<class path="stx.ds.ArrayToMap" params="" file="src/main/haxe/stx/ds/Map.hx" module="stx.ds.Map"><toMap public="1" params="K:V" set="method" line="628" static="1"><f a="arr">
	<c path="Array"><c path="stx.Tuple2">
	<c path="toMap.K"/>
	<c path="toMap.V"/>
</c></c>
	<c path="stx.ds.Map">
		<c path="toMap.K"/>
		<c path="toMap.V"/>
	</c>
</f></toMap></class>
	<class path="stx.ds.Range" params="T" file="src/main/haxe/stx/ds/Range.hx">
		<MIN public="1" line="4" static="1"><c path="Float"/></MIN>
		<MAX public="1" line="5" static="1"><c path="Float"/></MAX>
		<create public="1" set="method" line="35" static="1"><f a="?min:?max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="stx.ds.Range"><c path="Float"/></c>
</f></create>
		<min public="1" set="null"><c path="stx.ds.Range.T"/></min>
		<max public="1" set="null"><c path="stx.ds.Range.T"/></max>
		<equals public="1" set="method" line="20"><f a="v1">
	<c path="stx.ds.Range"><d/></c>
	<e path="Bool"/>
</f></equals>
		<overlap public="1" set="method" line="23"><f a="v1">
	<c path="stx.ds.Range"><d/></c>
	<e path="Bool"/>
</f></overlap>
		<within public="1" set="method" line="26"><f a="n">
	<c path="stx.ds.Range.T"/>
	<e path="Bool"/>
</f></within>
		<inside public="1" set="method" line="29"><f a="v1">
	<c path="stx.ds.Range"><d/></c>
	<e path="Bool"/>
</f></inside>
		<delta public="1" params="A" set="method" line="32"><f a=""><c path="stx.ds.Range.T"/></f></delta>
		<new public="1" set="method" line="11"><f a="?trange">
	<t path="stx.ds.TRange"><d/></t>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="stx.ds.TRange" params="T" file="src/main/haxe/stx/ds/Range.hx" module="stx.ds.Range"><a>
	<min><c path="Float"/></min>
	<max><c path="Float"/></max>
</a></typedef>
	<class path="stx.ds.FoldableToSet" params="" file="src/main/haxe/stx/ds/Set.hx" module="stx.ds.Set"><toSet public="1" params="A:B" set="method" line="34" static="1"><f a="foldable">
	<c path="stx.functional.Foldable">
		<c path="toSet.A"/>
		<c path="toSet.B"/>
	</c>
	<c path="stx.ds.Set"><c path="toSet.B"/></c>
</f></toSet></class>
	<class path="stx.ds.ArrayToSet" params="" file="src/main/haxe/stx/ds/Set.hx" module="stx.ds.Set"><toSet public="1" params="T" set="method" line="42" static="1"><f a="arr">
	<c path="Array"><c path="toSet.T"/></c>
	<c path="stx.ds.Set"><c path="toSet.T"/></c>
</f></toSet></class>
	<class path="stx.ds.Set" params="T" file="src/main/haxe/stx/ds/Set.hx">
		<implements path="stx.ds.Collection">
			<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
			<c path="stx.ds.Set.T"/>
		</implements>
		<toSet public="1" params="T" set="method" line="55" static="1"><f a="i">
	<t path="Iterable"><c path="toSet.T"/></t>
	<c path="stx.ds.Set"><c path="toSet.T"/></c>
</f></toSet>
		<create public="1" params="T" set="method" line="58" static="1"><f a="?order:?equal:?hash:?show">
	<t path="stx.OrderFunction"><c path="create.T"/></t>
	<t path="stx.EqualFunction"><c path="create.T"/></t>
	<t path="stx.HashFunction"><c path="create.T"/></t>
	<t path="stx.ShowFunction"><c path="create.T"/></t>
	<c path="stx.ds.Set"><c path="create.T"/></c>
</f></create>
		<factory public="1" params="T" set="method" line="63" static="1">
			<f a="?order:?equal:?hash:?show">
				<t path="stx.OrderFunction"><c path="factory.T"/></t>
				<t path="stx.EqualFunction"><c path="factory.T"/></t>
				<t path="stx.HashFunction"><c path="factory.T"/></t>
				<t path="stx.ShowFunction"><c path="factory.T"/></t>
				<t path="stx.Factory"><c path="stx.ds.Set"><c path="factory.T"/></c></t>
			</f>
			<haxe_doc> Creates a factory for sets of the specified type. </haxe_doc>
		</factory>
		<equal public="1" get="getEqual" set="null"><t path="stx.EqualFunction"><c path="stx.ds.Set.T"/></t></equal>
		<order public="1" get="getOrder" set="null"><t path="stx.OrderFunction"><c path="stx.ds.Set.T"/></t></order>
		<hash public="1" get="getHash" set="null"><t path="stx.HashFunction"><c path="stx.ds.Set.T"/></t></hash>
		<show public="1" get="getShow" set="null"><t path="stx.ShowFunction"><c path="stx.ds.Set.T"/></t></show>
		<_map><c path="stx.ds.Map">
	<c path="stx.ds.Set.T"/>
	<c path="stx.ds.Set.T"/>
</c></_map>
		<contains public="1" set="method" line="73"><f a="e">
	<c path="stx.ds.Set.T"/>
	<e path="Bool"/>
</f></contains>
		<empty public="1" params="C:D" set="method" line="77"><f a=""><c path="stx.functional.Foldable">
	<c path="empty.C"/>
	<c path="empty.D"/>
</c></f></empty>
		<append public="1" set="method" line="81"><f a="t">
	<c path="stx.ds.Set.T"/>
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
</f></append>
		<foldl public="1" params="Z" set="method" line="85"><f a="z:f">
	<c path="foldl.Z"/>
	<f a=":">
		<c path="foldl.Z"/>
		<c path="stx.ds.Set.T"/>
		<c path="foldl.Z"/>
	</f>
	<c path="foldl.Z"/>
</f></foldl>
		<add public="1" set="method" line="95"><f a="t">
	<c path="stx.ds.Set.T"/>
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
</f></add>
		<addAll public="1" set="method" line="99"><f a="it">
	<t path="Iterable"><c path="stx.ds.Set.T"/></t>
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
</f></addAll>
		<remove public="1" set="method" line="107"><f a="t">
	<c path="stx.ds.Set.T"/>
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
</f></remove>
		<removeAll public="1" set="method" line="111"><f a="it">
	<t path="Iterable"><c path="stx.ds.Set.T"/></t>
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
</f></removeAll>
		<iterator public="1" set="method" line="119"><f a=""><t path="Iterator"><c path="stx.ds.Set.T"/></t></f></iterator>
		<equals public="1" set="method" line="123"><f a="other">
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
	<e path="Bool"/>
</f></equals>
		<compare public="1" set="method" line="128"><f a="other">
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
	<c path="Int"/>
</f></compare>
		<hashCode public="1" set="method" line="132"><f a=""><c path="Int"/></f></hashCode>
		<toString public="1" set="method" line="136"><f a=""><c path="String"/></f></toString>
		<withOrderFunction public="1" set="method" line="140"><f a="order">
	<t path="stx.OrderFunction"><c path="stx.ds.Set.T"/></t>
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
</f></withOrderFunction>
		<withEqualFunction public="1" set="method" line="145"><f a="equal">
	<t path="stx.EqualFunction"><c path="stx.ds.Set.T"/></t>
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
</f></withEqualFunction>
		<withHashFunction public="1" set="method" line="150"><f a="hash">
	<t path="stx.HashFunction"><c path="stx.ds.Set.T"/></t>
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
</f></withHashFunction>
		<withShowFunction public="1" set="method" line="155"><f a="show">
	<t path="stx.ShowFunction"><c path="stx.ds.Set.T"/></t>
	<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
</f></withShowFunction>
		<copyWithMod set="method" line="163">
			<f a="newMap">
				<c path="stx.ds.Map">
					<c path="stx.ds.Set.T"/>
					<c path="stx.ds.Set.T"/>
				</c>
				<c path="stx.ds.Set"><c path="stx.ds.Set.T"/></c>
			</f>
			<haxe_doc>
   *  @:todo inject *Functions here?
   </haxe_doc>
		</copyWithMod>
		<size public="1" set="method" line="167"><f a=""><c path="Int"/></f></size>
		<getOrder set="method" line="171"><f a=""><t path="stx.OrderFunction"><c path="stx.ds.Set.T"/></t></f></getOrder>
		<getEqual set="method" line="175"><f a=""><t path="stx.EqualFunction"><c path="stx.ds.Set.T"/></t></f></getEqual>
		<getHash set="method" line="179"><f a=""><t path="stx.HashFunction"><c path="stx.ds.Set.T"/></t></f></getHash>
		<getShow set="method" line="183"><f a=""><t path="stx.ShowFunction"><c path="stx.ds.Set.T"/></t></f></getShow>
		<new set="method" line="69"><f a="map">
	<c path="stx.ds.Map">
		<c path="stx.ds.Set.T"/>
		<c path="stx.ds.Set.T"/>
	</c>
	<e path="Void"/>
</f></new>
		<haxe_doc> A cross-platform, immutable Set built on Map. </haxe_doc>
	</class>
	<typedef path="stx.ds._Set.FriendMap" params="K" file="src/main/haxe/stx/ds/Set.hx" private="1" module="stx.ds.Set"><a>
	<_keyShow><t path="stx.ShowFunction"><c path="stx.ds._Set.FriendMap.K"/></t></_keyShow>
	<_keyOrder><t path="stx.OrderFunction"><c path="stx.ds._Set.FriendMap.K"/></t></_keyOrder>
	<_keyHash><t path="stx.HashFunction"><c path="stx.ds._Set.FriendMap.K"/></t></_keyHash>
	<_keyEqual><t path="stx.EqualFunction"><c path="stx.ds._Set.FriendMap.K"/></t></_keyEqual>
</a></typedef>
	<class path="stx.ds.Zipper" params="T:C" file="src/main/haxe/stx/ds/Zipper.hx">
		<zipper public="1" params="T" set="method" line="50" static="1"><f a="v">
	<c path="zipper.T"/>
	<c path="stx.ds.Zipper">
		<c path="zipper.T"/>
		<c path="zipper.T"/>
	</c>
</f></zipper>
		<data><c path="stx.ds.Zipper.T"/></data>
		<path><c path="Array"><t path="stx.Function1">
	<d/>
	<d/>
</t></c></path>
		<current public="1" set="null"><c path="stx.ds.Zipper.C"/></current>
		<root public="1" set="method" line="31"><f a=""><c path="stx.ds.Zipper">
	<c path="stx.ds.Zipper.T"/>
	<c path="stx.ds.Zipper.T"/>
</c></f></root>
		<map public="1" params="N" set="method" line="34"><f a="f">
	<t path="stx.Function1">
		<c path="stx.ds.Zipper.C"/>
		<d/>
	</t>
	<c path="stx.ds.Zipper">
		<c path="stx.ds.Zipper.T"/>
		<c path="map.N"/>
	</c>
</f></map>
		<flatMap public="1" set="method" line="39"><f a=""><e path="Void"/></f></flatMap>
		<up public="1" params="P" set="method" line="42"><f a=""><c path="stx.ds.Zipper">
	<c path="stx.ds.Zipper.T"/>
	<c path="up.P"/>
</c></f></up>
		<get public="1" set="method" line="47"><f a=""><c path="stx.ds.Zipper.C"/></f></get>
		<new public="1" set="method" line="25"><f a="v:?c:?p">
	<c path="stx.ds.Zipper.T"/>
	<c path="stx.ds.Zipper.C"/>
	<c path="Array"><t path="stx.Function1">
	<d/>
	<d/>
</t></c>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.ds.Zippers" params="" file="src/main/haxe/stx/ds/Zipper.hx" module="stx.ds.Zipper"><get public="1" params="T:C" set="method" line="55" static="1"><f a="z">
	<c path="stx.ds.Zipper">
		<c path="get.T"/>
		<c path="get.C"/>
	</c>
	<c path="get.C"/>
</f></get></class>
	<class path="stx.ds.EnumZipper" params="" file="src/main/haxe/stx/ds/Zipper.hx" module="stx.ds.Zipper"><param public="1" params="T:C:N" set="method" line="60" static="1"><f a="z:index">
	<c path="stx.ds.Zipper">
		<c path="param.T"/>
		<c path="EnumValue"/>
	</c>
	<c path="Int"/>
	<c path="stx.ds.Zipper">
		<c path="param.T"/>
		<c path="param.N"/>
	</c>
</f></param></class>
	<class path="stx.ds.ObjectZipper" params="" file="src/main/haxe/stx/ds/Zipper.hx" module="stx.ds.Zipper">
		<field public="1" params="T:C:N" set="method" line="68" static="1"><f a="z:field">
	<c path="stx.ds.Zipper">
		<c path="field.T"/>
		<c path="field.C"/>
	</c>
	<c path="String"/>
	<c path="stx.ds.Zipper">
		<c path="field.T"/>
		<c path="stx.Tuple2">
			<c path="String"/>
			<c path="field.N"/>
		</c>
	</c>
</f></field>
		<spawn public="1" params="T:C" set="method" line="72" static="1"><f a="z">
	<c path="stx.ds.Zipper">
		<c path="spawn.T"/>
		<c path="spawn.C"/>
	</c>
	<c path="Array"><c path="stx.ds.Zipper">
	<c path="spawn.T"/>
	<c path="stx.Tuple2">
		<c path="String"/>
		<d/>
	</c>
</c></c>
</f></spawn>
	</class>
	<class path="stx.ds.HashZipper" params="" file="src/main/haxe/stx/ds/Zipper.hx" module="stx.ds.Zipper">
		<key public="1" params="T:C" set="method" line="79" static="1"><f a="z:field">
	<c path="stx.ds.Zipper">
		<c path="key.T"/>
		<c path="Hash"><c path="key.C"/></c>
	</c>
	<c path="String"/>
	<c path="stx.ds.Zipper">
		<c path="key.T"/>
		<c path="stx.Tuple2">
			<c path="String"/>
			<c path="key.C"/>
		</c>
	</c>
</f></key>
		<spawn public="1" params="T:C" set="method" line="83" static="1"><f a="z">
	<c path="stx.ds.Zipper">
		<c path="spawn.T"/>
		<c path="Hash"><c path="spawn.C"/></c>
	</c>
	<c path="Array"><c path="stx.ds.Zipper">
	<c path="spawn.T"/>
	<c path="stx.Tuple2">
		<c path="String"/>
		<d/>
	</c>
</c></c>
</f></spawn>
	</class>
	<class path="stx.ds.ArrayZipper" params="" file="src/main/haxe/stx/ds/Zipper.hx" module="stx.ds.Zipper">
		<index public="1" params="T:N" set="method" line="91" static="1"><f a="z:index">
	<c path="stx.ds.Zipper">
		<c path="index.T"/>
		<c path="Array"><c path="index.N"/></c>
	</c>
	<c path="Int"/>
	<c path="stx.ds.Zipper">
		<c path="index.T"/>
		<c path="stx.Tuple2">
			<c path="Int"/>
			<c path="index.N"/>
		</c>
	</c>
</f></index>
		<spawn public="1" params="T:C" set="method" line="96" static="1"><f a="z">
	<c path="stx.ds.Zipper">
		<c path="spawn.T"/>
		<c path="Array"><c path="spawn.C"/></c>
	</c>
	<c path="Array"><c path="stx.ds.Zipper">
	<c path="spawn.T"/>
	<c path="stx.Tuple2">
		<c path="Int"/>
		<c path="spawn.C"/>
	</c>
</c></c>
</f></spawn>
	</class>
	<class path="stx.ds.plus.Equal" params="" file="src/main/haxe/stx/ds/plus/Equal.hx">
		<getEqualFor public="1" params="T" set="method" line="22" static="1">
			<f a="t">
				<c path="getEqualFor.T"/>
				<t path="stx.EqualFunction"><c path="getEqualFor.T"/></t>
			</f>
			<haxe_doc><![CDATA[ 
   * Returns an EqualFunction (T -> T -> Bool). It works for any type. Custom Classes can provide
   * an "equals(other : T) : Bool" method or a "compare(other : T) : Int" method otherwise  simple comparison operators will be used.
   ]]></haxe_doc>
		</getEqualFor>
		<getEqualForType public="1" params="T" set="method" line="25" static="1"><f a="v">
	<e path="ValueType"/>
	<t path="stx.EqualFunction"><c path="getEqualForType.T"/></t>
</f></getEqualForType>
		<_createEqualImpl params="T" set="method" line="94" static="1"><f a="impl">
	<t path="stx.EqualFunction"><d/></t>
	<f a="a:b">
		<c path="getEqualForType.T"/>
		<c path="getEqualForType.T"/>
		<e path="Bool"/>
	</f>
</f></_createEqualImpl>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.ds.plus.ArrayEqual" params="" file="src/main/haxe/stx/ds/plus/Equal.hx" module="stx.ds.plus.Equal">
		<equals public="1" params="T" set="method" line="103" static="1"><f a="v1:v2">
	<c path="Array"><c path="equals.T"/></c>
	<c path="Array"><c path="equals.T"/></c>
	<e path="Bool"/>
</f></equals>
		<equalsWith public="1" params="T" set="method" line="107" static="1"><f a="v1:v2:equal">
	<c path="Array"><c path="equalsWith.T"/></c>
	<c path="Array"><c path="equalsWith.T"/></c>
	<t path="stx.EqualFunction"><c path="equalsWith.T"/></t>
	<e path="Bool"/>
</f></equalsWith>
	</class>
	<class path="stx.ds.plus.ProductEqual" params="" file="src/main/haxe/stx/ds/plus/Equal.hx" module="stx.ds.plus.Equal">
		<getEqual public="1" set="method" line="118" static="1"><f a="p:i">
	<c path="stx.Product"/>
	<c path="Int"/>
	<t path="stx.EqualFunction"><unknown/></t>
</f></getEqual>
		<productEquals public="1" set="method" line="121" static="1"><f a="p:other">
	<c path="stx.Product"/>
	<c path="stx.Product"/>
	<e path="Bool"/>
</f></productEquals>
		<equals public="1" set="method" line="127" static="1"><f a="p:other">
	<c path="stx.Product"/>
	<c path="stx.Product"/>
	<e path="Bool"/>
</f></equals>
	</class>
	<class path="stx.ds.plus.Hasher" params="" file="src/main/haxe/stx/ds/plus/Hasher.hx">
		<_createHashImpl params="T" set="method" line="19" static="1"><f a="impl">
	<t path="stx.HashFunction"><d/></t>
	<f a="v">
		<c path="_createHashImpl.T"/>
		<c path="Int"/>
	</f>
</f></_createHashImpl>
		<getHashFor public="1" params="T" set="method" line="24" static="1"><f a="t">
	<c path="getHashFor.T"/>
	<t path="stx.HashFunction"><c path="getHashFor.T"/></t>
</f></getHashFor>
		<getHashForType public="1" params="T" set="method" line="27" static="1"><f a="v">
	<e path="ValueType"/>
	<t path="stx.HashFunction"><c path="getHashForType.T"/></t>
</f></getHashForType>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.ds.plus.ArrayHasher" params="" file="src/main/haxe/stx/ds/plus/Hasher.hx" module="stx.ds.plus.Hasher">
		<hashCode public="1" params="T" set="method" line="84" static="1"><f a="v">
	<c path="Array"><c path="hashCode.T"/></c>
	<c path="Int"/>
</f></hashCode>
		<hashCodeWith public="1" params="T" set="method" line="87" static="1"><f a="v:hash">
	<c path="Array"><c path="hashCodeWith.T"/></c>
	<t path="stx.HashFunction"><c path="hashCodeWith.T"/></t>
	<c path="Int"/>
</f></hashCodeWith>
	</class>
	<class path="stx.ds.plus.StringHasher" params="" file="src/main/haxe/stx/ds/plus/Hasher.hx" module="stx.ds.plus.Hasher"><hashCode public="1" set="method" line="98" static="1"><f a="v">
	<c path="String"/>
	<c path="Int"/>
</f></hashCode></class>
	<class path="stx.ds.plus.DateHasher" params="" file="src/main/haxe/stx/ds/plus/Hasher.hx" module="stx.ds.plus.Hasher"><hashCode public="1" set="method" line="112" static="1"><f a="v">
	<c path="Date"/>
	<c path="Int"/>
</f></hashCode></class>
	<class path="stx.ds.plus.FloatHasher" params="" file="src/main/haxe/stx/ds/plus/Hasher.hx" module="stx.ds.plus.Hasher"><hashCode public="1" set="method" line="117" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></hashCode></class>
	<class path="stx.ds.plus.IntHasher" params="" file="src/main/haxe/stx/ds/plus/Hasher.hx" module="stx.ds.plus.Hasher"><hashCode public="1" set="method" line="122" static="1"><f a="v">
	<c path="Int"/>
	<c path="Int"/>
</f></hashCode></class>
	<class path="stx.ds.plus.BoolHasher" params="" file="src/main/haxe/stx/ds/plus/Hasher.hx" module="stx.ds.plus.Hasher"><hashCode public="1" set="method" line="127" static="1"><f a="v">
	<e path="Bool"/>
	<c path="Int"/>
</f></hashCode></class>
	<class path="stx.ds.plus.ProductHasher" params="" file="src/main/haxe/stx/ds/plus/Hasher.hx" module="stx.ds.plus.Hasher">
		<getHash public="1" set="method" line="133" static="1"><f a="p:i">
	<c path="stx.Product"/>
	<c path="Int"/>
	<t path="stx.HashFunction"><unknown/></t>
</f></getHash>
		<_baseHashes line="136" static="1"><c path="Array"><c path="Array"><c path="Int"/></c></c></_baseHashes>
		<hashCode public="1" set="method" line="142" static="1"><f a="p">
	<c path="stx.Product"/>
	<c path="Int"/>
</f></hashCode>
	</class>
	<class path="stx.ds.plus.Meta" params="" file="src/main/haxe/stx/ds/plus/Meta.hx">
		<__meta__ public="1" line="12" static="1"><d/></__meta__>
		<_hasMetaDataClass public="1" set="method" line="14" static="1"><f a="c">
	<c path="Class"><d/></c>
	<e path="Bool"/>
</f></_hasMetaDataClass>
		<_getMetaDataField public="1" set="method" line="18" static="1"><f a="c:f">
	<c path="Class"><d/></c>
	<c path="String"/>
	<unknown/>
</f></_getMetaDataField>
		<_fieldsWithMeta public="1" set="method" line="28" static="1"><f a="c:name">
	<c path="Class"><d/></c>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></_fieldsWithMeta>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.ds.plus.Order" params="" file="src/main/haxe/stx/ds/plus/Order.hx">
		<_createOrderImpl params="T" set="method" line="18" static="1"><f a="impl">
	<t path="stx.OrderFunction"><d/></t>
	<t path="stx.OrderFunction"><c path="_createOrderImpl.T"/></t>
</f></_createOrderImpl>
		<getOrderFor public="1" params="T" set="method" line="29" static="1">
			<f a="t">
				<c path="getOrderFor.T"/>
				<t path="stx.OrderFunction"><c path="getOrderFor.T"/></t>
			</f>
			<haxe_doc><![CDATA[ Returns a OrderFunction (T -> T -> Int). It works for any type expect TFunction.
   *  Custom Classes must provide a compare(other : T) : Int method or an exception will be thrown.
   ]]></haxe_doc>
		</getOrderFor>
		<getOrderForType public="1" params="T" set="method" line="32" static="1"><f a="v">
	<e path="ValueType"/>
	<t path="stx.OrderFunction"><c path="getOrderForType.T"/></t>
</f></getOrderForType>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.ds.plus.ArrayOrder" params="" file="src/main/haxe/stx/ds/plus/Order.hx" module="stx.ds.plus.Order">
		<sort public="1" params="T" set="method" line="116" static="1"><f a="v">
	<c path="Array"><c path="sort.T"/></c>
	<c path="Array"><c path="sort.T"/></c>
</f></sort>
		<sortWith public="1" params="T" set="method" line="120" static="1"><f a="v:order">
	<c path="Array"><c path="sortWith.T"/></c>
	<t path="stx.OrderFunction"><c path="sortWith.T"/></t>
	<c path="Array"><c path="sortWith.T"/></c>
</f></sortWith>
		<compare public="1" params="T" set="method" line="125" static="1"><f a="v1:v2">
	<c path="Array"><c path="compare.T"/></c>
	<c path="Array"><c path="compare.T"/></c>
	<c path="Int"/>
</f></compare>
		<compareWith public="1" params="T" set="method" line="129" static="1"><f a="v1:v2:order">
	<c path="Array"><c path="compareWith.T"/></c>
	<c path="Array"><c path="compareWith.T"/></c>
	<t path="stx.OrderFunction"><c path="compareWith.T"/></t>
	<c path="Int"/>
</f></compareWith>
	</class>
	<class path="stx.ds.plus.ProductOrder" params="" file="src/main/haxe/stx/ds/plus/Order.hx" module="stx.ds.plus.Order">
		<getOrder public="1" set="method" line="143" static="1"><f a="p:i">
	<c path="stx.Product"/>
	<c path="Int"/>
	<t path="stx.OrderFunction"><unknown/></t>
</f></getOrder>
		<compare public="1" set="method" line="146" static="1"><f a="one:other">
	<c path="stx.Product"/>
	<c path="stx.Product"/>
	<c path="Int"/>
</f></compare>
	</class>
	<class path="stx.ds.plus.Show" params="" file="src/main/haxe/stx/ds/plus/Show.hx">
		<_createShowImpl params="T" set="method" line="16" static="1"><f a="impl">
	<t path="stx.ShowFunction"><d/></t>
	<t path="stx.ShowFunction"><c path="_createShowImpl.T"/></t>
</f></_createShowImpl>
		<getShowFor public="1" params="T" set="method" line="22" static="1">
			<f a="t">
				<c path="getShowFor.T"/>
				<t path="stx.ShowFunction"><c path="getShowFor.T"/></t>
			</f>
			<haxe_doc><![CDATA[ Returns a ShowFunction (T -> String). It works for any type. For Custom Classes you must provide a toString()
   * method, otherwise the full class name is returned.
   ]]></haxe_doc>
		</getShowFor>
		<getShowForType public="1" params="T" set="method" line="30" static="1">
			<f a="v">
				<e path="ValueType"/>
				<t path="stx.ShowFunction"><c path="getShowForType.T"/></t>
			</f>
			<haxe_doc>
   *  @:todo Reflect.fields doesn't work consistenly across platforms so we may probably pass to use Type.getInstanceFields. The problem here
   *  is that we must check if the fields are functions before grabbing the value.
   </haxe_doc>
		</getShowForType>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.ds.plus.ArrayShow" params="" file="src/main/haxe/stx/ds/plus/Show.hx" module="stx.ds.plus.Show">
		<toString public="1" params="T" set="method" line="89" static="1"><f a="v">
	<c path="Array"><c path="toString.T"/></c>
	<c path="String"/>
</f></toString>
		<toStringWith public="1" params="T" set="method" line="92" static="1"><f a="v:show">
	<c path="Array"><c path="toStringWith.T"/></c>
	<t path="stx.ShowFunction"><c path="toStringWith.T"/></t>
	<c path="String"/>
</f></toStringWith>
		<mkString public="1" params="T" set="method" line="96" static="1"><f a="arr:?sep:?show">
	<c path="Array"><c path="mkString.T"/></c>
	<c path="String"/>
	<f a="">
		<c path="mkString.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
</f></mkString>
	</class>
	<class path="stx.ds.plus.IterableShow" params="" file="src/main/haxe/stx/ds/plus/Show.hx" module="stx.ds.plus.Show">
		<toString public="1" params="T" set="method" line="108" static="1"><f a="i:?show:?prefix:?suffix:?sep">
	<t path="Iterable"><c path="toString.T"/></t>
	<f a="">
		<c path="toString.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></toString>
		<mkString public="1" params="T" set="method" line="112" static="1"><f a="i:?show:?prefix:?suffix:?sep">
	<t path="Iterable"><c path="mkString.T"/></t>
	<f a="">
		<c path="mkString.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></mkString>
	</class>
	<class path="stx.ds.plus.BoolShow" params="" file="src/main/haxe/stx/ds/plus/Show.hx" module="stx.ds.plus.Show"><toString public="1" set="method" line="129" static="1"><f a="v">
	<e path="Bool"/>
	<c path="String"/>
</f></toString></class>
	<class path="stx.ds.plus.IntShow" params="" file="src/main/haxe/stx/ds/plus/Show.hx" module="stx.ds.plus.Show"><toString public="1" set="method" line="134" static="1"><f a="v">
	<c path="Int"/>
	<c path="String"/>
</f></toString></class>
	<class path="stx.ds.plus.FloatShow" params="" file="src/main/haxe/stx/ds/plus/Show.hx" module="stx.ds.plus.Show"><toString public="1" set="method" line="139" static="1"><f a="v">
	<c path="Float"/>
	<c path="String"/>
</f></toString></class>
	<class path="stx.ds.plus.ProductShow" params="" file="src/main/haxe/stx/ds/plus/Show.hx" module="stx.ds.plus.Show">
		<getProductShow public="1" set="method" line="144" static="1"><f a="p:i">
	<c path="stx.Product"/>
	<c path="Int"/>
	<t path="stx.ShowFunction"><unknown/></t>
</f></getProductShow>
		<toString public="1" set="method" line="147" static="1"><f a="p">
	<c path="stx.Product"/>
	<c path="String"/>
</f></toString>
	</class>
	<class path="stx.error.Error" params="" file="src/main/haxe/stx/error/Error.hx">
		<exception public="1" get="get_exception" set="null" static="1"><c path="stx.Future"><c path="stx.error.Error"/></c></exception>
		<get_exception set="method" line="14" static="1"><f a=""><c path="stx.Future"><c path="stx.error.Error"/></c></f></get_exception>
		<toError public="1" set="method" line="34" static="1"><f a="msg:?pos">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<c path="stx.error.Error"/>
</f></toError>
		<printf public="1" set="method" line="38" static="1"><f a="a:str">
	<c path="Array"><d/></c>
	<c path="String"/>
	<c path="String"/>
</f></printf>
		<msg><c path="String"/></msg>
		<pos><t path="haxe.PosInfos"/></pos>
		<except public="1" set="method" line="26"><f a=""><c path="stx.error.Error"/></f></except>
		<toString public="1" set="method" line="30"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="22"><f a="msg:?pos">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.error.AbstractMethodError" params="" file="src/main/haxe/stx/error/AbstractMethodError.hx">
		<extends path="stx.error.Error"/>
		<new public="1" set="method" line="12"><f a="?pos">
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.error.AssertionError" params="" file="src/main/haxe/stx/error/AssertionError.hx">
		<extends path="stx.error.Error"/>
		<new public="1" set="method" line="10"><f a="msg:?pos">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.error.Positions" params="" file="src/main/haxe/stx/error/Error.hx" module="stx.error.Error">
		<toString public="1" set="method" line="60" static="1"><f a="pos">
	<t path="haxe.PosInfos"/>
	<c path="String"/>
</f></toString>
		<here public="1" set="method" line="65" static="1"><f a="?pos">
	<t path="haxe.PosInfos"/>
	<t path="haxe.PosInfos"/>
</f></here>
	</class>
	<class path="stx.error.IllegalOverrideError" params="" file="src/main/haxe/stx/error/IllegalOverrideError.hx">
		<extends path="stx.error.Error"/>
		<new public="1" set="method" line="11"><f a="of:?pos">
	<unknown/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.error.NullReferenceError" params="" file="src/main/haxe/stx/error/NullReferenceError.hx">
		<extends path="stx.error.Error"/>
		<new public="1" set="method" line="11"><f a="fieldname:?pos">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.error.OutOfBoundsError" params="" file="src/main/haxe/stx/error/OutOfBoundsError.hx">
		<extends path="stx.error.Error"/>
		<new public="1" set="method" line="11"><f a="?pos">
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<enum path="stx.framework.BindingType" params="" file="src/main/haxe/stx/framework/Injector.hx" module="stx.framework.Injector">
		<OneToOne/>
		<OneToMany/>
	</enum>
	<typedef path="stx.framework.Binder" params="T:S" file="src/main/haxe/stx/framework/Injector.hx" module="stx.framework.Injector"><a>
	<bindF set="method">
		<f a="interf:f:?b">
			<c path="Class"><c path="stx.framework.Binder.T"/></c>
			<f a=""><c path="stx.framework.Binder.T"/></f>
			<e path="stx.framework.BindingType"/>
			<c path="stx.framework.Binder.S"/>
		</f>
		<haxe_doc> Binds the interface to the specified factory. The factory will 
   * be used for creating instances of the specified type.
   </haxe_doc>
	</bindF>
	<bind set="method"><f a="interf:c:?b">
	<c path="Class"><c path="stx.framework.Binder.T"/></c>
	<c path="Class"><d/></c>
	<e path="stx.framework.BindingType"/>
	<c path="stx.framework.Binder.S"/>
</f></bind>
</a></typedef>
	<typedef path="stx.framework.Bindable" params="T" file="src/main/haxe/stx/framework/Injector.hx" module="stx.framework.Injector"><a>
	<bindToF><f a="::">
	<c path="Class"><c path="stx.framework.Bindable.T"/></c>
	<f a=""><c path="stx.framework.Bindable.T"/></f>
	<e path="stx.framework.BindingType"/>
	<e path="Void"/>
</f></bindToF>
	<bindTo><f a="::">
	<c path="Class"><c path="stx.framework.Bindable.T"/></c>
	<c path="Class"><d/></c>
	<e path="stx.framework.BindingType"/>
	<e path="Void"/>
</f></bindTo>
</a></typedef>
	<class path="stx.framework.InjectorConfig" params="" file="src/main/haxe/stx/framework/Injector.hx" module="stx.framework.Injector" interface="1">
		<bind public="1" params="T" set="method">
			<f a="interf:c:?b">
				<c path="Class"><c path="bind.T"/></c>
				<c path="Class"><d/></c>
				<e path="stx.framework.BindingType"/>
				<c path="stx.framework.InjectorConfig"/>
			</f>
			<haxe_doc> Binds the interface to the specified implementation class.
   </haxe_doc>
		</bind>
		<bindF public="1" params="T" set="method">
			<f a="interf:f:?b">
				<c path="Class"><c path="bindF.T"/></c>
				<f a=""><c path="bindF.T"/></f>
				<e path="stx.framework.BindingType"/>
				<c path="stx.framework.InjectorConfig"/>
			</f>
			<haxe_doc> Binds the interface to the specified factory. The factory will 
   * be used for creating instances of the specified type.
   </haxe_doc>
		</bindF>
		<inClass public="1" params="T" set="method">
			<f a="c">
				<c path="Class"><d/></c>
				<t path="stx.framework.Binder">
					<c path="inClass.T"/>
					<c path="stx.framework.InjectorConfig"/>
				</t>
			</f>
			<haxe_doc> Retrieves a binder that operates only in the scope of the specified class. 
   * This can be used to provide fine-grained control over implementations in
   * the scope of a particular class.
   </haxe_doc>
		</inClass>
		<inModule public="1" params="T" set="method">
			<f a="m">
				<c path="String"/>
				<t path="stx.framework.Binder">
					<c path="inModule.T"/>
					<c path="stx.framework.InjectorConfig"/>
				</t>
			</f>
			<haxe_doc> Retrieves a binder that operates only in the scope of the specified module. 
   * This can be used to provide fine-grained control over implementations in
   * the scope of a particular module.
   </haxe_doc>
		</inModule>
		<inPackage public="1" params="T" set="method">
			<f a="p">
				<c path="String"/>
				<t path="stx.framework.Binder">
					<c path="inPackage.T"/>
					<c path="stx.framework.InjectorConfig"/>
				</t>
			</f>
			<haxe_doc> Retrieves a binder that operates only in the scope of the specified package. 
   * This can be used to provide fine-grained control over implementations in
   * the scope of a particular package.
   </haxe_doc>
		</inPackage>
		<haxe_doc> An interface used to configure dependencies. </haxe_doc>
	</class>
	<class path="stx.framework.Injector" params="" file="src/main/haxe/stx/framework/Injector.hx">
		<inject public="1" params="T" set="method" line="115" static="1">
			<f a="interf:?pos">
				<c path="Class"><c path="inject.T"/></c>
				<t path="haxe.PosInfos"/>
				<c path="inject.T"/>
			</f>
			<haxe_doc> Injects an implementation of the specified interface. The implementation 
   * will be chosen based on the current bindings.
   </haxe_doc>
		</inject>
		<enter public="1" params="T" set="method" line="125" static="1">
			<f a="f">
				<f a="">
					<c path="stx.framework.InjectorConfig"/>
					<c path="enter.T"/>
				</f>
				<c path="enter.T"/>
			</f>
			<haxe_doc> The entry point for a module. This is how an application specifies the 
   * configuration.
   *
   * @param f The module, which should specify the configuration and run the
   *          associated code.
   </haxe_doc>
		</enter>
		<forever public="1" params="T" set="method" line="129" static="1"><f a="f">
	<f a="">
		<c path="stx.framework.InjectorConfig"/>
		<c path="forever.T"/>
	</f>
	<c path="forever.T"/>
</f></forever>
		<haxe_doc><![CDATA[ Featherweight injection library.
 * <pre>
 * import stx.framework.Injector;
 *
 * ...
 *
 * Injector.enter(
 *  function(config) {
 *    config.bind(Clock, SystemClock, OneToMany);
 *    config.inClass(ClockConsumer).bind(Clock, MockClock);
 *
 *    myApp.run();
 *
 *    return Unit;
 *  }
 * );
 * </pre>
 * Interfaces can specify a default implementation by adding the following metadata to the interface itself:
 * <pre>
 * @DefaultImplementation("full.path.to.ImplementationClass")
 * </pre>
 * By default the BindingType is OneToMany but you can specify the desired type as the second parameter:
 * <pre>
 * @DefaultImplementation("full.path.to.ImplementationClass", "OneToOne")
 * </pre>
 * Note that due to limitations in the metadata system both the arguments must be passed as String values.
 ]]></haxe_doc>
	</class>
	<typedef path="stx.framework._Injector.Bindings" params="" file="src/main/haxe/stx/framework/Injector.hx" private="1" module="stx.framework.Injector"><a>
	<packageBindings><c path="Hash"><c path="Hash"><f a=""><d/></f></c></c></packageBindings>
	<moduleBindings><c path="Hash"><c path="Hash"><f a=""><d/></f></c></c></moduleBindings>
	<globalBindings><c path="Hash"><f a=""><d/></f></c></globalBindings>
	<defaultBindings><c path="Hash"><e path="stx.Option"><f a=""><d/></f></e></c></defaultBindings>
	<classBindings><c path="Hash"><c path="Hash"><f a=""><d/></f></c></c></classBindings>
</a></typedef>
	<class path="stx.framework._Injector.InjectorImpl" params="" file="src/main/haxe/stx/framework/Injector.hx" private="1" module="stx.framework.Injector">
		<state line="144" static="1"><c path="Array"><t path="stx.framework._Injector.Bindings"/></c></state>
		<classBindingsExtractor line="146" static="1"><f a="b">
	<t path="stx.framework._Injector.Bindings"/>
	<c path="Hash"><c path="Hash"><f a=""><d/></f></c></c>
</f></classBindingsExtractor>
		<moduleBindingsExtractor line="147" static="1"><f a="b">
	<t path="stx.framework._Injector.Bindings"/>
	<c path="Hash"><c path="Hash"><f a=""><d/></f></c></c>
</f></moduleBindingsExtractor>
		<packageBindingsExtractor line="148" static="1"><f a="b">
	<t path="stx.framework._Injector.Bindings"/>
	<c path="Hash"><c path="Hash"><f a=""><d/></f></c></c>
</f></packageBindingsExtractor>
		<inject public="1" params="T" set="method" line="150" static="1"><f a="interf:?pos">
	<c path="Class"><c path="inject.T"/></c>
	<t path="haxe.PosInfos"/>
	<c path="inject.T"/>
</f></inject>
		<forever public="1" params="T" set="method" line="158" static="1"><f a="f">
	<f a="">
		<c path="stx.framework.InjectorConfig"/>
		<c path="forever.T"/>
	</f>
	<c path="forever.T"/>
</f></forever>
		<enter public="1" params="T" set="method" line="170" static="1"><f a="f">
	<f a="">
		<c path="stx.framework.InjectorConfig"/>
		<c path="enter.T"/>
	</f>
	<c path="enter.T"/>
</f></enter>
		<bindTo public="1" params="T:S" set="method" line="197" static="1">
			<f a="interf:impl:?bindingType">
				<c path="Class"><c path="bindTo.T"/></c>
				<c path="Class"><c path="bindTo.S"/></c>
				<e path="stx.framework.BindingType"/>
				<d/>
			</f>
			<haxe_doc> Globally binds the interface to the specified implementation.
   </haxe_doc>
		</bindTo>
		<bindToF public="1" params="T" set="method" line="203" static="1">
			<f a="interf:f:bindingType">
				<c path="Class"><c path="bindToF.T"/></c>
				<f a=""><c path="bindToF.T"/></f>
				<e path="stx.framework.BindingType"/>
				<d/>
			</f>
			<haxe_doc> Globally binds the interface to the specified factory.
   </haxe_doc>
		</bindToF>
		<globally public="1" params="T" set="method" line="207" static="1"><f a=""><t path="stx.framework.Bindable"><c path="globally.T"/></t></f></globally>
		<inClass public="1" params="T" set="method" line="227" static="1"><f a="c">
	<c path="Class"><d/></c>
	<a>
		<bindToF><f a="interf:f:?bindingType">
	<c path="Class"><c path="inClass.T"/></c>
	<f a=""><c path="inClass.T"/></f>
	<e path="stx.framework.BindingType"/>
	<e path="Void"/>
</f></bindToF>
		<bindTo><f a="interf:impl:?bindingType">
	<c path="Class"><c path="inClass.T"/></c>
	<c path="Class"><d/></c>
	<e path="stx.framework.BindingType"/>
	<e path="Void"/>
</f></bindTo>
	</a>
</f></inClass>
		<inModule public="1" params="T" set="method" line="239" static="1"><f a="moduleName">
	<c path="String"/>
	<t path="stx.framework.Bindable"><c path="inModule.T"/></t>
</f></inModule>
		<inPackage public="1" params="T" set="method" line="251" static="1"><f a="packageName">
	<c path="String"/>
	<t path="stx.framework.Bindable"><c path="inPackage.T"/></t>
</f></inPackage>
		<bindForSpecificF params="T" set="method" line="263" static="1"><f a="extractor:interf:specific:f:bindingType">
	<f a="">
		<t path="stx.framework._Injector.Bindings"/>
		<c path="Hash"><c path="Hash"><f a=""><d/></f></c></c>
	</f>
	<c path="Class"><c path="bindForSpecificF.T"/></c>
	<c path="String"/>
	<f a=""><c path="bindForSpecificF.T"/></f>
	<e path="stx.framework.BindingType"/>
	<e path="Void"/>
</f></bindForSpecificF>
		<getMostSpecificBinding set="method" line="273" static="1"><f a="c:pos">
	<c path="Class"><d/></c>
	<t path="haxe.PosInfos"/>
	<e path="stx.Option"><f a=""><d/></f></e>
</f></getMostSpecificBinding>
		<getDefaultImplementationBinding set="method" line="281" static="1"><f a="c">
	<c path="Class"><d/></c>
	<e path="stx.Option"><f a=""><d/></f></e>
</f></getDefaultImplementationBinding>
		<getGlobalBinding set="method" line="302" static="1"><f a="c">
	<c path="Class"><d/></c>
	<e path="stx.Option"><f a=""><d/></f></e>
</f></getGlobalBinding>
		<getClassBinding set="method" line="310" static="1"><f a="c:className">
	<c path="Class"><d/></c>
	<c path="String"/>
	<e path="stx.Option"><f a=""><d/></f></e>
</f></getClassBinding>
		<getModuleBinding set="method" line="314" static="1"><f a="c:moduleName">
	<c path="Class"><d/></c>
	<c path="String"/>
	<e path="stx.Option"><f a=""><d/></f></e>
</f></getModuleBinding>
		<getPackageBinding set="method" line="318" static="1"><f a="c:packageName">
	<c path="Class"><d/></c>
	<c path="String"/>
	<e path="stx.Option"><f a=""><d/></f></e>
</f></getPackageBinding>
		<addGlobalBinding set="method" line="322" static="1"><f a="c:f">
	<c path="Class"><d/></c>
	<f a=""><d/></f>
	<e path="Void"/>
</f></addGlobalBinding>
		<existsDefaultBinding set="method" line="326" static="1"><f a="c">
	<c path="Class"><d/></c>
	<e path="Bool"/>
</f></existsDefaultBinding>
		<addDefaultBinding set="method" line="330" static="1"><f a="c:f">
	<c path="Class"><d/></c>
	<e path="stx.Option"><f a=""><d/></f></e>
	<e path="Void"/>
</f></addDefaultBinding>
		<getDefaultBinding set="method" line="334" static="1"><f a="c">
	<c path="Class"><d/></c>
	<e path="stx.Option"><f a=""><d/></f></e>
</f></getDefaultBinding>
		<getSpecificBinding set="method" line="338" static="1"><f a="extractor:c:specific">
	<f a="">
		<t path="stx.framework._Injector.Bindings"/>
		<c path="Hash"><c path="Hash"><f a=""><d/></f></c></c>
	</f>
	<c path="Class"><d/></c>
	<c path="String"/>
	<e path="stx.Option"><f a=""><d/></f></e>
</f></getSpecificBinding>
		<addSpecificBinding set="method" line="353" static="1"><f a="bindings:c:specific:f">
	<c path="Hash"><c path="Hash"><f a=""><d/></f></c></c>
	<c path="Class"><d/></c>
	<c path="String"/>
	<f a=""><d/></f>
	<e path="Void"/>
</f></addSpecificBinding>
		<classOf set="method" line="365" static="1"><f a="pos">
	<t path="haxe.PosInfos"/>
	<c path="String"/>
</f></classOf>
		<packageOf set="method" line="369" static="1"><f a="pos">
	<t path="haxe.PosInfos"/>
	<c path="String"/>
</f></packageOf>
		<moduleOf set="method" line="373" static="1"><f a="pos">
	<t path="haxe.PosInfos"/>
	<c path="String"/>
</f></moduleOf>
		<factoryFor params="T" set="method" line="381" static="1"><f a="impl">
	<c path="Class"><c path="factoryFor.T"/></c>
	<f a=""><c path="factoryFor.T"/></f>
</f></factoryFor>
		<bindingTypeDef set="method" line="387" static="1"><f a="bindingType">
	<e path="stx.framework.BindingType"/>
	<e path="stx.framework.BindingType"/>
</f></bindingTypeDef>
	</class>
	<class path="stx.framework._Injector.InjectorConfigImpl" params="" file="src/main/haxe/stx/framework/Injector.hx" private="1" module="stx.framework.Injector">
		<implements path="stx.framework.InjectorConfig"/>
		<bind public="1" params="T" set="method" line="397"><f a="interf:impl:?b">
	<c path="Class"><c path="bind.T"/></c>
	<c path="Class"><d/></c>
	<e path="stx.framework.BindingType"/>
	<c path="stx.framework.InjectorConfig"/>
</f></bind>
		<bindF public="1" params="T" set="method" line="403"><f a="interf:f:?b">
	<c path="Class"><c path="bindF.T"/></c>
	<f a=""><c path="bindF.T"/></f>
	<e path="stx.framework.BindingType"/>
	<c path="stx.framework.InjectorConfig"/>
</f></bindF>
		<inClass public="1" params="T" set="method" line="409"><f a="c">
	<c path="Class"><d/></c>
	<t path="stx.framework.Binder">
		<c path="inClass.T"/>
		<c path="stx.framework.InjectorConfig"/>
	</t>
</f></inClass>
		<inPackage public="1" params="T" set="method" line="427"><f a="p">
	<c path="String"/>
	<t path="stx.framework.Binder">
		<c path="inPackage.T"/>
		<c path="stx.framework.InjectorConfig"/>
	</t>
</f></inPackage>
		<inModule public="1" params="T" set="method" line="445"><f a="m">
	<c path="String"/>
	<t path="stx.framework.Binder">
		<c path="inModule.T"/>
		<c path="stx.framework.InjectorConfig"/>
	</t>
</f></inModule>
		<new public="1" set="method" line="394"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.functional.FoldableExtensions" params="" file="src/main/haxe/stx/functional/FoldableExtensions.hx">
		<foldr public="1" params="A:B:Z" set="method" line="32" static="1"><f a="foldable:z:f">
	<c path="stx.functional.Foldable">
		<c path="foldr.A"/>
		<c path="foldr.B"/>
	</c>
	<c path="foldr.Z"/>
	<f a=":">
		<c path="foldr.B"/>
		<c path="foldr.Z"/>
		<c path="foldr.Z"/>
	</f>
	<c path="foldr.Z"/>
</f></foldr>
		<filter public="1" params="A:B" set="method" line="46" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="filter.A"/>
		<c path="filter.B"/>
	</c>
	<f a="">
		<c path="filter.B"/>
		<e path="Bool"/>
	</f>
	<c path="filter.A"/>
</f></filter>
		<partition public="1" params="A:B" set="method" line="52" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="partition.A"/>
		<c path="partition.B"/>
	</c>
	<f a="">
		<c path="partition.B"/>
		<e path="Bool"/>
	</f>
	<c path="stx.Tuple2">
		<c path="partition.A"/>
		<c path="partition.A"/>
	</c>
</f></partition>
		<partitionWhile public="1" params="A:B" set="method" line="58" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="partitionWhile.A"/>
		<c path="partitionWhile.B"/>
	</c>
	<f a="">
		<c path="partitionWhile.B"/>
		<e path="Bool"/>
	</f>
	<c path="stx.Tuple2">
		<c path="partitionWhile.A"/>
		<c path="partitionWhile.A"/>
	</c>
</f></partitionWhile>
		<map public="1" params="A:B:C:D" set="method" line="78" static="1"><f a="src:f">
	<c path="stx.functional.Foldable">
		<c path="map.A"/>
		<c path="map.B"/>
	</c>
	<f a="">
		<c path="map.B"/>
		<c path="map.D"/>
	</f>
	<c path="stx.functional.Foldable">
		<c path="map.C"/>
		<c path="map.D"/>
	</c>
</f></map>
		<mapTo public="1" params="A:B:C:D" set="method" line="82" static="1"><f a="src:dest:f">
	<c path="stx.functional.Foldable">
		<c path="mapTo.A"/>
		<c path="mapTo.B"/>
	</c>
	<c path="stx.functional.Foldable">
		<c path="mapTo.C"/>
		<c path="mapTo.D"/>
	</c>
	<f a="">
		<c path="mapTo.B"/>
		<c path="mapTo.D"/>
	</f>
	<c path="mapTo.C"/>
</f></mapTo>
		<flatMap public="1" params="A:B:C:D" set="method" line="88" static="1"><f a="src:f">
	<c path="stx.functional.Foldable">
		<c path="flatMap.A"/>
		<c path="flatMap.B"/>
	</c>
	<f a="">
		<c path="flatMap.B"/>
		<c path="stx.functional.Foldable">
			<c path="flatMap.C"/>
			<c path="flatMap.D"/>
		</c>
	</f>
	<c path="flatMap.C"/>
</f></flatMap>
		<flatMapTo public="1" params="A:B:C:D" set="method" line="92" static="1"><f a="src:dest:f">
	<c path="stx.functional.Foldable">
		<c path="flatMapTo.A"/>
		<c path="flatMapTo.B"/>
	</c>
	<c path="stx.functional.Foldable">
		<c path="flatMapTo.C"/>
		<c path="flatMapTo.D"/>
	</c>
	<f a="">
		<c path="flatMapTo.B"/>
		<c path="stx.functional.Foldable">
			<c path="flatMapTo.C"/>
			<c path="flatMapTo.D"/>
		</c>
	</f>
	<c path="flatMapTo.C"/>
</f></flatMapTo>
		<take public="1" params="A:B" set="method" line="100" static="1"><f a="foldable:n">
	<c path="stx.functional.Foldable">
		<c path="take.A"/>
		<c path="take.B"/>
	</c>
	<c path="Int"/>
	<c path="take.A"/>
</f></take>
		<takeWhile public="1" params="A:B" set="method" line="106" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="takeWhile.A"/>
		<c path="takeWhile.B"/>
	</c>
	<f a="">
		<c path="takeWhile.B"/>
		<e path="Bool"/>
	</f>
	<c path="takeWhile.A"/>
</f></takeWhile>
		<drop public="1" params="A:B" set="method" line="114" static="1"><f a="foldable:n">
	<c path="stx.functional.Foldable">
		<c path="drop.A"/>
		<c path="drop.B"/>
	</c>
	<c path="Int"/>
	<c path="drop.A"/>
</f></drop>
		<dropWhile public="1" params="A:B" set="method" line="120" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="dropWhile.A"/>
		<c path="dropWhile.B"/>
	</c>
	<f a="">
		<c path="dropWhile.B"/>
		<e path="Bool"/>
	</f>
	<c path="dropWhile.A"/>
</f></dropWhile>
		<count public="1" params="A:B" set="method" line="128" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="count.A"/>
		<c path="count.B"/>
	</c>
	<f a="">
		<c path="count.B"/>
		<e path="Bool"/>
	</f>
	<c path="Int"/>
</f></count>
		<countWhile public="1" params="A:B" set="method" line="134" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="countWhile.A"/>
		<c path="countWhile.B"/>
	</c>
	<f a="">
		<c path="countWhile.B"/>
		<e path="Bool"/>
	</f>
	<c path="Int"/>
</f></countWhile>
		<scanl public="1" params="A:B" set="method" line="150" static="1"><f a="foldable:init:f">
	<c path="stx.functional.Foldable">
		<c path="scanl.A"/>
		<c path="scanl.B"/>
	</c>
	<c path="scanl.B"/>
	<f a=":">
		<c path="scanl.B"/>
		<c path="scanl.B"/>
		<c path="scanl.B"/>
	</f>
	<c path="scanl.A"/>
</f></scanl>
		<scanr public="1" params="A:B" set="method" line="161" static="1"><f a="foldable:init:f">
	<c path="stx.functional.Foldable">
		<c path="scanr.A"/>
		<c path="scanr.B"/>
	</c>
	<c path="scanr.B"/>
	<f a=":">
		<c path="scanr.B"/>
		<c path="scanr.B"/>
		<c path="scanr.B"/>
	</f>
	<c path="scanr.A"/>
</f></scanr>
		<scanl1 public="1" params="A:B" set="method" line="174" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="scanl1.A"/>
		<c path="scanl1.B"/>
	</c>
	<f a=":">
		<c path="scanl1.B"/>
		<c path="scanl1.B"/>
		<c path="scanl1.B"/>
	</f>
	<c path="scanl1.A"/>
</f></scanl1>
		<scanr1 public="1" params="A:B" set="method" line="190" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="scanr1.A"/>
		<c path="scanr1.B"/>
	</c>
	<f a=":">
		<c path="scanr1.B"/>
		<c path="scanr1.B"/>
		<c path="scanr1.B"/>
	</f>
	<c path="scanr1.A"/>
</f></scanr1>
		<elements public="1" params="A:B" set="method" line="208" static="1"><f a="foldable">
	<c path="stx.functional.Foldable">
		<c path="elements.A"/>
		<c path="elements.B"/>
	</c>
	<t path="Iterable"><c path="elements.B"/></t>
</f></elements>
		<concat public="1" params="A:B" set="method" line="212" static="1"><f a="foldable:rest">
	<c path="stx.functional.Foldable">
		<c path="concat.A"/>
		<c path="concat.B"/>
	</c>
	<c path="stx.functional.Foldable">
		<c path="concat.A"/>
		<c path="concat.B"/>
	</c>
	<c path="concat.A"/>
</f></concat>
		<append public="1" params="A:B" set="method" line="218" static="1"><f a="foldable:e">
	<c path="stx.functional.Foldable">
		<c path="append.A"/>
		<c path="append.B"/>
	</c>
	<c path="append.B"/>
	<c path="append.A"/>
</f></append>
		<appendAll public="1" params="A:B" set="method" line="222" static="1"><f a="foldable:i">
	<c path="stx.functional.Foldable">
		<c path="appendAll.A"/>
		<c path="appendAll.B"/>
	</c>
	<t path="Iterable"><c path="appendAll.B"/></t>
	<c path="appendAll.A"/>
</f></appendAll>
		<iterator public="1" params="A:B" set="method" line="230" static="1"><f a="foldable">
	<c path="stx.functional.Foldable">
		<c path="iterator.A"/>
		<c path="iterator.B"/>
	</c>
	<t path="Iterator"><c path="iterator.B"/></t>
</f></iterator>
		<isEmpty public="1" params="A:B" set="method" line="234" static="1"><f a="foldable">
	<c path="stx.functional.Foldable">
		<c path="isEmpty.A"/>
		<c path="isEmpty.B"/>
	</c>
	<e path="Bool"/>
</f></isEmpty>
		<foreach public="1" params="A:B" set="method" line="238" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="foreach.A"/>
		<c path="foreach.B"/>
	</c>
	<f a="">
		<c path="foreach.B"/>
		<e path="Void"/>
	</f>
	<c path="stx.functional.Foldable">
		<c path="foreach.A"/>
		<c path="foreach.B"/>
	</c>
</f></foreach>
		<find public="1" params="A:B" set="method" line="244" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="find.A"/>
		<c path="find.B"/>
	</c>
	<f a="">
		<c path="find.B"/>
		<e path="Bool"/>
	</f>
	<e path="stx.Option"><c path="find.B"/></e>
</f></find>
		<forAll public="1" params="A:B" set="method" line="254" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="forAll.A"/>
		<c path="forAll.B"/>
	</c>
	<f a="">
		<c path="forAll.B"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></forAll>
		<forAny public="1" params="A:B" set="method" line="263" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="forAny.A"/>
		<c path="forAny.B"/>
	</c>
	<f a="">
		<c path="forAny.B"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></forAny>
		<exists public="1" params="A:B" set="method" line="272" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="exists.A"/>
		<c path="exists.B"/>
	</c>
	<f a="">
		<c path="exists.B"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></exists>
		<existsP public="1" params="A:B" set="method" line="279" static="1"><f a="foldable:ref:f">
	<c path="stx.functional.Foldable">
		<c path="existsP.A"/>
		<c path="existsP.B"/>
	</c>
	<c path="existsP.B"/>
	<f a=":">
		<c path="existsP.B"/>
		<c path="existsP.B"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></existsP>
		<contains public="1" params="A:B" set="method" line="291" static="1"><f a="foldable:member">
	<c path="stx.functional.Foldable">
		<c path="contains.A"/>
		<c path="contains.B"/>
	</c>
	<c path="contains.B"/>
	<e path="Bool"/>
</f></contains>
		<nubBy public="1" params="A:B" set="method" line="295" static="1"><f a="foldable:f">
	<c path="stx.functional.Foldable">
		<c path="nubBy.A"/>
		<c path="nubBy.B"/>
	</c>
	<f a=":">
		<c path="nubBy.B"/>
		<c path="nubBy.B"/>
		<e path="Bool"/>
	</f>
	<c path="nubBy.A"/>
</f></nubBy>
		<nub public="1" params="A:B" set="method" line="306" static="1"><f a="foldable">
	<c path="stx.functional.Foldable">
		<c path="nub.A"/>
		<c path="nub.B"/>
	</c>
	<c path="nub.A"/>
</f></nub>
		<intersectBy public="1" params="A:B" set="method" line="312" static="1"><f a="foldable1:foldable2:f">
	<c path="stx.functional.Foldable">
		<c path="intersectBy.A"/>
		<c path="intersectBy.B"/>
	</c>
	<c path="stx.functional.Foldable">
		<c path="intersectBy.A"/>
		<c path="intersectBy.B"/>
	</c>
	<f a=":">
		<c path="intersectBy.B"/>
		<c path="intersectBy.B"/>
		<e path="Bool"/>
	</f>
	<c path="intersectBy.A"/>
</f></intersectBy>
		<intersect public="1" params="A:B" set="method" line="318" static="1"><f a="foldable1:foldable2">
	<c path="stx.functional.Foldable">
		<c path="intersect.A"/>
		<c path="intersect.B"/>
	</c>
	<c path="stx.functional.Foldable">
		<c path="intersect.A"/>
		<c path="intersect.B"/>
	</c>
	<c path="intersect.A"/>
</f></intersect>
		<mkString public="1" params="A:B" set="method" line="324" static="1"><f a="foldable:?sep:?show">
	<c path="stx.functional.Foldable">
		<c path="mkString.A"/>
		<c path="mkString.B"/>
	</c>
	<c path="String"/>
	<f a="">
		<c path="mkString.B"/>
		<c path="String"/>
	</f>
	<c path="String"/>
</f></mkString>
		<toArray public="1" params="A:B" set="method" line="335" static="1"><f a="foldable">
	<c path="stx.functional.Foldable">
		<c path="toArray.A"/>
		<c path="toArray.B"/>
	</c>
	<c path="Array"><c path="toArray.B"/></c>
</f></toArray>
	</class>
	<typedef path="stx.functional.PartialFunction" params="A:Z" file="src/main/haxe/stx/functional/PartialFunction.hx"><c path="stx.functional.PartialFunction1">
	<c path="stx.functional.PartialFunction.A"/>
	<c path="stx.functional.PartialFunction.Z"/>
</c></typedef>
	<class path="stx.functional.PartialFunction2" params="A:B:Z" file="src/main/haxe/stx/functional/PartialFunction.hx" module="stx.functional.PartialFunction" interface="1">
		<isDefinedAt public="1" set="method"><f a="a:b">
	<c path="stx.functional.PartialFunction2.A"/>
	<c path="stx.functional.PartialFunction2.B"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method"><f a="that">
	<c path="stx.functional.PartialFunction2">
		<c path="stx.functional.PartialFunction2.A"/>
		<c path="stx.functional.PartialFunction2.B"/>
		<c path="stx.functional.PartialFunction2.Z"/>
	</c>
	<c path="stx.functional.PartialFunction2">
		<c path="stx.functional.PartialFunction2.A"/>
		<c path="stx.functional.PartialFunction2.B"/>
		<c path="stx.functional.PartialFunction2.Z"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method"><f a="f">
	<f a=":">
		<c path="stx.functional.PartialFunction2.A"/>
		<c path="stx.functional.PartialFunction2.B"/>
		<c path="stx.functional.PartialFunction2.Z"/>
	</f>
	<c path="stx.functional.PartialFunction2">
		<c path="stx.functional.PartialFunction2.A"/>
		<c path="stx.functional.PartialFunction2.B"/>
		<c path="stx.functional.PartialFunction2.Z"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method"><f a="z">
	<t path="stx.Thunk"><c path="stx.functional.PartialFunction2.Z"/></t>
	<c path="stx.functional.PartialFunction2">
		<c path="stx.functional.PartialFunction2.A"/>
		<c path="stx.functional.PartialFunction2.B"/>
		<c path="stx.functional.PartialFunction2.Z"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method"><f a="a:b">
	<c path="stx.functional.PartialFunction2.A"/>
	<c path="stx.functional.PartialFunction2.B"/>
	<c path="stx.functional.PartialFunction2.Z"/>
</f></call>
		<toFunction public="1" set="method"><f a=""><f a=":">
	<c path="stx.functional.PartialFunction2.A"/>
	<c path="stx.functional.PartialFunction2.B"/>
	<e path="stx.Option"><c path="stx.functional.PartialFunction2.Z"/></e>
</f></f></toFunction>
	</class>
	<class path="stx.functional.PartialFunction3" params="A:B:C:Z" file="src/main/haxe/stx/functional/PartialFunction.hx" module="stx.functional.PartialFunction" interface="1">
		<isDefinedAt public="1" set="method"><f a="a:b:c">
	<c path="stx.functional.PartialFunction3.A"/>
	<c path="stx.functional.PartialFunction3.B"/>
	<c path="stx.functional.PartialFunction3.C"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method"><f a="that">
	<c path="stx.functional.PartialFunction3">
		<c path="stx.functional.PartialFunction3.A"/>
		<c path="stx.functional.PartialFunction3.B"/>
		<c path="stx.functional.PartialFunction3.C"/>
		<c path="stx.functional.PartialFunction3.Z"/>
	</c>
	<c path="stx.functional.PartialFunction3">
		<c path="stx.functional.PartialFunction3.A"/>
		<c path="stx.functional.PartialFunction3.B"/>
		<c path="stx.functional.PartialFunction3.C"/>
		<c path="stx.functional.PartialFunction3.Z"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method"><f a="f">
	<f a="::">
		<c path="stx.functional.PartialFunction3.A"/>
		<c path="stx.functional.PartialFunction3.B"/>
		<c path="stx.functional.PartialFunction3.C"/>
		<c path="stx.functional.PartialFunction3.Z"/>
	</f>
	<c path="stx.functional.PartialFunction3">
		<c path="stx.functional.PartialFunction3.A"/>
		<c path="stx.functional.PartialFunction3.B"/>
		<c path="stx.functional.PartialFunction3.C"/>
		<c path="stx.functional.PartialFunction3.Z"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method"><f a="z">
	<t path="stx.Thunk"><c path="stx.functional.PartialFunction3.Z"/></t>
	<c path="stx.functional.PartialFunction3">
		<c path="stx.functional.PartialFunction3.A"/>
		<c path="stx.functional.PartialFunction3.B"/>
		<c path="stx.functional.PartialFunction3.C"/>
		<c path="stx.functional.PartialFunction3.Z"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method"><f a="a:b:c">
	<c path="stx.functional.PartialFunction3.A"/>
	<c path="stx.functional.PartialFunction3.B"/>
	<c path="stx.functional.PartialFunction3.C"/>
	<c path="stx.functional.PartialFunction3.Z"/>
</f></call>
		<toFunction public="1" set="method"><f a=""><f a="::">
	<c path="stx.functional.PartialFunction3.A"/>
	<c path="stx.functional.PartialFunction3.B"/>
	<c path="stx.functional.PartialFunction3.C"/>
	<e path="stx.Option"><c path="stx.functional.PartialFunction3.Z"/></e>
</f></f></toFunction>
	</class>
	<class path="stx.functional.PartialFunction4" params="A:B:C:D:Z" file="src/main/haxe/stx/functional/PartialFunction.hx" module="stx.functional.PartialFunction" interface="1">
		<isDefinedAt public="1" set="method"><f a="a:b:c:d">
	<c path="stx.functional.PartialFunction4.A"/>
	<c path="stx.functional.PartialFunction4.B"/>
	<c path="stx.functional.PartialFunction4.C"/>
	<c path="stx.functional.PartialFunction4.D"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method"><f a="that">
	<c path="stx.functional.PartialFunction4">
		<c path="stx.functional.PartialFunction4.A"/>
		<c path="stx.functional.PartialFunction4.B"/>
		<c path="stx.functional.PartialFunction4.C"/>
		<c path="stx.functional.PartialFunction4.D"/>
		<c path="stx.functional.PartialFunction4.Z"/>
	</c>
	<c path="stx.functional.PartialFunction4">
		<c path="stx.functional.PartialFunction4.A"/>
		<c path="stx.functional.PartialFunction4.B"/>
		<c path="stx.functional.PartialFunction4.C"/>
		<c path="stx.functional.PartialFunction4.D"/>
		<c path="stx.functional.PartialFunction4.Z"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method"><f a="f">
	<f a=":::">
		<c path="stx.functional.PartialFunction4.A"/>
		<c path="stx.functional.PartialFunction4.B"/>
		<c path="stx.functional.PartialFunction4.C"/>
		<c path="stx.functional.PartialFunction4.D"/>
		<c path="stx.functional.PartialFunction4.Z"/>
	</f>
	<c path="stx.functional.PartialFunction4">
		<c path="stx.functional.PartialFunction4.A"/>
		<c path="stx.functional.PartialFunction4.B"/>
		<c path="stx.functional.PartialFunction4.C"/>
		<c path="stx.functional.PartialFunction4.D"/>
		<c path="stx.functional.PartialFunction4.Z"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method"><f a="z">
	<t path="stx.Thunk"><c path="stx.functional.PartialFunction4.Z"/></t>
	<c path="stx.functional.PartialFunction4">
		<c path="stx.functional.PartialFunction4.A"/>
		<c path="stx.functional.PartialFunction4.B"/>
		<c path="stx.functional.PartialFunction4.C"/>
		<c path="stx.functional.PartialFunction4.D"/>
		<c path="stx.functional.PartialFunction4.Z"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method"><f a="a:b:c:d">
	<c path="stx.functional.PartialFunction4.A"/>
	<c path="stx.functional.PartialFunction4.B"/>
	<c path="stx.functional.PartialFunction4.C"/>
	<c path="stx.functional.PartialFunction4.D"/>
	<c path="stx.functional.PartialFunction4.Z"/>
</f></call>
		<toFunction public="1" set="method"><f a=""><f a=":::">
	<c path="stx.functional.PartialFunction4.A"/>
	<c path="stx.functional.PartialFunction4.B"/>
	<c path="stx.functional.PartialFunction4.C"/>
	<c path="stx.functional.PartialFunction4.D"/>
	<e path="stx.Option"><c path="stx.functional.PartialFunction4.Z"/></e>
</f></f></toFunction>
	</class>
	<class path="stx.functional.PartialFunction5" params="A:B:C:D:E:Z" file="src/main/haxe/stx/functional/PartialFunction.hx" module="stx.functional.PartialFunction" interface="1">
		<isDefinedAt public="1" set="method"><f a="a:b:c:d:e">
	<c path="stx.functional.PartialFunction5.A"/>
	<c path="stx.functional.PartialFunction5.B"/>
	<c path="stx.functional.PartialFunction5.C"/>
	<c path="stx.functional.PartialFunction5.D"/>
	<c path="stx.functional.PartialFunction5.E"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method"><f a="that">
	<c path="stx.functional.PartialFunction5">
		<c path="stx.functional.PartialFunction5.A"/>
		<c path="stx.functional.PartialFunction5.B"/>
		<c path="stx.functional.PartialFunction5.C"/>
		<c path="stx.functional.PartialFunction5.D"/>
		<c path="stx.functional.PartialFunction5.E"/>
		<c path="stx.functional.PartialFunction5.Z"/>
	</c>
	<c path="stx.functional.PartialFunction5">
		<c path="stx.functional.PartialFunction5.A"/>
		<c path="stx.functional.PartialFunction5.B"/>
		<c path="stx.functional.PartialFunction5.C"/>
		<c path="stx.functional.PartialFunction5.D"/>
		<c path="stx.functional.PartialFunction5.E"/>
		<c path="stx.functional.PartialFunction5.Z"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method"><f a="f">
	<f a="::::">
		<c path="stx.functional.PartialFunction5.A"/>
		<c path="stx.functional.PartialFunction5.B"/>
		<c path="stx.functional.PartialFunction5.C"/>
		<c path="stx.functional.PartialFunction5.D"/>
		<c path="stx.functional.PartialFunction5.E"/>
		<c path="stx.functional.PartialFunction5.Z"/>
	</f>
	<c path="stx.functional.PartialFunction5">
		<c path="stx.functional.PartialFunction5.A"/>
		<c path="stx.functional.PartialFunction5.B"/>
		<c path="stx.functional.PartialFunction5.C"/>
		<c path="stx.functional.PartialFunction5.D"/>
		<c path="stx.functional.PartialFunction5.E"/>
		<c path="stx.functional.PartialFunction5.Z"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method"><f a="z">
	<t path="stx.Thunk"><c path="stx.functional.PartialFunction5.Z"/></t>
	<c path="stx.functional.PartialFunction5">
		<c path="stx.functional.PartialFunction5.A"/>
		<c path="stx.functional.PartialFunction5.B"/>
		<c path="stx.functional.PartialFunction5.C"/>
		<c path="stx.functional.PartialFunction5.D"/>
		<c path="stx.functional.PartialFunction5.E"/>
		<c path="stx.functional.PartialFunction5.Z"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method"><f a="a:b:c:d:e">
	<c path="stx.functional.PartialFunction5.A"/>
	<c path="stx.functional.PartialFunction5.B"/>
	<c path="stx.functional.PartialFunction5.C"/>
	<c path="stx.functional.PartialFunction5.D"/>
	<c path="stx.functional.PartialFunction5.E"/>
	<c path="stx.functional.PartialFunction5.Z"/>
</f></call>
		<toFunction public="1" set="method"><f a=""><f a="::::">
	<c path="stx.functional.PartialFunction5.A"/>
	<c path="stx.functional.PartialFunction5.B"/>
	<c path="stx.functional.PartialFunction5.C"/>
	<c path="stx.functional.PartialFunction5.D"/>
	<c path="stx.functional.PartialFunction5.E"/>
	<e path="stx.Option"><c path="stx.functional.PartialFunction5.Z"/></e>
</f></f></toFunction>
	</class>
	<class path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl" params="A:Z" file="src/main/haxe/stx/functional/PartialFunctionExtensions.hx" private="1" module="stx.functional.PartialFunctionExtensions">
		<implements path="stx.functional.PartialFunction1">
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/>
		</implements>
		<create public="1" params="A:Z" set="method" line="28" static="1"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a="">
		<c path="create.A"/>
		<e path="Bool"/>
	</f>
	<f a="">
		<c path="create.A"/>
		<c path="create.Z"/>
	</f>
</c></c>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl">
		<c path="create.A"/>
		<c path="create.Z"/>
	</c>
</f></create>
		<_def><c path="Array"><c path="stx.Tuple2">
	<f a="">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
		<e path="Bool"/>
	</f>
	<f a="">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/>
	</f>
</c></c></_def>
		<isDefinedAt public="1" set="method" line="36"><f a="a">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method" line="44"><f a="that">
	<c path="stx.functional.PartialFunction1">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/>
	</c>
	<c path="stx.functional.PartialFunction1">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method" line="50"><f a="f">
	<f a="">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/>
	</f>
	<c path="stx.functional.PartialFunction1">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method" line="56"><f a="z">
	<t path="stx.Thunk"><c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/></t>
	<c path="stx.functional.PartialFunction1">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method" line="62"><f a="a">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/>
</f></call>
		<toFunction public="1" set="method" line="70"><f a=""><f a="">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
	<e path="stx.Option"><c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/></e>
</f></f></toFunction>
		<new set="method" line="32"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a="">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
		<e path="Bool"/>
	</f>
	<f a="">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl.Z"/>
	</f>
</c></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.functional.PartialFunction1ImplExtensions" params="" file="src/main/haxe/stx/functional/PartialFunctionExtensions.hx" module="stx.functional.PartialFunctionExtensions"><toPartialFunction public="1" params="A:Z" set="method" line="81" static="1"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a="">
		<c path="toPartialFunction.A"/>
		<e path="Bool"/>
	</f>
	<f a="">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.Z"/>
	</f>
</c></c>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction1Impl">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.Z"/>
	</c>
</f></toPartialFunction></class>
	<class path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl" params="A:B:Z" file="src/main/haxe/stx/functional/PartialFunctionExtensions.hx" private="1" module="stx.functional.PartialFunctionExtensions">
		<implements path="stx.functional.PartialFunction2">
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/>
		</implements>
		<create public="1" params="A:B:Z" set="method" line="89" static="1"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a=":">
		<c path="create.A"/>
		<c path="create.B"/>
		<e path="Bool"/>
	</f>
	<f a=":">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.Z"/>
	</f>
</c></c>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.Z"/>
	</c>
</f></create>
		<_def><c path="Array"><c path="stx.Tuple2">
	<f a=":">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
		<e path="Bool"/>
	</f>
	<f a=":">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/>
	</f>
</c></c></_def>
		<isDefinedAt public="1" set="method" line="97"><f a="a:b">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method" line="105"><f a="that">
	<c path="stx.functional.PartialFunction2">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/>
	</c>
	<c path="stx.functional.PartialFunction2">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method" line="111"><f a="f">
	<f a=":">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/>
	</f>
	<c path="stx.functional.PartialFunction2">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method" line="117"><f a="z">
	<t path="stx.Thunk"><c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/></t>
	<c path="stx.functional.PartialFunction2">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method" line="123"><f a="a:b">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/>
</f></call>
		<toFunction public="1" set="method" line="131"><f a=""><f a=":">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
	<e path="stx.Option"><c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/></e>
</f></f></toFunction>
		<new set="method" line="93"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a=":">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
		<e path="Bool"/>
	</f>
	<f a=":">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl.Z"/>
	</f>
</c></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.functional.PartialFunction2ImplExtensions" params="" file="src/main/haxe/stx/functional/PartialFunctionExtensions.hx" module="stx.functional.PartialFunctionExtensions"><toPartialFunction public="1" params="A:B:Z" set="method" line="142" static="1"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a=":">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<e path="Bool"/>
	</f>
	<f a=":">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.Z"/>
	</f>
</c></c>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction2Impl">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.Z"/>
	</c>
</f></toPartialFunction></class>
	<class path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl" params="A:B:C:Z" file="src/main/haxe/stx/functional/PartialFunctionExtensions.hx" private="1" module="stx.functional.PartialFunctionExtensions">
		<implements path="stx.functional.PartialFunction3">
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/>
		</implements>
		<create public="1" params="A:B:C:Z" set="method" line="150" static="1"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a="::">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.C"/>
		<e path="Bool"/>
	</f>
	<f a="::">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.C"/>
		<c path="create.Z"/>
	</f>
</c></c>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.C"/>
		<c path="create.Z"/>
	</c>
</f></create>
		<_def><c path="Array"><c path="stx.Tuple2">
	<f a="::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
		<e path="Bool"/>
	</f>
	<f a="::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/>
	</f>
</c></c></_def>
		<isDefinedAt public="1" set="method" line="158"><f a="a:b:c">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method" line="166"><f a="that">
	<c path="stx.functional.PartialFunction3">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/>
	</c>
	<c path="stx.functional.PartialFunction3">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method" line="172"><f a="f">
	<f a="::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/>
	</f>
	<c path="stx.functional.PartialFunction3">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method" line="178"><f a="z">
	<t path="stx.Thunk"><c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/></t>
	<c path="stx.functional.PartialFunction3">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method" line="184"><f a="a:b:c">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/>
</f></call>
		<toFunction public="1" set="method" line="192"><f a=""><f a="::">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
	<e path="stx.Option"><c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/></e>
</f></f></toFunction>
		<new set="method" line="154"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a="::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
		<e path="Bool"/>
	</f>
	<f a="::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl.Z"/>
	</f>
</c></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.functional.PartialFunction3ImplExtensions" params="" file="src/main/haxe/stx/functional/PartialFunctionExtensions.hx" module="stx.functional.PartialFunctionExtensions"><toPartialFunction public="1" params="A:B:C:Z" set="method" line="203" static="1"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a="::">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.C"/>
		<e path="Bool"/>
	</f>
	<f a="::">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.C"/>
		<c path="toPartialFunction.Z"/>
	</f>
</c></c>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction3Impl">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.C"/>
		<c path="toPartialFunction.Z"/>
	</c>
</f></toPartialFunction></class>
	<class path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl" params="A:B:C:D:Z" file="src/main/haxe/stx/functional/PartialFunctionExtensions.hx" private="1" module="stx.functional.PartialFunctionExtensions">
		<implements path="stx.functional.PartialFunction4">
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/>
		</implements>
		<create public="1" params="A:B:C:D:Z" set="method" line="211" static="1"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a=":::">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.C"/>
		<c path="create.D"/>
		<e path="Bool"/>
	</f>
	<f a=":::">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.C"/>
		<c path="create.D"/>
		<c path="create.Z"/>
	</f>
</c></c>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.C"/>
		<c path="create.D"/>
		<c path="create.Z"/>
	</c>
</f></create>
		<_def><c path="Array"><c path="stx.Tuple2">
	<f a=":::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
		<e path="Bool"/>
	</f>
	<f a=":::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/>
	</f>
</c></c></_def>
		<isDefinedAt public="1" set="method" line="219"><f a="a:b:c:d">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method" line="227"><f a="that">
	<c path="stx.functional.PartialFunction4">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/>
	</c>
	<c path="stx.functional.PartialFunction4">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method" line="233"><f a="f">
	<f a=":::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/>
	</f>
	<c path="stx.functional.PartialFunction4">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method" line="239"><f a="z">
	<t path="stx.Thunk"><c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/></t>
	<c path="stx.functional.PartialFunction4">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method" line="245"><f a="a:b:c:d">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/>
</f></call>
		<toFunction public="1" set="method" line="253"><f a=""><f a=":::">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
	<e path="stx.Option"><c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/></e>
</f></f></toFunction>
		<new set="method" line="215"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a=":::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
		<e path="Bool"/>
	</f>
	<f a=":::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl.Z"/>
	</f>
</c></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.functional.PartialFunction4ImplExtensions" params="" file="src/main/haxe/stx/functional/PartialFunctionExtensions.hx" module="stx.functional.PartialFunctionExtensions"><toPartialFunction public="1" params="A:B:C:D:Z" set="method" line="264" static="1"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a=":::">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.C"/>
		<c path="toPartialFunction.D"/>
		<e path="Bool"/>
	</f>
	<f a=":::">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.C"/>
		<c path="toPartialFunction.D"/>
		<c path="toPartialFunction.Z"/>
	</f>
</c></c>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction4Impl">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.C"/>
		<c path="toPartialFunction.D"/>
		<c path="toPartialFunction.Z"/>
	</c>
</f></toPartialFunction></class>
	<class path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl" params="A:B:C:D:E:Z" file="src/main/haxe/stx/functional/PartialFunctionExtensions.hx" private="1" module="stx.functional.PartialFunctionExtensions">
		<implements path="stx.functional.PartialFunction5">
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
			<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/>
		</implements>
		<create public="1" params="A:B:C:D:E:Z" set="method" line="272" static="1"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a="::::">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.C"/>
		<c path="create.D"/>
		<c path="create.E"/>
		<e path="Bool"/>
	</f>
	<f a="::::">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.C"/>
		<c path="create.D"/>
		<c path="create.E"/>
		<c path="create.Z"/>
	</f>
</c></c>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl">
		<c path="create.A"/>
		<c path="create.B"/>
		<c path="create.C"/>
		<c path="create.D"/>
		<c path="create.E"/>
		<c path="create.Z"/>
	</c>
</f></create>
		<_def><c path="Array"><c path="stx.Tuple2">
	<f a="::::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
		<e path="Bool"/>
	</f>
	<f a="::::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/>
	</f>
</c></c></_def>
		<isDefinedAt public="1" set="method" line="280"><f a="a:b:c:d:e">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
	<e path="Bool"/>
</f></isDefinedAt>
		<orElse public="1" set="method" line="288"><f a="that">
	<c path="stx.functional.PartialFunction5">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/>
	</c>
	<c path="stx.functional.PartialFunction5">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/>
	</c>
</f></orElse>
		<orAlways public="1" set="method" line="294"><f a="f">
	<f a="::::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/>
	</f>
	<c path="stx.functional.PartialFunction5">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/>
	</c>
</f></orAlways>
		<orAlwaysC public="1" set="method" line="300"><f a="z">
	<t path="stx.Thunk"><c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/></t>
	<c path="stx.functional.PartialFunction5">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/>
	</c>
</f></orAlwaysC>
		<call public="1" set="method" line="306"><f a="a:b:c:d:e">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/>
</f></call>
		<toFunction public="1" set="method" line="314"><f a=""><f a="::::">
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
	<e path="stx.Option"><c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/></e>
</f></f></toFunction>
		<new set="method" line="276"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a="::::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
		<e path="Bool"/>
	</f>
	<f a="::::">
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.A"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.B"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.C"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.D"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.E"/>
		<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl.Z"/>
	</f>
</c></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.functional.PartialFunction5ImplExtensions" params="" file="src/main/haxe/stx/functional/PartialFunctionExtensions.hx" module="stx.functional.PartialFunctionExtensions"><toPartialFunction public="1" params="A:B:C:D:E:Z" set="method" line="325" static="1"><f a="def">
	<c path="Array"><c path="stx.Tuple2">
	<f a="::::">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.C"/>
		<c path="toPartialFunction.D"/>
		<c path="toPartialFunction.E"/>
		<e path="Bool"/>
	</f>
	<f a="::::">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.C"/>
		<c path="toPartialFunction.D"/>
		<c path="toPartialFunction.E"/>
		<c path="toPartialFunction.Z"/>
	</f>
</c></c>
	<c path="stx.functional._PartialFunctionExtensions.PartialFunction5Impl">
		<c path="toPartialFunction.A"/>
		<c path="toPartialFunction.B"/>
		<c path="toPartialFunction.C"/>
		<c path="toPartialFunction.D"/>
		<c path="toPartialFunction.E"/>
		<c path="toPartialFunction.Z"/>
	</c>
</f></toPartialFunction></class>
	<typedef path="stx.functional.Predicate" params="A" file="src/main/haxe/stx/functional/Predicate.hx"><t path="stx.functional.Predicate1"><c path="stx.functional.Predicate.A"/></t></typedef>
	<typedef path="stx.functional.Predicate1" params="A" file="src/main/haxe/stx/functional/Predicate.hx" module="stx.functional.Predicate"><t path="stx.Function">
	<c path="stx.functional.Predicate1.A"/>
	<e path="Bool"/>
</t></typedef>
	<typedef path="stx.functional.Predicate2" params="A:B" file="src/main/haxe/stx/functional/Predicate.hx" module="stx.functional.Predicate"><t path="stx.Function2">
	<c path="stx.functional.Predicate2.A"/>
	<c path="stx.functional.Predicate2.B"/>
	<e path="Bool"/>
</t></typedef>
	<typedef path="stx.functional.Predicate3" params="A:B:C" file="src/main/haxe/stx/functional/Predicate.hx" module="stx.functional.Predicate"><t path="stx.Function3">
	<c path="stx.functional.Predicate3.A"/>
	<c path="stx.functional.Predicate3.B"/>
	<c path="stx.functional.Predicate3.C"/>
	<e path="Bool"/>
</t></typedef>
	<typedef path="stx.functional.Predicate4" params="A:B:C:D" file="src/main/haxe/stx/functional/Predicate.hx" module="stx.functional.Predicate"><t path="stx.Function4">
	<c path="stx.functional.Predicate4.A"/>
	<c path="stx.functional.Predicate4.B"/>
	<c path="stx.functional.Predicate4.C"/>
	<c path="stx.functional.Predicate4.D"/>
	<e path="Bool"/>
</t></typedef>
	<typedef path="stx.functional.Predicate5" params="A:B:C:D:E" file="src/main/haxe/stx/functional/Predicate.hx" module="stx.functional.Predicate"><t path="stx.Function5">
	<c path="stx.functional.Predicate5.A"/>
	<c path="stx.functional.Predicate5.B"/>
	<c path="stx.functional.Predicate5.C"/>
	<c path="stx.functional.Predicate5.D"/>
	<c path="stx.functional.Predicate5.E"/>
	<e path="Bool"/>
</t></typedef>
	<class path="stx.functional.P" params="" file="src/main/haxe/stx/functional/Predicate.hx" module="stx.functional.Predicate">
		<isNull public="1" params="T" set="method" line="32" static="1"><f a=""><t path="stx.functional.Predicate"><c path="isNull.T"/></t></f></isNull>
		<isNotNull public="1" params="T" set="method" line="38" static="1"><f a=""><t path="stx.functional.Predicate"><c path="isNotNull.T"/></t></f></isNotNull>
		<isGreaterThan public="1" set="method" line="44" static="1"><f a="ref">
	<c path="Float"/>
	<t path="stx.functional.Predicate"><c path="Float"/></t>
</f></isGreaterThan>
		<isLessThan public="1" set="method" line="50" static="1"><f a="ref">
	<c path="Float"/>
	<t path="stx.functional.Predicate"><c path="Float"/></t>
</f></isLessThan>
		<isGreaterThanInt public="1" set="method" line="56" static="1"><f a="ref">
	<c path="Int"/>
	<t path="stx.functional.Predicate"><c path="Int"/></t>
</f></isGreaterThanInt>
		<isLessThanInt public="1" set="method" line="62" static="1"><f a="ref">
	<c path="Int"/>
	<t path="stx.functional.Predicate"><c path="Int"/></t>
</f></isLessThanInt>
		<isEqualTo public="1" params="T" set="method" line="68" static="1"><f a="ref:?equal">
	<c path="isEqualTo.T"/>
	<t path="stx.EqualFunction"><c path="isEqualTo.T"/></t>
	<t path="stx.functional.Predicate"><c path="isEqualTo.T"/></t>
</f></isEqualTo>
		<startsWith public="1" set="method" line="76" static="1"><f a="s">
	<c path="String"/>
	<t path="stx.functional.Predicate"><c path="String"/></t>
</f></startsWith>
		<endsWith public="1" set="method" line="82" static="1"><f a="s">
	<c path="String"/>
	<t path="stx.functional.Predicate"><c path="String"/></t>
</f></endsWith>
		<contains public="1" set="method" line="88" static="1"><f a="s">
	<c path="String"/>
	<t path="stx.functional.Predicate"><c path="String"/></t>
</f></contains>
	</class>
	<class path="stx.functional.Predicate1Extensions" params="" file="src/main/haxe/stx/functional/PredicateExtensions.hx" module="stx.functional.PredicateExtensions">
		<and public="1" params="T" set="method" line="25" static="1"><f a="p1:p2">
	<t path="stx.functional.Predicate"><c path="and.T"/></t>
	<t path="stx.functional.Predicate"><c path="and.T"/></t>
	<t path="stx.functional.Predicate"><c path="and.T"/></t>
</f></and>
		<andAll public="1" params="T" set="method" line="31" static="1"><f a="p1:ps">
	<t path="stx.functional.Predicate"><c path="andAll.T"/></t>
	<t path="Iterable"><t path="stx.functional.Predicate"><c path="andAll.T"/></t></t>
	<t path="stx.functional.Predicate"><c path="andAll.T"/></t>
</f></andAll>
		<or public="1" params="T" set="method" line="45" static="1"><f a="p1:p2">
	<t path="stx.functional.Predicate"><c path="or.T"/></t>
	<t path="stx.functional.Predicate"><c path="or.T"/></t>
	<t path="stx.functional.Predicate"><c path="or.T"/></t>
</f></or>
		<orAny public="1" params="T" set="method" line="51" static="1"><f a="p1:ps">
	<t path="stx.functional.Predicate"><c path="orAny.T"/></t>
	<t path="Iterable"><t path="stx.functional.Predicate"><c path="orAny.T"/></t></t>
	<t path="stx.functional.Predicate"><c path="orAny.T"/></t>
</f></orAny>
		<negate public="1" params="T" set="method" line="65" static="1"><f a="p">
	<t path="stx.functional.Predicate"><c path="negate.T"/></t>
	<t path="stx.functional.Predicate"><c path="negate.T"/></t>
</f></negate>
	</class>
	<class path="stx.io.Files" params="" file="src/main/haxe/stx/io/Files.hx"/>
	<typedef path="stx.io.http.HttpResponse" params="T" file="src/main/haxe/stx/io/http/Http.hx" module="stx.io.http.Http"><a>
	<headers><c path="stx.ds.Map">
	<c path="String"/>
	<c path="String"/>
</c></headers>
	<code><e path="stx.net.HttpResponseCode"/></code>
	<body><e path="stx.Option"><c path="stx.io.http.HttpResponse.T"/></e></body>
</a></typedef>
	<class path="stx.io.http.Http" params="T" file="src/main/haxe/stx/io/http/Http.hx" interface="1">
		<get public="1" set="method"><f a="url:?params:?headers">
	<t path="stx.net.Url"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="stx.io.http.Http.T"/></t></c>
</f></get>
		<post public="1" set="method"><f a="url:data:?params:?headers">
	<t path="stx.net.Url"/>
	<c path="stx.io.http.Http.T"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="stx.io.http.Http.T"/></t></c>
</f></post>
		<put public="1" set="method"><f a="url:data:?params:?headers">
	<t path="stx.net.Url"/>
	<c path="stx.io.http.Http.T"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="stx.io.http.Http.T"/></t></c>
</f></put>
		<delete public="1" set="method"><f a="url:?params:?headers">
	<t path="stx.net.Url"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="stx.io.http.Http.T"/></t></c>
</f></delete>
		<custom public="1" set="method"><f a="request:url:data:?params:?headers">
	<c path="String"/>
	<t path="stx.net.Url"/>
	<c path="stx.io.http.Http.T"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="stx.io.http.Http.T"/></t></c>
</f></custom>
		<haxe_doc> An interface for performing HTTP requests - GET, POST, PUT, and DELETE. The
 * interface is generic in the type of the request/response data, because some
 * implementations (e.g. JSONP on the JavaScript target) can only deal with 
 * certain kinds of data.
 </haxe_doc>
	</class>
	<class path="stx.io.http.HttpJValue" params="" file="src/main/haxe/stx/io/http/HttpJValue.hx" interface="1">
		<implements path="stx.io.http.Http"><e path="stx.io.json.JValue"/></implements>
		<__meta__ public="1" line="48" static="1"><d/></__meta__>
	</class>
	<class path="stx.io.http.HttpTransformer" params="S:T" file="src/main/haxe/stx/io/http/HttpTransformer.hx">
		<implements path="stx.io.http.Http"><c path="stx.io.http.HttpTransformer.T"/></implements>
		<http><c path="stx.io.http.Http"><c path="stx.io.http.HttpTransformer.S"/></c></http>
		<encoder><f a="">
	<c path="stx.io.http.HttpTransformer.T"/>
	<c path="stx.io.http.HttpTransformer.S"/>
</f></encoder>
		<decoder><f a="">
	<c path="stx.io.http.HttpTransformer.S"/>
	<c path="stx.io.http.HttpTransformer.T"/>
</f></decoder>
		<mimeType><c path="String"/></mimeType>
		<get public="1" set="method" line="40"><f a="url:?params:?headers">
	<t path="stx.net.Url"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="stx.io.http.HttpTransformer.T"/></t></c>
</f></get>
		<post public="1" set="method" line="44"><f a="url:data:?params:?headers">
	<t path="stx.net.Url"/>
	<c path="stx.io.http.HttpTransformer.T"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="stx.io.http.HttpTransformer.T"/></t></c>
</f></post>
		<put public="1" set="method" line="48"><f a="url:data:?params:?headers">
	<t path="stx.net.Url"/>
	<c path="stx.io.http.HttpTransformer.T"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="stx.io.http.HttpTransformer.T"/></t></c>
</f></put>
		<delete public="1" set="method" line="52"><f a="url:?params:?headers">
	<t path="stx.net.Url"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="stx.io.http.HttpTransformer.T"/></t></c>
</f></delete>
		<custom public="1" set="method" line="56"><f a="method:url:data:?params:?headers">
	<c path="String"/>
	<t path="stx.net.Url"/>
	<c path="stx.io.http.HttpTransformer.T"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="stx.io.http.HttpTransformer.T"/></t></c>
</f></custom>
		<transformResponse public="1" set="method" line="60"><f a="r">
	<t path="stx.io.http.HttpResponse"><c path="stx.io.http.HttpTransformer.S"/></t>
	<t path="stx.io.http.HttpResponse"><c path="stx.io.http.HttpTransformer.T"/></t>
</f></transformResponse>
		<addMimeType set="method" line="68"><f a="map_">
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
</f></addMimeType>
		<new public="1" set="method" line="33"><f a="http:encoder:decoder:mimeType">
	<c path="stx.io.http.Http"><c path="stx.io.http.HttpTransformer.S"/></c>
	<f a="">
		<c path="stx.io.http.HttpTransformer.T"/>
		<c path="stx.io.http.HttpTransformer.S"/>
	</f>
	<f a="">
		<c path="stx.io.http.HttpTransformer.S"/>
		<c path="stx.io.http.HttpTransformer.T"/>
	</f>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.io.http.HttpJValueAsync" params="" file="src/main/haxe/stx/io/http/HttpJValue.hx" module="stx.io.http.HttpJValue">
		<extends path="stx.io.http.HttpTransformer">
			<c path="String"/>
			<e path="stx.io.json.JValue"/>
		</extends>
		<implements path="stx.io.http.HttpJValue"/>
		<new public="1" set="method" line="54"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.io.http.HttpJValueJsonp" params="" file="src/main/haxe/stx/io/http/HttpJValue.hx" module="stx.io.http.HttpJValue">
		<implements path="stx.io.http.HttpJValue"/>
		<Responders line="60" static="1"><a/></Responders>
		<RequestMod line="61" static="1"><c path="Int"/></RequestMod>
		<RequestCount line="62" static="1"><c path="Int"/></RequestCount>
		<callbackParameterName><c path="String"/></callbackParameterName>
		<get public="1" set="method" line="70"><f a="url_:?params_:?headers">
	<t path="stx.net.Url"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><e path="stx.io.json.JValue"/></t></c>
</f></get>
		<post public="1" set="method" line="129"><f a="url:data:?params:?headers">
	<t path="stx.net.Url"/>
	<e path="stx.io.json.JValue"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><e path="stx.io.json.JValue"/></t></c>
</f></post>
		<put public="1" set="method" line="133"><f a="url:data:?params:?headers">
	<t path="stx.net.Url"/>
	<e path="stx.io.json.JValue"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><e path="stx.io.json.JValue"/></t></c>
</f></put>
		<delete public="1" set="method" line="137"><f a="url:?params:?headers">
	<t path="stx.net.Url"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><e path="stx.io.json.JValue"/></t></c>
</f></delete>
		<custom public="1" set="method" line="141"><f a="request:url:data:?params:?headers">
	<c path="String"/>
	<t path="stx.net.Url"/>
	<e path="stx.io.json.JValue"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><e path="stx.io.json.JValue"/></t></c>
</f></custom>
		<new public="1" set="method" line="66"><f a="?callbackParameterName">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.io.http.HttpString" params="" file="src/main/haxe/stx/io/http/HttpString.hx" interface="1">
		<implements path="stx.io.http.Http"><c path="String"/></implements>
		<__meta__ public="1" line="42" static="1"><d/></__meta__>
	</class>
	<class path="stx.io.http.HttpStringAsync" params="" file="src/main/haxe/stx/io/http/HttpString.hx" module="stx.io.http.HttpString">
		<implements path="stx.io.http.HttpString"/>
		<get public="1" set="method" line="50"><f a="url:?params:?headers">
	<t path="stx.net.Url"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="String"/></t></c>
</f></get>
		<post public="1" set="method" line="54"><f a="url:data:?params:?headers">
	<t path="stx.net.Url"/>
	<c path="String"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="String"/></t></c>
</f></post>
		<put public="1" set="method" line="58"><f a="url:data:?params:?headers">
	<t path="stx.net.Url"/>
	<c path="String"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="String"/></t></c>
</f></put>
		<delete public="1" set="method" line="62"><f a="url:?params:?headers">
	<t path="stx.net.Url"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="String"/></t></c>
</f></delete>
		<custom public="1" set="method" line="66"><f a="method:_url:data:?_params:?_headers">
	<c path="String"/>
	<t path="stx.net.Url"/>
	<c path="String"/>
	<t path="stx.net.QueryParameters"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.Future"><t path="stx.io.http.HttpResponse"><c path="String"/></t></c>
</f></custom>
		<makeHeader set="method" line="109"><f a="?_headers:contentType">
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="String"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
</f></makeHeader>
		<new public="1" set="method" line="48"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.io.http.HttpXml" params="" file="src/main/haxe/stx/io/http/HttpXml.hx" interface="1"><implements path="stx.io.http.Http"><c path="Xml"/></implements></class>
	<class path="stx.io.json.CollectionsJValue" params="" file="src/main/haxe/stx/io/json/CollectionsJValue.hx">
		<new public="1" set="method" line="26"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.io.json.SetJValue" params="" file="src/main/haxe/stx/io/json/CollectionsJValue.hx" module="stx.io.json.CollectionsJValue">
		<decompose public="1" params="T" set="method" line="32" static="1"><f a="v">
	<c path="stx.ds.Set"><c path="decompose.T"/></c>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" params="T" set="method" line="36" static="1"><f a="v:e:?order:?equal:?hash:?show">
	<e path="stx.io.json.JValue"/>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.T"/></t>
	<t path="stx.OrderFunction"><c path="extract.T"/></t>
	<t path="stx.EqualFunction"><c path="extract.T"/></t>
	<t path="stx.HashFunction"><c path="extract.T"/></t>
	<t path="stx.ShowFunction"><c path="extract.T"/></t>
	<c path="stx.ds.Set"><c path="extract.T"/></c>
</f></extract>
	</class>
	<class path="stx.io.json.ListJValue" params="" file="src/main/haxe/stx/io/json/CollectionsJValue.hx" module="stx.io.json.CollectionsJValue">
		<decompose public="1" params="T" set="method" line="45" static="1"><f a="l">
	<c path="stx.ds.List"><c path="decompose.T"/></c>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" params="A" set="method" line="49" static="1"><f a="v:e:?tool">
	<e path="stx.io.json.JValue"/>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.A"/></t>
	<t path="stx.CollectionTools"><c path="extract.A"/></t>
	<c path="stx.ds.List"><c path="extract.A"/></c>
</f></extract>
	</class>
	<class path="stx.io.json.MapJValue" params="" file="src/main/haxe/stx/io/json/CollectionsJValue.hx" module="stx.io.json.CollectionsJValue">
		<decompose public="1" params="K:V" set="method" line="58" static="1"><f a="v">
	<c path="stx.ds.Map">
		<c path="decompose.K"/>
		<c path="decompose.V"/>
	</c>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" params="K:V" set="method" line="62" static="1"><f a="v:ke:ve:?korder:?kequal:?khash:?kshow:?vorder:?vequal:?vhash:?vshow">
	<e path="stx.io.json.JValue"/>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.K"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.V"/></t>
	<t path="stx.OrderFunction"><c path="extract.K"/></t>
	<t path="stx.EqualFunction"><c path="extract.K"/></t>
	<t path="stx.HashFunction"><c path="extract.K"/></t>
	<t path="stx.ShowFunction"><c path="extract.K"/></t>
	<t path="stx.OrderFunction"><c path="extract.V"/></t>
	<t path="stx.EqualFunction"><c path="extract.V"/></t>
	<t path="stx.HashFunction"><c path="extract.V"/></t>
	<t path="stx.ShowFunction"><c path="extract.V"/></t>
	<c path="stx.ds.Map">
		<c path="extract.K"/>
		<c path="extract.V"/>
	</c>
</f></extract>
	</class>
	<enum path="stx.io.json.JValue" params="" file="src/main/haxe/stx/io/json/JValue.hx">
		<JString a="v"><c path="String"/></JString>
		<JObject a="v"><c path="Array"><e path="stx.io.json.JValue"/></c></JObject>
		<JNumber a="v"><c path="Float"/></JNumber>
		<JNull/>
		<JField a="k:v">
			<c path="String"/>
			<e path="stx.io.json.JValue"/>
		</JField>
		<JBool a="v"><e path="Bool"/></JBool>
		<JArray a="v"><c path="Array"><e path="stx.io.json.JValue"/></c></JArray>
	</enum>
	<class path="stx.io.json.JValueExtensions" params="" file="src/main/haxe/stx/io/json/JValueExtensions.hx">
		<decompose public="1" set="method" line="36" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" set="method" line="39" static="1"><f a="c:v">
	<c path="Enum"><e path="stx.io.json.JValue"/></c>
	<e path="stx.io.json.JValue"/>
	<e path="stx.io.json.JValue"/>
</f></extract>
		<fold public="1" params="T" set="method" line="42" static="1"><f a="v:initial:f">
	<e path="stx.io.json.JValue"/>
	<c path="fold.T"/>
	<f a=":">
		<c path="fold.T"/>
		<e path="stx.io.json.JValue"/>
		<c path="fold.T"/>
	</f>
	<c path="fold.T"/>
</f></fold>
		<path public="1" set="method" line="50" static="1"><f a="v:s">
	<e path="stx.io.json.JValue"/>
	<c path="String"/>
	<e path="stx.io.json.JValue"/>
</f></path>
		<map public="1" set="method" line="56" static="1"><f a="v:f">
	<e path="stx.io.json.JValue"/>
	<f a="">
		<e path="stx.io.json.JValue"/>
		<e path="stx.io.json.JValue"/>
	</f>
	<e path="stx.io.json.JValue"/>
</f></map>
		<getOption public="1" set="method" line="66" static="1"><f a="v:k">
	<e path="stx.io.json.JValue"/>
	<c path="String"/>
	<e path="stx.Option"><e path="stx.io.json.JValue"/></e>
</f></getOption>
		<get public="1" set="method" line="77" static="1"><f a="v:k">
	<e path="stx.io.json.JValue"/>
	<c path="String"/>
	<e path="stx.io.json.JValue"/>
</f></get>
		<getOrElse public="1" set="method" line="83" static="1"><f a="v:k:def">
	<e path="stx.io.json.JValue"/>
	<c path="String"/>
	<t path="stx.Thunk"><e path="stx.io.json.JValue"/></t>
	<e path="stx.io.json.JValue"/>
</f></getOrElse>
		<extractString public="1" set="method" line="89" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<c path="String"/>
</f></extractString>
		<extractNumber public="1" set="method" line="96" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<c path="Float"/>
</f></extractNumber>
		<extractBool public="1" set="method" line="103" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<e path="Bool"/>
</f></extractBool>
		<extractKey public="1" set="method" line="110" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<c path="String"/>
</f></extractKey>
		<extractValue public="1" set="method" line="113" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<e path="stx.io.json.JValue"/>
</f></extractValue>
		<extractField public="1" set="method" line="116" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<c path="stx.Tuple2">
		<c path="String"/>
		<e path="stx.io.json.JValue"/>
	</c>
</f></extractField>
		<extractHash public="1" set="method" line="122" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<c path="Hash"><e path="stx.io.json.JValue"/></c>
</f></extractHash>
		<extractFields public="1" set="method" line="138" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<c path="Array"><c path="stx.Tuple2">
	<c path="String"/>
	<e path="stx.io.json.JValue"/>
</c></c>
</f></extractFields>
		<extractArray public="1" set="method" line="147" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<c path="Array"><e path="stx.io.json.JValue"/></c>
</f></extractArray>
	</class>
	<class path="stx.io.json.OptionJValue" params="" file="src/main/haxe/stx/io/json/JValueExtensions.hx" module="stx.io.json.JValueExtensions">
		<decompose public="1" params="T" set="method" line="158" static="1"><f a="v">
	<e path="stx.Option"><c path="decompose.T"/></e>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" params="T" set="method" line="161" static="1"><f a="c:v:e">
	<c path="Enum"><e path="stx.Option"><d/></e></c>
	<e path="stx.io.json.JValue"/>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.T"/></t>
	<e path="stx.Option"><c path="extract.T"/></e>
</f></extract>
	</class>
	<class path="stx.io.json.AbstractProductJValue" params="" file="src/main/haxe/stx/io/json/JValueExtensions.hx" module="stx.io.json.JValueExtensions"><productDecompose public="1" set="method" line="177" static="1"><f a="t">
	<c path="stx.Product"/>
	<e path="stx.io.json.JValue"/>
</f></productDecompose></class>
	<class path="stx.io.json.Tuple2JValue" params="" file="src/main/haxe/stx/io/json/JValueExtensions.hx" module="stx.io.json.JValueExtensions">
		<extract public="1" params="A:B" set="method" line="182" static="1"><f a="v:e1:e2">
	<e path="stx.io.json.JValue"/>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.A"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.B"/></t>
	<c path="stx.Tuple2">
		<c path="extract.A"/>
		<c path="extract.B"/>
	</c>
</f></extract>
		<decompose public="1" set="method" line="189" static="1"><f a="t">
	<c path="stx.Tuple2">
		<d/>
		<d/>
	</c>
	<e path="stx.io.json.JValue"/>
</f></decompose>
	</class>
	<class path="stx.io.json.Tuple3JValue" params="" file="src/main/haxe/stx/io/json/JValueExtensions.hx" module="stx.io.json.JValueExtensions">
		<decompose public="1" set="method" line="194" static="1"><f a="t">
	<c path="stx.Tuple3">
		<d/>
		<d/>
		<d/>
	</c>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" params="A:B:C" set="method" line="197" static="1"><f a="v:e1:e2:e3">
	<e path="stx.io.json.JValue"/>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.A"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.B"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.C"/></t>
	<c path="stx.Tuple3">
		<c path="extract.A"/>
		<c path="extract.B"/>
		<c path="extract.C"/>
	</c>
</f></extract>
	</class>
	<class path="stx.io.json.Tuple4JValue" params="" file="src/main/haxe/stx/io/json/JValueExtensions.hx" module="stx.io.json.JValueExtensions">
		<decompose public="1" set="method" line="206" static="1"><f a="t">
	<c path="stx.Tuple4">
		<d/>
		<d/>
		<d/>
		<d/>
	</c>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" params="A:B:C:D" set="method" line="209" static="1"><f a="v:e1:e2:e3:e4">
	<e path="stx.io.json.JValue"/>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.A"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.B"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.C"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.D"/></t>
	<c path="stx.Tuple4">
		<c path="extract.A"/>
		<c path="extract.B"/>
		<c path="extract.C"/>
		<c path="extract.D"/>
	</c>
</f></extract>
	</class>
	<class path="stx.io.json.Tuple5JValue" params="" file="src/main/haxe/stx/io/json/JValueExtensions.hx" module="stx.io.json.JValueExtensions">
		<decompose public="1" set="method" line="218" static="1"><f a="t">
	<c path="stx.Tuple5">
		<d/>
		<d/>
		<d/>
		<d/>
		<d/>
	</c>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" params="A:B:C:D:E" set="method" line="221" static="1"><f a="v:e1:e2:e3:e4:e5">
	<e path="stx.io.json.JValue"/>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.A"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.B"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.C"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.D"/></t>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.E"/></t>
	<c path="stx.Tuple5">
		<c path="extract.A"/>
		<c path="extract.B"/>
		<c path="extract.C"/>
		<c path="extract.D"/>
		<c path="extract.E"/>
	</c>
</f></extract>
	</class>
	<class path="stx.io.json.Json" params="" file="src/main/haxe/stx/io/json/Json.hx">
		<encodeObject public="1" line="30" static="1"><t path="stx.Function1">
	<unknown/>
	<c path="String"/>
</t></encodeObject>
		<decodeObject public="1" line="31" static="1"><t path="stx.Function1">
	<c path="String"/>
	<unknown/>
</t></decodeObject>
		<toObject public="1" set="method" line="33" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<d/>
</f></toObject>
		<fromObject public="1" set="method" line="51" static="1"><f a="d">
	<d/>
	<e path="stx.io.json.JValue"/>
</f></fromObject>
		<encode public="1" set="method" line="69" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="88" static="1"><f a="s">
	<c path="String"/>
	<e path="stx.io.json.JValue"/>
</f></decode>
	</class>
	<class path="stx.io.json.PrimitivesJValue" params="" file="src/main/haxe/stx/io/json/PrimitivesJValue.hx"><haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc></class>
	<class path="stx.io.json.StringJValue" params="" file="src/main/haxe/stx/io/json/PrimitivesJValue.hx" module="stx.io.json.PrimitivesJValue">
		<decompose public="1" set="method" line="27" static="1"><f a="v">
	<c path="String"/>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" set="method" line="30" static="1"><f a="c:val">
	<c path="Class"><c path="String"/></c>
	<e path="stx.io.json.JValue"/>
	<c path="String"/>
</f></extract>
	</class>
	<class path="stx.io.json.BoolJValue" params="" file="src/main/haxe/stx/io/json/PrimitivesJValue.hx" module="stx.io.json.PrimitivesJValue">
		<decompose public="1" set="method" line="41" static="1"><f a="v">
	<e path="Bool"/>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" set="method" line="44" static="1"><f a="c:v">
	<c path="Enum"><e path="Bool"/></c>
	<e path="stx.io.json.JValue"/>
	<e path="Bool"/>
</f></extract>
	</class>
	<class path="stx.io.json.IntJValue" params="" file="src/main/haxe/stx/io/json/PrimitivesJValue.hx" module="stx.io.json.PrimitivesJValue">
		<decompose public="1" set="method" line="55" static="1"><f a="v">
	<c path="Int"/>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" set="method" line="58" static="1"><f a="c:v">
	<c path="Class"><c path="Int"/></c>
	<e path="stx.io.json.JValue"/>
	<c path="Int"/>
</f></extract>
	</class>
	<class path="stx.io.json.FloatJValue" params="" file="src/main/haxe/stx/io/json/PrimitivesJValue.hx" module="stx.io.json.PrimitivesJValue">
		<decompose public="1" set="method" line="68" static="1"><f a="v">
	<c path="Float"/>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" set="method" line="71" static="1"><f a="c:v">
	<c path="Class"><c path="Float"/></c>
	<e path="stx.io.json.JValue"/>
	<c path="Float"/>
</f></extract>
	</class>
	<class path="stx.io.json.DateJValue" params="" file="src/main/haxe/stx/io/json/PrimitivesJValue.hx" module="stx.io.json.PrimitivesJValue">
		<decompose public="1" set="method" line="81" static="1"><f a="v">
	<c path="Date"/>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" set="method" line="84" static="1"><f a="c:v">
	<c path="Class"><c path="Date"/></c>
	<e path="stx.io.json.JValue"/>
	<c path="Date"/>
</f></extract>
	</class>
	<class path="stx.io.json.ObjectJValue" params="" file="src/main/haxe/stx/io/json/PrimitivesJValue.hx" module="stx.io.json.PrimitivesJValue">
		<decompose public="1" set="method" line="94" static="1"><f a="d">
	<d/>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" set="method" line="106" static="1"><f a="v">
	<e path="stx.io.json.JValue"/>
	<d/>
</f></extract>
	</class>
	<class path="stx.io.json.ArrayJValue" params="" file="src/main/haxe/stx/io/json/PrimitivesJValue.hx" module="stx.io.json.PrimitivesJValue">
		<decompose public="1" params="T" set="method" line="125" static="1"><f a="v">
	<c path="Array"><c path="decompose.T"/></c>
	<e path="stx.io.json.JValue"/>
</f></decompose>
		<extract public="1" params="T" set="method" line="134" static="1"><f a="c:v:e">
	<c path="Class"><c path="Array"><d/></c></c>
	<e path="stx.io.json.JValue"/>
	<t path="stx.io.json.JExtractorFunction"><c path="extract.T"/></t>
	<c path="Array"><c path="extract.T"/></c>
</f></extract>
	</class>
	<typedef path="stx.io.json.ExtractorFunction" params="I:O" file="src/main/haxe/stx/io/json/Transcode.hx" module="stx.io.json.Transcode"><t path="stx.Function">
	<c path="stx.io.json.ExtractorFunction.I"/>
	<c path="stx.io.json.ExtractorFunction.O"/>
</t></typedef>
	<typedef path="stx.io.json.DecomposerFunction" params="I:O" file="src/main/haxe/stx/io/json/Transcode.hx" module="stx.io.json.Transcode"><t path="stx.Function">
	<c path="stx.io.json.DecomposerFunction.I"/>
	<c path="stx.io.json.DecomposerFunction.O"/>
</t></typedef>
	<typedef path="stx.io.json.JExtractorFunction" params="T" file="src/main/haxe/stx/io/json/TranscodeJValue.hx" module="stx.io.json.TranscodeJValue">
		<t path="stx.Function">
			<e path="stx.io.json.JValue"/>
			<c path="stx.io.json.JExtractorFunction.T"/>
		</t>
		<haxe_doc>
 * The extractors and decomposers in this file have been created to comply with
 * the serialization requirements of XSchema.
 </haxe_doc>
	</typedef>
	<typedef path="stx.io.json.JDecomposerFunction" params="T" file="src/main/haxe/stx/io/json/TranscodeJValue.hx" module="stx.io.json.TranscodeJValue"><t path="stx.Function">
	<c path="stx.io.json.JDecomposerFunction.T"/>
	<e path="stx.io.json.JValue"/>
</t></typedef>
	<class path="stx.io.json.ExtractorHelpers" params="" file="src/main/haxe/stx/io/json/TranscodeJValueExtensions.hx" module="stx.io.json.TranscodeJValueExtensions"><extractFieldValue public="1" params="T" set="method" line="46" static="1"><f a="j:n:e:def">
	<e path="stx.io.json.JValue"/>
	<c path="String"/>
	<t path="stx.io.json.JExtractorFunction"><c path="extractFieldValue.T"/></t>
	<e path="stx.io.json.JValue"/>
	<c path="extractFieldValue.T"/>
</f></extractFieldValue></class>
	<class path="stx.io.json.MapOps" params="" file="src/main/haxe/stx/io/json/TranscodeJValueExtensions.hx" module="stx.io.json.TranscodeJValueExtensions">
		<stringKeyDecompose public="1" params="V" set="method" line="59" static="1"><f a="v">
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="stringKeyDecompose.V"/>
	</c>
	<e path="stx.io.json.JValue"/>
</f></stringKeyDecompose>
		<stringKeyExtract public="1" params="V" set="method" line="70" static="1"><f a="v:ve:?vorder:?vequal:?vhash:?vshow">
	<e path="stx.io.json.JValue"/>
	<t path="stx.io.json.JExtractorFunction"><c path="stringKeyExtract.V"/></t>
	<t path="stx.OrderFunction"><c path="stringKeyExtract.V"/></t>
	<t path="stx.EqualFunction"><c path="stringKeyExtract.V"/></t>
	<t path="stx.HashFunction"><c path="stringKeyExtract.V"/></t>
	<t path="stx.ShowFunction"><c path="stringKeyExtract.V"/></t>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="stringKeyExtract.V"/>
	</c>
</f></stringKeyExtract>
	</class>
	<class path="stx.io.json.TranscodeJValue" params="" file="src/main/haxe/stx/io/json/TranscodeJValueExtensions.hx" module="stx.io.json.TranscodeJValueExtensions">
		<__meta__ public="1" line="90" static="1"><d/></__meta__>
		<_createDecomposeImpl params="T" set="method" line="91" static="1"><f a="impl">
	<t path="stx.io.json.JDecomposerFunction"><d/></t>
	<f a="v">
		<c path="_createDecomposeImpl.T"/>
		<e path="stx.io.json.JValue"/>
	</f>
</f></_createDecomposeImpl>
		<getDecomposerFor public="1" params="T" set="method" line="102" static="1"><f a="v">
	<e path="ValueType"/>
	<t path="stx.io.json.JDecomposerFunction"><c path="getDecomposerFor.T"/></t>
</f></getDecomposerFor>
		<_createExtractorImpl params="T" set="method" line="161" static="1"><f a="impl">
	<t path="stx.io.json.JExtractorFunction"><d/></t>
	<f a="v">
		<e path="stx.io.json.JValue"/>
		<c path="getExtractorFor.T"/>
	</f>
</f></_createExtractorImpl>
		<getExtractorFor public="1" params="T" set="method" line="163" static="1"><f a="valueType:?args">
	<e path="ValueType"/>
	<c path="Array"><d/></c>
	<t path="stx.io.json.JExtractorFunction"><c path="getExtractorFor.T"/></t>
</f></getExtractorFor>
	</class>
	<typedef path="stx.js.DOMString" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><c path="String"/></typedef>
	<typedef path="stx.js.DOMTimeStamp" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><c path="Int"/></typedef>
	<typedef path="stx.js.DOMObject" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><t path="stx.js.Object"/></typedef>
	<typedef path="stx.js.Object" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><d/></typedef>
	<typedef path="stx.js.DOMUserData" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><d/></typedef>
	<class path="stx.js.DomCollection" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" extern="1"><length public="1" set="null"><c path="Int"/></length></class>
	<typedef path="stx.js.DOMStringMap" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<setter set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setter>
	<getter set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></getter>
	<deleter set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></deleter>
	<creator set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></creator>
</a></typedef>
	<class path="stx.js.DOMTokenList" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" interface="1">
		<length public="1" set="null"><c path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></item>
		<contains public="1" set="method"><f a="token">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></contains>
		<add public="1" set="method"><f a="token">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></add>
		<remove public="1" set="method"><f a="token">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></remove>
		<toggle public="1" set="method"><f a="token">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></toggle>
		<stringifier public="1" set="method"><f a=""><t path="stx.js.DOMString"/></f></stringifier>
		<haxe_dynamic><c path="stx.js.DOMTokenList.T"/></haxe_dynamic>
	</class>
	<class path="stx.js.DOMSettableTokenList" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" interface="1">
		<value public="1"><t path="stx.js.DOMString"/></value>
		<length public="1" set="null"><c path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></item>
		<contains public="1" set="method"><f a="token">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></contains>
		<add public="1" set="method"><f a="token">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></add>
		<remove public="1" set="method"><f a="token">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></remove>
		<toggle public="1" set="method"><f a="token">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></toggle>
		<stringifier public="1" set="method"><f a=""><t path="stx.js.DOMString"/></f></stringifier>
		<haxe_dynamic><c path="stx.js.DOMSettableTokenList.T"/></haxe_dynamic>
	</class>
	<typedef path="stx.js.DOMException" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><code><c path="Int"/></code></a></typedef>
	<class path="stx.js.DOMStringList" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" interface="1">
		<item public="1" set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></item>
		<contains public="1" set="method"><f a="str">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></contains>
		<length public="1" set="null"><c path="Int"/></length>
	</class>
	<class path="stx.js.NameList" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" interface="1">
		<getName public="1" set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></getName>
		<getNamespaceURI public="1" set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></getNamespaceURI>
		<contains public="1" set="method"><f a="str">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></contains>
		<containsNS public="1" set="method"><f a="namespaceURI:name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></containsNS>
		<length public="1" set="null"><c path="Int"/></length>
		<haxe_dynamic><c path="stx.js.NameList.T"/></haxe_dynamic>
	</class>
	<typedef path="stx.js.DOMImplementationSource" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<getDOMImplementationList set="method"><f a="features">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.DOMImplementation"/></c>
</f></getDOMImplementationList>
	<getDOMImplementation set="method"><f a="features">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMImplementation"/>
</f></getDOMImplementation>
</a></typedef>
	<typedef path="stx.js.DOMImplementation" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<hasFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasFeature>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<createDocumentType set="method"><f a="qualifiedName:publicId:systemId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DocumentType"/>
</f></createDocumentType>
	<createDocument set="method"><f a="namespaceURI:qualifiedName:doctype">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DocumentType"/>
	<t path="stx.js.Document"/>
</f></createDocument>
</a></typedef>
	<typedef path="stx.js.EventTarget" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.Node" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<class path="stx.js.NamedNodeMap" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" interface="1">
		<getNamedItem public="1" set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Node"/>
</f></getNamedItem>
		<setNamedItem public="1" set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></setNamedItem>
		<removeNamedItem public="1" set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeNamedItem>
		<item public="1" set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.Node"/>
</f></item>
		<getNamedItemNS public="1" set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Node"/>
</f></getNamedItemNS>
		<setNamedItemNS public="1" set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></setNamedItemNS>
		<removeNamedItemNS public="1" set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Node"/>
</f></removeNamedItemNS>
		<length public="1" set="null"><c path="Int"/></length>
	</class>
	<typedef path="stx.js.CharacterData" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<substringData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></substringData>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceData set="method"><f a="offset:count:arg">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></replaceData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<length set="null"><c path="Int"/></length>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertData set="method"><f a="offset:arg">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertData>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<deleteData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></deleteData>
	<data><t path="stx.js.DOMString"/></data>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendData set="method"><f a="arg">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></appendData>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.HTMLAttr" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<value set="null"><t path="stx.js.DOMString"/></value>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<specified set="null"><e path="Bool"/></specified>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerElement set="null"><t path="stx.js.HTMLElement"/></ownerElement>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name set="null"><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isID set="null"><e path="Bool"/></isID>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.Attr" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<value set="null"><t path="stx.js.DOMString"/></value>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<specified set="null"><e path="Bool"/></specified>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerElement set="null"><t path="stx.js.Element"/></ownerElement>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name set="null"><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isID set="null"><e path="Bool"/></isID>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.Element" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.Attr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.Attr"/>
	<t path="stx.js.Attr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.Attr"/>
	<t path="stx.js.Attr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.Attr"/>
	<t path="stx.js.Attr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.Node"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.Element"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Attr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Attr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.Text" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<wholeText set="null"><t path="stx.js.DOMString"/></wholeText>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<substringData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></substringData>
	<splitText set="method"><f a="offset">
	<c path="Int"/>
	<t path="stx.js.Text"/>
</f></splitText>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceWholeText set="method"><f a="content">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Text"/>
</f></replaceWholeText>
	<replaceData set="method"><f a="offset:count:arg">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></replaceData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<length set="null"><c path="Int"/></length>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isElementContentWhitespace set="null"><e path="Bool"/></isElementContentWhitespace>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertData set="method"><f a="offset:arg">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertData>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<deleteData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></deleteData>
	<data><t path="stx.js.DOMString"/></data>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendData set="method"><f a="arg">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></appendData>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.HTMLComment" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<substringData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></substringData>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceData set="method"><f a="offset:count:arg">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></replaceData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<length set="null"><c path="Int"/></length>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertData set="method"><f a="offset:arg">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertData>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<deleteData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></deleteData>
	<data><t path="stx.js.DOMString"/></data>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendData set="method"><f a="arg">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></appendData>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.Comment" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<substringData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></substringData>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceData set="method"><f a="offset:count:arg">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></replaceData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<length set="null"><c path="Int"/></length>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertData set="method"><f a="offset:arg">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertData>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<deleteData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></deleteData>
	<data><t path="stx.js.DOMString"/></data>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendData set="method"><f a="arg">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></appendData>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.TypeInfo" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<typeNamespace set="null"><t path="stx.js.DOMString"/></typeNamespace>
	<typeName set="null"><t path="stx.js.DOMString"/></typeName>
	<isDerivedFrom set="method"><f a="typeNamespaceArg:typeNameArg:derivationMethod">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<e path="Bool"/>
</f></isDerivedFrom>
</a></typedef>
	<typedef path="stx.js.UserDataHandler" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><handle set="method"><f a="operationType:key:data:src:dst">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<e path="Void"/>
</f></handle></a></typedef>
	<typedef path="stx.js.DOMError" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<severity set="null"><c path="Int"/></severity>
	<relatedException set="null"><t path="stx.js.DOMObject"/></relatedException>
	<relatedData set="null"><t path="stx.js.DOMObject"/></relatedData>
	<message set="null"><t path="stx.js.DOMString"/></message>
	<location set="null"><t path="stx.js.DOMLocator"/></location>
</a></typedef>
	<typedef path="stx.js.DOMErrorHandler" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><handleError set="method"><f a="error">
	<t path="stx.js.DOMError"/>
	<e path="Bool"/>
</f></handleError></a></typedef>
	<typedef path="stx.js.DOMLocator" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<utf16Offset set="null"><c path="Int"/></utf16Offset>
	<uri set="null"><t path="stx.js.DOMString"/></uri>
	<relatedNode set="null"><t path="stx.js.Node"/></relatedNode>
	<lineNumber set="null"><c path="Int"/></lineNumber>
	<columnNumber set="null"><c path="Int"/></columnNumber>
	<byteOffset set="null"><c path="Int"/></byteOffset>
</a></typedef>
	<typedef path="stx.js.DOMConfiguration" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<setParameter set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<e path="Void"/>
</f></setParameter>
	<parameterNames set="null"><c path="stx.js.DOMStringList"/></parameterNames>
	<getParameter set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getParameter>
	<canSetParameter set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<e path="Bool"/>
</f></canSetParameter>
</a></typedef>
	<typedef path="stx.js.HTMLCDATASection" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<wholeText set="null"><t path="stx.js.DOMString"/></wholeText>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<substringData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></substringData>
	<splitText set="method"><f a="offset">
	<c path="Int"/>
	<t path="stx.js.Text"/>
</f></splitText>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceWholeText set="method"><f a="content">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Text"/>
</f></replaceWholeText>
	<replaceData set="method"><f a="offset:count:arg">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></replaceData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<length set="null"><c path="Int"/></length>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isElementContentWhitespace set="null"><e path="Bool"/></isElementContentWhitespace>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertData set="method"><f a="offset:arg">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertData>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<deleteData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></deleteData>
	<data><t path="stx.js.DOMString"/></data>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendData set="method"><f a="arg">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></appendData>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.CDATASection" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<wholeText set="null"><t path="stx.js.DOMString"/></wholeText>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<substringData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></substringData>
	<splitText set="method"><f a="offset">
	<c path="Int"/>
	<t path="stx.js.Text"/>
</f></splitText>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceWholeText set="method"><f a="content">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Text"/>
</f></replaceWholeText>
	<replaceData set="method"><f a="offset:count:arg">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></replaceData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<length set="null"><c path="Int"/></length>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isElementContentWhitespace set="null"><e path="Bool"/></isElementContentWhitespace>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertData set="method"><f a="offset:arg">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertData>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<deleteData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></deleteData>
	<data><t path="stx.js.DOMString"/></data>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendData set="method"><f a="arg">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></appendData>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.DocumentType" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<systemId set="null"><t path="stx.js.DOMString"/></systemId>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<publicId set="null"><t path="stx.js.DOMString"/></publicId>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<notations set="null"><c path="stx.js.NamedNodeMap"><t path="stx.js.Notation"/></c></notations>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name set="null"><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<internalSubset set="null"><t path="stx.js.DOMString"/></internalSubset>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<entities set="null"><c path="stx.js.NamedNodeMap"><t path="stx.js.Entity"/></c></entities>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.Notation" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<systemId set="null"><t path="stx.js.DOMString"/></systemId>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<publicId set="null"><t path="stx.js.DOMString"/></publicId>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.Entity" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<xmlVersion set="null"><t path="stx.js.DOMString"/></xmlVersion>
	<xmlEncoding set="null"><t path="stx.js.DOMString"/></xmlEncoding>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<systemId set="null"><t path="stx.js.DOMString"/></systemId>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<publicId set="null"><t path="stx.js.DOMString"/></publicId>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<notationName set="null"><t path="stx.js.DOMString"/></notationName>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<inputEncoding set="null"><t path="stx.js.DOMString"/></inputEncoding>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.HTMLEntityReference" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.EntityReference" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.HTMLProcessingInstruction" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<target set="null"><t path="stx.js.DOMString"/></target>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<data><t path="stx.js.DOMString"/></data>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.ProcessingInstruction" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<target set="null"><t path="stx.js.DOMString"/></target>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<data><t path="stx.js.DOMString"/></data>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.HTMLDocumentFragment" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.DocumentFragment" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.Document" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<xmlVersion><t path="stx.js.DOMString"/></xmlVersion>
	<xmlStandalone><e path="Bool"/></xmlStandalone>
	<xmlEncoding set="null"><t path="stx.js.DOMString"/></xmlEncoding>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<styleSheets><c path="stx.js.DomCollection"><t path="stx.js.StyleSheet"/></c></styleSheets>
	<styleSheetSets set="null"><c path="stx.js.DOMStringList"/></styleSheetSets>
	<strictErrorChecking><e path="Bool"/></strictErrorChecking>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<selectedStyleSheetSet><c path="stx.js.DOMStringList"/></selectedStyleSheetSet>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></replaceChild>
	<renameNode set="method"><f a="n:namespaceURI:qualifiedName">
	<t path="stx.js.Node"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Node"/>
</f></renameNode>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></removeChild>
	<previousSibling set="null"><t path="stx.js.Node"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<preferredStyleSheetSet set="null"><t path="stx.js.DOMString"/></preferredStyleSheetSet>
	<parentNode set="null"><t path="stx.js.Node"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.Document"/></ownerDocument>
	<normalizeDocument set="method"><f a=""><e path="Void"/></f></normalizeDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.Node"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastStyleSheetSet set="null"><t path="stx.js.DOMString"/></lastStyleSheetSet>
	<lastChild set="null"><t path="stx.js.Node"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></insertBefore>
	<inputEncoding set="null"><t path="stx.js.DOMString"/></inputEncoding>
	<importNode set="method"><f a="importedNode:deep">
	<t path="stx.js.Node"/>
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></importNode>
	<implementation set="null"><t path="stx.js.DOMImplementation"/></implementation>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getOverrideStyle set="method"><f a="elt:pseudoElt">
	<t path="stx.js.Element"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CSSStyleDeclaration"/>
</f></getOverrideStyle>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.Node"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="tagname">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.Node"/></c>
</f></getElementsByTagName>
	<getElementById set="method"><f a="elementId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Element"/>
</f></getElementById>
	<firstChild set="null"><t path="stx.js.Node"/></firstChild>
	<enableStyleSheetsForSet set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></enableStyleSheetsForSet>
	<domConfig set="null"><t path="stx.js.DOMConfiguration"/></domConfig>
	<documentURI><t path="stx.js.DOMString"/></documentURI>
	<documentElement set="null"><t path="stx.js.Element"/></documentElement>
	<doctype set="null"><t path="stx.js.DocumentType"/></doctype>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<defaultView set="null"><t path="stx.js.Window"/></defaultView>
	<createTextNode set="method"><f a="data">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Text"/>
</f></createTextNode>
	<createProcessingInstruction set="method"><f a="target:data">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.ProcessingInstruction"/>
</f></createProcessingInstruction>
	<createEntityReference set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EntityReference"/>
</f></createEntityReference>
	<createElementNS set="method"><f a="namespaceURI:qualifiedName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Element"/>
</f></createElementNS>
	<createElement set="method"><f a="tagName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Element"/>
</f></createElement>
	<createDocumentFragment set="method"><f a=""><t path="stx.js.DocumentFragment"/></f></createDocumentFragment>
	<createComment set="method"><f a="data">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Comment"/>
</f></createComment>
	<createCDATASection set="method"><f a="data">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CDATASection"/>
</f></createCDATASection>
	<createAttributeNS set="method"><f a="nameSpaceURI:qualifiedName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Attr"/>
</f></createAttributeNS>
	<createAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Attr"/>
</f></createAttribute>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.Node"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Node"/></c></childNodes>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></appendChild>
	<adoptNode set="method"><f a="source">
	<t path="stx.js.Node"/>
	<t path="stx.js.Node"/>
</f></adoptNode>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.Storage" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<setIterm set="method"><f a="key:data">
	<t path="stx.js.DOMString"/>
	<d/>
	<e path="Void"/>
</f></setIterm>
	<removeItem set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeItem>
	<length set="null"><c path="Int"/></length>
	<key set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></key>
	<getIterm set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<d/>
</f></getIterm>
	<clear set="method"><f a=""><e path="Void"/></f></clear>
</a></typedef>
	<class path="stx.js.HTMLCollection" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" extern="1" interface="1">
		<length public="1" set="null"><c path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.HTMLElement"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Node"/>
</f></namedItem>
		<haxe_dynamic><c path="stx.js.HTMLCollection.T"/></haxe_dynamic>
	</class>
	<typedef path="stx.js.MediaError" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><code set="null"><c path="Int"/></code></a></typedef>
	<typedef path="stx.js.TimedTrack" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<readyState set="null"><c path="Int"/></readyState>
	<onload set="null"><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onexitcue set="null"><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onexitcue>
	<onerror set="null"><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onentercue set="null"><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onentercue>
	<mode><c path="Int"/></mode>
	<language set="null"><t path="stx.js.DOMString"/></language>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<kind set="null"><t path="stx.js.DOMString"/></kind>
	<cues set="null"><c path="stx.js.TimedTrackCueList"><t path="stx.js.TimedTrackCue"/></c></cues>
	<activeCues set="null"><c path="stx.js.TimedTrackCueList"><t path="stx.js.TimedTrackCue"/></c></activeCues>
</a></typedef>
	<typedef path="stx.js.MutableTimedTrack" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<removeCue set="method"><f a="cue">
	<t path="stx.js.TimedTrackCue"/>
	<e path="Void"/>
</f></removeCue>
	<readyState set="null"><c path="Int"/></readyState>
	<onload set="null"><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onexitcue set="null"><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onexitcue>
	<onerror set="null"><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onentercue set="null"><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onentercue>
	<mode><c path="Int"/></mode>
	<language set="null"><t path="stx.js.DOMString"/></language>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<kind set="null"><t path="stx.js.DOMString"/></kind>
	<cues set="null"><c path="stx.js.TimedTrackCueList"><t path="stx.js.TimedTrackCue"/></c></cues>
	<addCue set="method"><f a="cue">
	<t path="stx.js.TimedTrackCue"/>
	<e path="Void"/>
</f></addCue>
	<activeCues set="null"><c path="stx.js.TimedTrackCueList"><t path="stx.js.TimedTrackCue"/></c></activeCues>
</a></typedef>
	<class path="stx.js.TimedTrackCueList" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" interface="1">
		<length public="1" set="null"><c path="Int"/></length>
		<getter public="1" set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.TimedTrackCue"/>
</f></getter>
		<getCueById public="1" set="method"><f a="id">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.TimedTrackCue"/>
</f></getCueById>
		<haxe_dynamic><c path="stx.js.TimedTrackCueList.T"/></haxe_dynamic>
	</class>
	<typedef path="stx.js.TimedTrackCue" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<voice set="null"><t path="stx.js.DOMString"/></voice>
	<track set="null"><t path="stx.js.TimedTrack"/></track>
	<textPosition set="null"><c path="Int"/></textPosition>
	<startTime set="null"><c path="Float"/></startTime>
	<snapToLines set="null"><e path="Bool"/></snapToLines>
	<size set="null"><c path="Int"/></size>
	<pauseOnExit set="null"><e path="Bool"/></pauseOnExit>
	<linePosition set="null"><c path="Int"/></linePosition>
	<id set="null"><t path="stx.js.DOMString"/></id>
	<getCueAsSource set="method"><f a=""><t path="stx.js.DOMString"/></f></getCueAsSource>
	<getCueAsHTML set="method"><f a=""><t path="stx.js.DocumentFragment"/></f></getCueAsHTML>
	<endTime set="null"><c path="Float"/></endTime>
	<direction set="null"><t path="stx.js.DOMString"/></direction>
	<alignment set="null"><t path="stx.js.DOMString"/></alignment>
</a></typedef>
	<typedef path="stx.js.HTMLVideoElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<volume><c path="Float"/></volume>
	<tracks set="null"><t path="stx.js.TimedTrack"/></tracks>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<startTime set="null"><c path="Float"/></startTime>
	<src><t path="stx.js.DOMString"/></src>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<seeking set="null"><e path="Bool"/></seeking>
	<seekable set="null"><t path="stx.js.TimeRanges"/></seekable>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<readyState set="null"><c path="Int"/></readyState>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<preload><t path="stx.js.DOMString"/></preload>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<played set="null"><t path="stx.js.TimeRanges"/></played>
	<playbackRate><c path="Float"/></playbackRate>
	<play set="method"><f a=""><e path="Void"/></f></play>
	<paused set="null"><e path="Bool"/></paused>
	<pause set="method"><f a=""><e path="Void"/></f></pause>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<networkState set="null"><c path="Int"/></networkState>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<muted><e path="Bool"/></muted>
	<loop><e path="Bool"/></loop>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<load set="method"><f a=""><e path="Void"/></f></load>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<error set="null"><t path="stx.js.MediaError"/></error>
	<ended set="null"><e path="Bool"/></ended>
	<duration set="null"><c path="Float"/></duration>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<defaultPlaybackRate><c path="Float"/></defaultPlaybackRate>
	<currentTime><c path="Float"/></currentTime>
	<currentSrc set="null"><t path="stx.js.DOMString"/></currentSrc>
	<controls><e path="Bool"/></controls>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<canPlayType set="method"><f a="type">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></canPlayType>
	<buffered set="null"><t path="stx.js.TimeRanges"/></buffered>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<autoplay><e path="Bool"/></autoplay>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.Attr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addTrack set="method"><f a="label:kind:language">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.MutableTimedTrack"/>
</f></addTrack>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLAudioElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<volume><c path="Float"/></volume>
	<tracks set="null"><t path="stx.js.TimedTrack"/></tracks>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<startTime set="null"><c path="Float"/></startTime>
	<src><t path="stx.js.DOMString"/></src>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<seeking set="null"><e path="Bool"/></seeking>
	<seekable set="null"><t path="stx.js.TimeRanges"/></seekable>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<readyState set="null"><c path="Int"/></readyState>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<preload><t path="stx.js.DOMString"/></preload>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<played set="null"><t path="stx.js.TimeRanges"/></played>
	<playbackRate><c path="Float"/></playbackRate>
	<play set="method"><f a=""><e path="Void"/></f></play>
	<paused set="null"><e path="Bool"/></paused>
	<pause set="method"><f a=""><e path="Void"/></f></pause>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<networkState set="null"><c path="Int"/></networkState>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<muted><e path="Bool"/></muted>
	<loop><e path="Bool"/></loop>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<load set="method"><f a=""><e path="Void"/></f></load>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<error set="null"><t path="stx.js.MediaError"/></error>
	<ended set="null"><e path="Bool"/></ended>
	<duration set="null"><c path="Float"/></duration>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<defaultPlaybackRate><c path="Float"/></defaultPlaybackRate>
	<currentTime><c path="Float"/></currentTime>
	<currentSrc set="null"><t path="stx.js.DOMString"/></currentSrc>
	<controls><e path="Bool"/></controls>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<canPlayType set="method"><f a="type">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></canPlayType>
	<buffered set="null"><t path="stx.js.TimeRanges"/></buffered>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<autoplay><e path="Bool"/></autoplay>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addTrack set="method"><f a="label:kind:language">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.MutableTimedTrack"/>
</f></addTrack>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLMediaElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<volume><c path="Float"/></volume>
	<tracks set="null"><t path="stx.js.TimedTrack"/></tracks>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<startTime set="null"><c path="Float"/></startTime>
	<src><t path="stx.js.DOMString"/></src>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<seeking set="null"><e path="Bool"/></seeking>
	<seekable set="null"><t path="stx.js.TimeRanges"/></seekable>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<readyState set="null"><c path="Int"/></readyState>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<preload><t path="stx.js.DOMString"/></preload>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<played set="null"><t path="stx.js.TimeRanges"/></played>
	<playbackRate><c path="Float"/></playbackRate>
	<play set="method"><f a=""><e path="Void"/></f></play>
	<paused set="null"><e path="Bool"/></paused>
	<pause set="method"><f a=""><e path="Void"/></f></pause>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<networkState set="null"><c path="Int"/></networkState>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<muted><e path="Bool"/></muted>
	<loop><e path="Bool"/></loop>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<load set="method"><f a=""><e path="Void"/></f></load>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<error set="null"><t path="stx.js.MediaError"/></error>
	<ended set="null"><e path="Bool"/></ended>
	<duration set="null"><c path="Float"/></duration>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<defaultPlaybackRate><c path="Float"/></defaultPlaybackRate>
	<currentTime><c path="Float"/></currentTime>
	<currentSrc set="null"><t path="stx.js.DOMString"/></currentSrc>
	<controls><e path="Bool"/></controls>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<canPlayType set="method"><f a="type">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></canPlayType>
	<buffered set="null"><t path="stx.js.TimeRanges"/></buffered>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<autoplay><e path="Bool"/></autoplay>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addTrack set="method"><f a="label:kind:language">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.MutableTimedTrack"/>
</f></addTrack>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<class path="stx.js.HTMLFormControlsCollection" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" extern="1" interface="1"><implements path="stx.js.HTMLCollection"><c path="stx.js.HTMLFormControlsCollection.T"/></implements></class>
	<class path="stx.js.RadioNodeList" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" extern="1" interface="1">
		<implements path="stx.js.DomCollection"><t path="stx.js.Node"/></implements>
		<value public="1"><t path="stx.js.DOMString"/></value>
	</class>
	<typedef path="stx.js.HTMLOptionsCollection" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<namedItem set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Node"/>
</f></namedItem>
	<length set="null"><c path="Int"/></length>
	<item set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.HTMLOptionElement"/>
</f></item>
</a></typedef>
	<class path="stx.js.Selection" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" interface="1">
		<anchorNode public="1" set="null"><t path="stx.js.Node"/></anchorNode>
		<anchorOffset public="1" set="null"><c path="Int"/></anchorOffset>
		<focusNode public="1" set="null"><t path="stx.js.Node"/></focusNode>
		<focusOffset public="1" set="null"><c path="Int"/></focusOffset>
		<isCollapsed public="1" set="null"><e path="Bool"/></isCollapsed>
		<rangeCount public="1" set="null"><c path="Int"/></rangeCount>
		<collapse public="1" set="method"><f a="parentNode:offset">
	<t path="stx.js.Node"/>
	<c path="Int"/>
	<e path="Void"/>
</f></collapse>
		<collapseToStart public="1" set="method"><f a=""><e path="Void"/></f></collapseToStart>
		<collapseToEnd public="1" set="method"><f a=""><e path="Void"/></f></collapseToEnd>
		<selectAllChildren public="1" set="method"><f a="parentNode">
	<t path="stx.js.Node"/>
	<e path="Void"/>
</f></selectAllChildren>
		<deleteFromDocument public="1" set="method"><f a=""><e path="Void"/></f></deleteFromDocument>
		<getRangeAt public="1" set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.Range"/>
</f></getRangeAt>
		<addRange public="1" set="method"><f a="range">
	<t path="stx.js.Range"/>
	<e path="Void"/>
</f></addRange>
		<removeRange public="1" set="method"><f a="range">
	<t path="stx.js.Range"/>
	<e path="Void"/>
</f></removeRange>
		<removeAllRanges public="1" set="method"><f a=""><e path="Void"/></f></removeAllRanges>
		<stringifier public="1" set="method"><f a=""><t path="stx.js.DOMString"/></f></stringifier>
	</class>
	<typedef path="stx.js.HTMLEmbedElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a/></typedef>
	<typedef path="stx.js.HTMLDocument" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<xmlVersion><t path="stx.js.DOMString"/></xmlVersion>
	<xmlStandalone><e path="Bool"/></xmlStandalone>
	<xmlEncoding set="null"><t path="stx.js.DOMString"/></xmlEncoding>
	<writeln set="method"><f a="text">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></writeln>
	<write set="method"><f a="text">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></write>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<styleSheets><c path="stx.js.DomCollection"><t path="stx.js.StyleSheet"/></c></styleSheets>
	<styleSheetSets set="null"><c path="stx.js.DOMStringList"/></styleSheetSets>
	<strictErrorChecking><e path="Bool"/></strictErrorChecking>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<selectedStyleSheetSet><c path="stx.js.DOMStringList"/></selectedStyleSheetSet>
	<scripts set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLParagraphElement"/></c></scripts>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<renameNode set="method"><f a="n:namespaceURI:qualifiedName">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLElement"/>
</f></renameNode>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<referrer set="null"><t path="stx.js.DOMString"/></referrer>
	<readyState set="null"><t path="stx.js.DOMString"/></readyState>
	<queryCommandSupported set="method"><f a="commandId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></queryCommandSupported>
	<queryCommandState set="method"><f a="commandId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></queryCommandState>
	<queryCommandIndeterm set="method"><f a="commandId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></queryCommandIndeterm>
	<queryCommandEnabled set="method"><f a="commandId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></queryCommandEnabled>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<preferredStyleSheetSet set="null"><t path="stx.js.DOMString"/></preferredStyleSheetSet>
	<plugins set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLParagraphElement"/></c></plugins>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<open set="method"><f a="?type:?replace">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLDocument"/>
</f></open>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<normalizeDocument set="method"><f a=""><e path="Void"/></f></normalizeDocument>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<location set="null"><t path="stx.js.Location"/></location>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<links set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLLinkElement"/></c></links>
	<lastStyleSheetSet set="null"><t path="stx.js.DOMString"/></lastStyleSheetSet>
	<lastModified set="null"><t path="stx.js.DOMString"/></lastModified>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<inputEncoding set="null"><t path="stx.js.DOMString"/></inputEncoding>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<importNode set="method"><f a="importedNode:deep">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></importNode>
	<implementation set="null"><t path="stx.js.DOMImplementation"/></implementation>
	<images set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLImageElement"/></c></images>
	<head set="null"><t path="stx.js.HTMLHeadElement"/></head>
	<hasFocus set="method"><f a=""><e path="Bool"/></f></hasFocus>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<getter set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<d/>
</f></getter>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getSelection set="method"><f a=""><c path="stx.js.Selection"/></f></getSelection>
	<getOverrideStyle set="method"><f a="elt:pseudoElt">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CSSStyleDeclaration"/>
</f></getOverrideStyle>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="tagname">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getElementsByName set="method"><f a="elementName">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByName>
	<getElementsByClassName set="method"><f a="classNames">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByClassName>
	<getElementById set="method"><f a="elementId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLElement"/>
</f></getElementById>
	<forms set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLFormElement"/></c></forms>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<execCommand set="method"><f a="commands:?showUI:?value">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></execCommand>
	<enableStyleSheetsForSet set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></enableStyleSheetsForSet>
	<embeds set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLEmbedElement"/></c></embeds>
	<domain set="null"><t path="stx.js.DOMString"/></domain>
	<domConfig set="null"><t path="stx.js.DOMConfiguration"/></domConfig>
	<documentURI><t path="stx.js.DOMString"/></documentURI>
	<documentElement set="null"><t path="stx.js.HTMLElement"/></documentElement>
	<doctype set="null"><t path="stx.js.DocumentType"/></doctype>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<dir><t path="stx.js.DOMString"/></dir>
	<designMode><t path="stx.js.DOMString"/></designMode>
	<defaultView set="null"><t path="stx.js.Window"/></defaultView>
	<defaultCharset set="null"><t path="stx.js.DOMString"/></defaultCharset>
	<createTextNode set="method"><f a="data">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLTextElement"/>
</f></createTextNode>
	<createProcessingInstruction set="method"><f a="target:data">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLProcessingInstruction"/>
</f></createProcessingInstruction>
	<createEntityReference set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLEntityReference"/>
</f></createEntityReference>
	<createElementNS set="method"><f a="namespaceURI:qualifiedName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLElement"/>
</f></createElementNS>
	<createElement set="method"><f a="tagName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLElement"/>
</f></createElement>
	<createDocumentFragment set="method"><f a=""><t path="stx.js.HTMLDocumentFragment"/></f></createDocumentFragment>
	<createComment set="method"><f a="data">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLComment"/>
</f></createComment>
	<createCDATASection set="method"><f a="data">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLCDATASection"/>
</f></createCDATASection>
	<createAttributeNS set="method"><f a="nameSpaceURI:qualifiedName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></createAttributeNS>
	<createAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></createAttribute>
	<cookie><t path="stx.js.DOMString"/></cookie>
	<compatMode set="null"><t path="stx.js.DOMString"/></compatMode>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commands><c path="stx.js.HTMLCollection"><t path="stx.js.DOMString"/></c></commands>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<charset><t path="stx.js.DOMString"/></charset>
	<characterSet set="null"><t path="stx.js.DOMString"/></characterSet>
	<body><t path="stx.js.HTMLElement"/></body>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<applets set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLAppletElement"/></c></applets>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<anchors set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLAnchorElement"/></c></anchors>
	<adoptNode set="method"><f a="source">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></adoptNode>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<activeElement set="null"><t path="stx.js.HTMLElement"/></activeElement>
	<URL set="null"><t path="stx.js.DOMString"/></URL>
</a></typedef>
	<typedef path="stx.js.HTMLUnknownElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLTextElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<wholeText set="null"><t path="stx.js.DOMString"/></wholeText>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<substringData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></substringData>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<splitText set="method"><f a="offset">
	<c path="Int"/>
	<t path="stx.js.Text"/>
</f></splitText>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceWholeText set="method"><f a="content">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Text"/>
</f></replaceWholeText>
	<replaceData set="method"><f a="offset:count:arg">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></replaceData>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<length set="null"><c path="Int"/></length>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isElementContentWhitespace set="null"><e path="Bool"/></isElementContentWhitespace>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertData set="method"><f a="offset:arg">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertData>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<deleteData set="method"><f a="offset:count">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></deleteData>
	<data><t path="stx.js.DOMString"/></data>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendData set="method"><f a="arg">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></appendData>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLHtmlElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<version><t path="stx.js.DOMString"/></version>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLHeadElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<profile><t path="stx.js.DOMString"/></profile>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLLinkElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<target><t path="stx.js.DOMString"/></target>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<rev><t path="stx.js.DOMString"/></rev>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<rel><t path="stx.js.DOMString"/></rel>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<media><t path="stx.js.DOMString"/></media>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hreflang><t path="stx.js.DOMString"/></hreflang>
	<href><t path="stx.js.DOMString"/></href>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<charset><t path="stx.js.DOMString"/></charset>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLTitleElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<text><t path="stx.js.DOMString"/></text>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLMetaElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<scheme><t path="stx.js.DOMString"/></scheme>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<httpEquiv><t path="stx.js.DOMString"/></httpEquiv>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<content><t path="stx.js.DOMString"/></content>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLBaseElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<target><t path="stx.js.DOMString"/></target>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<href><t path="stx.js.DOMString"/></href>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLIsIndexElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<prompt><t path="stx.js.DOMString"/></prompt>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<form set="null"><t path="stx.js.HTMLFormElement"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLStyleElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<scoped><e path="Bool"/></scoped>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<media><t path="stx.js.DOMString"/></media>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLBodyElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<vLink><t path="stx.js.DOMString"/></vLink>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<text><t path="stx.js.DOMString"/></text>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<link><t path="stx.js.DOMString"/></link>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<bgColor><t path="stx.js.DOMString"/></bgColor>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<background><t path="stx.js.DOMString"/></background>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
	<aLink><t path="stx.js.DOMString"/></aLink>
</a></typedef>
	<typedef path="stx.js.HTMLFormElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<target><t path="stx.js.DOMString"/></target>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<submit set="method"><f a=""><e path="Void"/></f></submit>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<reset set="method"><f a=""><e path="Void"/></f></reset>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<method><t path="stx.js.DOMString"/></method>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<length set="null"><c path="Int"/></length>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<enctype><t path="stx.js.DOMString"/></enctype>
	<elements set="null"><c path="stx.js.HTMLCollection"><d/></c></elements>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<action><t path="stx.js.DOMString"/></action>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
	<acceptCharset><t path="stx.js.DOMString"/></acceptCharset>
</a></typedef>
	<typedef path="stx.js.HTMLSelectElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<value><t path="stx.js.DOMString"/></value>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<size><c path="Int"/></size>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<selectedIndex><c path="Int"/></selectedIndex>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<remove set="method"><f a="index">
	<c path="Int"/>
	<e path="Void"/>
</f></remove>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<options set="null"><t path="stx.js.HTMLOptionsCollection"/></options>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<multiple><e path="Bool"/></multiple>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<length set="null"><c path="Int"/></length>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<form set="null"><t path="stx.js.HTMLFormElement"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<add set="method"><f a="element:before">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<e path="Void"/>
</f></add>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLCanvasElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width><c path="Int"/></width>
	<toDataURL set="method"><f a="type:args">
	<t path="stx.js.DOMString"/>
	<d/>
	<t path="stx.js.DOMString"/>
</f></toDataURL>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<height><c path="Int"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getContext set="method"><f a="contextId">
	<t path="stx.js.DOMString"/>
	<d/>
</f></getContext>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.CanvasRenderingContext2D" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<translate set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></translate>
	<transform set="method"><f a="m11:m12:m21:m22:dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></transform>
	<textBaseline><t path="stx.js.DOMString"/></textBaseline>
	<textAlign><t path="stx.js.DOMString"/></textAlign>
	<strokeText set="method"><f a="text:x:y:maxWidth">
	<t path="stx.js.DOMString"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></strokeText>
	<strokeStyle><d/></strokeStyle>
	<strokeRect set="method"><f a="x:y:w:h">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></strokeRect>
	<stroke set="method"><f a=""><e path="Void"/></f></stroke>
	<shadowOffsetY><c path="Float"/></shadowOffsetY>
	<shadowOffsetX><c path="Float"/></shadowOffsetX>
	<shadowColor><t path="stx.js.DOMString"/></shadowColor>
	<shadowBlur><c path="Float"/></shadowBlur>
	<setTransform set="method"><f a="m11:m12:m21:m22:dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setTransform>
	<scale set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></scale>
	<save set="method"><f a=""><e path="Void"/></f></save>
	<rotate set="method"><f a="angle">
	<c path="Float"/>
	<e path="Void"/>
</f></rotate>
	<restore set="method"><f a=""><e path="Void"/></f></restore>
	<rect set="method"><f a="x:y:w:h">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></rect>
	<quadraticCurveTo set="method"><f a="cpx:cpy:x:y">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></quadraticCurveTo>
	<putImageData set="method"><f a="imagedata:dx:dy:dirtyX:dirtyY:dirtyWidth:dirtyHeight">
	<t path="stx.js.ImageData"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></putImageData>
	<moveTo set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
	<miterLimit><c path="Float"/></miterLimit>
	<measureText set="method"><f a="text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.TextMetrics"/>
</f></measureText>
	<lineWidth><c path="Float"/></lineWidth>
	<lineTo set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
	<lineJoin><t path="stx.js.DOMString"/></lineJoin>
	<lineCap><t path="stx.js.DOMString"/></lineCap>
	<isPointInPath set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></isPointInPath>
	<globalCompositeOperation><t path="stx.js.DOMString"/></globalCompositeOperation>
	<globalAlpha><c path="Float"/></globalAlpha>
	<getImageData set="method"><f a="sx:sy:sw:sh">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="stx.js.ImageData"/>
</f></getImageData>
	<font><t path="stx.js.DOMString"/></font>
	<fillText set="method"><f a="text:x:y:maxWidth">
	<t path="stx.js.DOMString"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></fillText>
	<fillStyle><d/></fillStyle>
	<fillRect set="method"><f a="x:y:w:h">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></fillRect>
	<fill set="method"><f a=""><e path="Void"/></f></fill>
	<drawImage set="method"><f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawImage>
	<drawFocusRing set="method"><f a="element:xCaret:yCaret:canDrawCustom">
	<t path="stx.js.Element"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></drawFocusRing>
	<createRadialGradient set="method"><f a="x0:y0:r0:x1:y1:r1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="stx.js.CanvasGradient"/>
</f></createRadialGradient>
	<createPattern set="method"><f a="image:repetition">
	<t path="stx.js.HTMLImageElement"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CanvasPattern"/>
</f></createPattern>
	<createLinearGradient set="method"><f a="x0:y0:x1:y1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="stx.js.CanvasGradient"/>
</f></createLinearGradient>
	<createImageData set="method"><f a="imagedata">
	<d/>
	<t path="stx.js.ImageData"/>
</f></createImageData>
	<closePath set="method"><f a=""><e path="Void"/></f></closePath>
	<clip set="method"><f a=""><e path="Void"/></f></clip>
	<clearRect set="method"><f a="x:y:w:h">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></clearRect>
	<canvas><t path="stx.js.HTMLCanvasElement"/></canvas>
	<bezierCurveTo set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></bezierCurveTo>
	<beginPath set="method"><f a=""><e path="Void"/></f></beginPath>
	<arcTo set="method"><f a="x1:y1:x2:y2:radius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></arcTo>
	<arc set="method"><f a="x:y:radius:startAngle:endAngle:anticlockwise">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></arc>
</a></typedef>
	<typedef path="stx.js.CanvasGradient" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><addColorStop set="method"><f a="offset:color">
	<c path="Float"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></addColorStop></a></typedef>
	<typedef path="stx.js.CanvasPattern" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a/></typedef>
	<typedef path="stx.js.TextMetrics" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><width set="null"><c path="Int"/></width></a></typedef>
	<typedef path="stx.js.ImageData" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width set="null"><c path="Int"/></width>
	<height set="null"><c path="Int"/></height>
	<data set="null"><t path="stx.js.CanvasPixelArray"/></data>
</a></typedef>
	<typedef path="stx.js.CanvasPixelArray" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><length set="null"><c path="Int"/></length></a></typedef>
	<typedef path="stx.js.Octet" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a/></typedef>
	<typedef path="stx.js.HTMLOptGroupElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLOptionElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<value><t path="stx.js.DOMString"/></value>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<text set="null"><t path="stx.js.DOMString"/></text>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<selected><e path="Bool"/></selected>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<index set="null"><c path="Int"/></index>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<form set="null"><t path="stx.js.HTMLFormElement"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<defaultSelected><e path="Bool"/></defaultSelected>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLInputElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<value><t path="stx.js.DOMString"/></value>
	<useMap><t path="stx.js.DOMString"/></useMap>
	<type><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<src><t path="stx.js.DOMString"/></src>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<size><c path="Int"/></size>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<maxLength><c path="Int"/></maxLength>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<form set="null"><t path="stx.js.HTMLFormElement"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<defaultValue><t path="stx.js.DOMString"/></defaultValue>
	<defaultChecked><e path="Bool"/></defaultChecked>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<alt><t path="stx.js.DOMString"/></alt>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
	<accept><t path="stx.js.DOMString"/></accept>
</a></typedef>
	<typedef path="stx.js.HTMLTextAreaElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<value><t path="stx.js.DOMString"/></value>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<rows><c path="Int"/></rows>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<form set="null"><t path="stx.js.HTMLFormElement"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<defaultValue><t path="stx.js.DOMString"/></defaultValue>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cols><c path="Int"/></cols>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLButtonElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<value><t path="stx.js.DOMString"/></value>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<form set="null"><t path="stx.js.HTMLFormElement"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLLabelElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<htmlFor><t path="stx.js.DOMString"/></htmlFor>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<form set="null"><t path="stx.js.HTMLFormElement"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLFieldSetElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<form set="null"><t path="stx.js.HTMLFormElement"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLLegendElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<form set="null"><t path="stx.js.HTMLFormElement"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLUListElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<compact><e path="Bool"/></compact>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLOListElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<start><c path="Int"/></start>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<compact><e path="Bool"/></compact>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLDListElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<compact><e path="Bool"/></compact>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLDirectoryElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<compact><e path="Bool"/></compact>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLMenuElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<compact><e path="Bool"/></compact>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLLIElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<value><c path="Int"/></value>
	<type><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLDivElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLParagraphElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLHeadingElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLQuoteElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<cite><t path="stx.js.DOMString"/></cite>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLPreElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width><c path="Int"/></width>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLBRElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<clear><t path="stx.js.DOMString"/></clear>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLBaseFontElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<size><c path="Int"/></size>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<face><t path="stx.js.DOMString"/></face>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<color><t path="stx.js.DOMString"/></color>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLFontElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<size><t path="stx.js.DOMString"/></size>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<face><t path="stx.js.DOMString"/></face>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<color><t path="stx.js.DOMString"/></color>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLHRElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width><t path="stx.js.DOMString"/></width>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<size><t path="stx.js.DOMString"/></size>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<noShade><e path="Bool"/></noShade>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLModElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<dateTime><t path="stx.js.DOMString"/></dateTime>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<cite><t path="stx.js.DOMString"/></cite>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLAnchorElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<target><t path="stx.js.DOMString"/></target>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<shape><t path="stx.js.DOMString"/></shape>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<rev><t path="stx.js.DOMString"/></rev>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<rel><t path="stx.js.DOMString"/></rel>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hreflang><t path="stx.js.DOMString"/></hreflang>
	<href><t path="stx.js.DOMString"/></href>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<coords><t path="stx.js.DOMString"/></coords>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<charset><t path="stx.js.DOMString"/></charset>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLImageElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width><c path="Int"/></width>
	<vspace><c path="Int"/></vspace>
	<useMap><t path="stx.js.DOMString"/></useMap>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<src><t path="stx.js.DOMString"/></src>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<longDesc><t path="stx.js.DOMString"/></longDesc>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isMap><e path="Bool"/></isMap>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hspace><c path="Int"/></hspace>
	<hidden><e path="Bool"/></hidden>
	<height><c path="Int"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<border><t path="stx.js.DOMString"/></border>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<alt><t path="stx.js.DOMString"/></alt>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLObjectElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width><t path="stx.js.DOMString"/></width>
	<vspace><c path="Int"/></vspace>
	<useMap><t path="stx.js.DOMString"/></useMap>
	<type><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<standby><t path="stx.js.DOMString"/></standby>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hspace><c path="Int"/></hspace>
	<hidden><e path="Bool"/></hidden>
	<height><t path="stx.js.DOMString"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<form set="null"><t path="stx.js.HTMLFormElement"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<declare><e path="Bool"/></declare>
	<data><t path="stx.js.DOMString"/></data>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<contentDocument set="null"><t path="stx.js.Document"/></contentDocument>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<codeType><t path="stx.js.DOMString"/></codeType>
	<codeBase><t path="stx.js.DOMString"/></codeBase>
	<code><t path="stx.js.DOMString"/></code>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<border><t path="stx.js.DOMString"/></border>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<archive><t path="stx.js.DOMString"/></archive>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLParamElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<valueType><t path="stx.js.DOMString"/></valueType>
	<value><t path="stx.js.DOMString"/></value>
	<type><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLAppletElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width><t path="stx.js.DOMString"/></width>
	<vspace><c path="Int"/></vspace>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<object><t path="stx.js.DOMString"/></object>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hspace><c path="Int"/></hspace>
	<hidden><e path="Bool"/></hidden>
	<height><t path="stx.js.DOMString"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<codeBase><t path="stx.js.DOMString"/></codeBase>
	<code><t path="stx.js.DOMString"/></code>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<archive><t path="stx.js.DOMString"/></archive>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<alt><t path="stx.js.DOMString"/></alt>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLMapElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<areas set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLAreaElement"/></c></areas>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLAreaElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<target><t path="stx.js.DOMString"/></target>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<shape><t path="stx.js.DOMString"/></shape>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<noHref><e path="Bool"/></noHref>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<href><t path="stx.js.DOMString"/></href>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<coords><t path="stx.js.DOMString"/></coords>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<alt><t path="stx.js.DOMString"/></alt>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLScriptElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type><t path="stx.js.DOMString"/></type>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<text><t path="stx.js.DOMString"/></text>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<src><t path="stx.js.DOMString"/></src>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<htmlFor><t path="stx.js.DOMString"/></htmlFor>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<event><t path="stx.js.DOMString"/></event>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<defer><e path="Bool"/></defer>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<charset><t path="stx.js.DOMString"/></charset>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLTableElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width><t path="stx.js.DOMString"/></width>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<tHead><t path="stx.js.HTMLTableSectionElement"/></tHead>
	<tFoot><t path="stx.js.HTMLTableSectionElement"/></tFoot>
	<tBodies set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLTableSectionElement"/></c></tBodies>
	<summary><t path="stx.js.DOMString"/></summary>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<rules><t path="stx.js.DOMString"/></rules>
	<rows set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLTableRowElement"/></c></rows>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertRow set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.HTMLElement"/>
</f></insertRow>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<frame><t path="stx.js.DOMString"/></frame>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<deleteTHead set="method"><f a=""><e path="Void"/></f></deleteTHead>
	<deleteTFoot set="method"><f a=""><e path="Void"/></f></deleteTFoot>
	<deleteRow set="method"><f a="index">
	<c path="Int"/>
	<e path="Void"/>
</f></deleteRow>
	<deleteCaption set="method"><f a=""><e path="Void"/></f></deleteCaption>
	<createTHead set="method"><f a=""><t path="stx.js.HTMLElement"/></f></createTHead>
	<createTFoot set="method"><f a=""><t path="stx.js.HTMLElement"/></f></createTFoot>
	<createCaption set="method"><f a=""><t path="stx.js.HTMLElement"/></f></createCaption>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<cellSpacing><t path="stx.js.DOMString"/></cellSpacing>
	<cellPadding><t path="stx.js.DOMString"/></cellPadding>
	<caption><t path="stx.js.HTMLTableCaptionElement"/></caption>
	<border><t path="stx.js.DOMString"/></border>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<bgColor><t path="stx.js.DOMString"/></bgColor>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLTableCaptionElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLTableColElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width><t path="stx.js.DOMString"/></width>
	<vAlign><t path="stx.js.DOMString"/></vAlign>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<span><c path="Int"/></span>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<chOff><t path="stx.js.DOMString"/></chOff>
	<ch><t path="stx.js.DOMString"/></ch>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLTableSectionElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<vAlign><t path="stx.js.DOMString"/></vAlign>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<rows set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLTableRowElement"/></c></rows>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertRow set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.HTMLElement"/>
</f></insertRow>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<deleteRow set="method"><f a="index">
	<c path="Int"/>
	<e path="Void"/>
</f></deleteRow>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<chOff><t path="stx.js.DOMString"/></chOff>
	<ch><t path="stx.js.DOMString"/></ch>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLTableRowElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<vAlign><t path="stx.js.DOMString"/></vAlign>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<sectionRowIndex set="null"><c path="Int"/></sectionRowIndex>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<rowIndex set="null"><c path="Int"/></rowIndex>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertCell set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.HTMLElement"/>
</f></insertCell>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<deleteCell set="method"><f a="index">
	<c path="Int"/>
	<e path="Void"/>
</f></deleteCell>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<chOff><t path="stx.js.DOMString"/></chOff>
	<ch><t path="stx.js.DOMString"/></ch>
	<cells set="null"><c path="stx.js.HTMLCollection"><t path="stx.js.HTMLTableCellElement"/></c></cells>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<bgColor><t path="stx.js.DOMString"/></bgColor>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLTableCellElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width><t path="stx.js.DOMString"/></width>
	<vAlign><t path="stx.js.DOMString"/></vAlign>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<scope><t path="stx.js.DOMString"/></scope>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<rowSpan><c path="Int"/></rowSpan>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<noWrap><e path="Bool"/></noWrap>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<height><t path="stx.js.DOMString"/></height>
	<headers><t path="stx.js.DOMString"/></headers>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<colSpan><c path="Int"/></colSpan>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<chOff><t path="stx.js.DOMString"/></chOff>
	<ch><t path="stx.js.DOMString"/></ch>
	<cellIndex set="null"><c path="Int"/></cellIndex>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<bgColor><t path="stx.js.DOMString"/></bgColor>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<axis><t path="stx.js.DOMString"/></axis>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
	<abbr><t path="stx.js.DOMString"/></abbr>
</a></typedef>
	<typedef path="stx.js.HTMLFrameSetElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<rows><t path="stx.js.DOMString"/></rows>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cols><t path="stx.js.DOMString"/></cols>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLFrameElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<src><t path="stx.js.DOMString"/></src>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrolling><t path="stx.js.DOMString"/></scrolling>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<noResize><e path="Bool"/></noResize>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<marginWidth><t path="stx.js.DOMString"/></marginWidth>
	<marginHeight><t path="stx.js.DOMString"/></marginHeight>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<longDesc><t path="stx.js.DOMString"/></longDesc>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<frameBorder><t path="stx.js.DOMString"/></frameBorder>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentWindow set="null"><t path="stx.js.Window"/></contentWindow>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<contentDocument set="null"><t path="stx.js.Document"/></contentDocument>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.HTMLIFrameElement" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width><t path="stx.js.DOMString"/></width>
	<title><t path="stx.js.DOMString"/></title>
	<textContent><t path="stx.js.DOMString"/></textContent>
	<tagName set="null"><t path="stx.js.DOMString"/></tagName>
	<style><t path="stx.js.CSSInlineStyleDeclaration"/></style>
	<src><t path="stx.js.DOMString"/></src>
	<spellcheck set="null"><t path="stx.js.DOMString"/></spellcheck>
	<setUserData set="method"><f a="key:data:handler">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
	<t path="stx.js.UserDataHandler"/>
	<t path="stx.js.DOMUserData"/>
</f></setUserData>
	<setIdAttributeNode set="method"><f a="idAttr:isId">
	<t path="stx.js.HTMLAttr"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNode>
	<setIdAttributeNS set="method"><f a="namespaceURI:localname:isId">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttributeNS>
	<setIdAttribute set="method"><f a="name:isId">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setIdAttribute>
	<setAttributeNodeNS set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNodeNS>
	<setAttributeNode set="method"><f a="newAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></setAttributeNode>
	<setAttributeNS set="method"><f a="namespaceURI:qualifiedName:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttributeNS>
	<setAttribute set="method"><f a="name:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setAttribute>
	<scrolling><t path="stx.js.DOMString"/></scrolling>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollIntoView set="method"><f a="?top">
	<e path="Bool"/>
	<e path="Void"/>
</f></scrollIntoView>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<schemaTypeInfo set="null"><t path="stx.js.TypeInfo"/></schemaTypeInfo>
	<replaceChild set="method"><f a="newChild:oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></replaceChild>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<removeChild set="method"><f a="oldChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></removeChild>
	<removeAttributeNode set="method"><f a="oldAttr">
	<t path="stx.js.HTMLAttr"/>
	<t path="stx.js.HTMLAttr"/>
</f></removeAttributeNode>
	<removeAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttributeNS>
	<removeAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeAttribute>
	<previousSibling set="null"><t path="stx.js.HTMLElement"/></previousSibling>
	<prefix set="null"><t path="stx.js.DOMString"/></prefix>
	<parentNode set="null"><t path="stx.js.HTMLElement"/></parentNode>
	<ownerDocument set="null"><t path="stx.js.HTMLDocument"/></ownerDocument>
	<outerHTML><t path="stx.js.DOMString"/></outerHTML>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<offsetWidth set="null"><c path="Int"/></offsetWidth>
	<offsetTop set="null"><c path="Int"/></offsetTop>
	<offsetParent set="null"><t path="stx.js.HTMLElement"/></offsetParent>
	<offsetLeft set="null"><c path="Int"/></offsetLeft>
	<offsetHeight set="null"><c path="Int"/></offsetHeight>
	<nodeValue><t path="stx.js.DOMString"/></nodeValue>
	<nodeType set="null"><c path="Int"/></nodeType>
	<nodeName set="null"><t path="stx.js.DOMString"/></nodeName>
	<nextSibling set="null"><t path="stx.js.HTMLElement"/></nextSibling>
	<namespaceURI set="null"><t path="stx.js.DOMString"/></namespaceURI>
	<name><t path="stx.js.DOMString"/></name>
	<marginWidth><t path="stx.js.DOMString"/></marginWidth>
	<marginHeight><t path="stx.js.DOMString"/></marginHeight>
	<lookupPrefix set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupPrefix>
	<lookupNamespaceUrI set="method"><f a="prefix">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></lookupNamespaceUrI>
	<longDesc><t path="stx.js.DOMString"/></longDesc>
	<localName set="null"><t path="stx.js.DOMString"/></localName>
	<lastChild set="null"><t path="stx.js.HTMLElement"/></lastChild>
	<lang><t path="stx.js.DOMString"/></lang>
	<label set="null"><t path="stx.js.DOMString"/></label>
	<isSupported set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isSupported>
	<isSameNode set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isSameNode>
	<isEqualNode set="method"><f a="arg">
	<t path="stx.js.HTMLElement"/>
	<e path="Bool"/>
</f></isEqualNode>
	<isDefaultNamespace set="method"><f a="namespaceURI">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isDefaultNamespace>
	<isContentEditable set="null"><e path="Bool"/></isContentEditable>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></insertBefore>
	<insertAdjacentHTML set="method"><f a="position:text">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></insertAdjacentHTML>
	<innerHTML><t path="stx.js.DOMString"/></innerHTML>
	<id><t path="stx.js.DOMString"/></id>
	<icon set="null"><t path="stx.js.DOMString"/></icon>
	<hidden><e path="Bool"/></hidden>
	<height><t path="stx.js.DOMString"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<hasAttributes set="method"><f a=""><e path="Bool"/></f></hasAttributes>
	<hasAttributeNS set="method"><f a="namespaceURI:localname">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttributeNS>
	<hasAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></hasAttribute>
	<getUserData set="method"><f a="key">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMUserData"/>
</f></getUserData>
	<getFeature set="method"><f a="feature:version">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMObject"/>
</f></getFeature>
	<getElementsByTagNameNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagNameNS>
	<getElementsByTagName set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByTagName>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<getAttributeNodeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNodeNS>
	<getAttributeNode set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.HTMLAttr"/>
</f></getAttributeNode>
	<getAttributeNS set="method"><f a="namespaceURI:localName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttributeNS>
	<getAttribute set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getAttribute>
	<frameBorder><t path="stx.js.DOMString"/></frameBorder>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild set="null"><t path="stx.js.HTMLElement"/></firstChild>
	<draggable set="null"><e path="Bool"/></draggable>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<disabled set="null"><e path="Bool"/></disabled>
	<dir><t path="stx.js.DOMString"/></dir>
	<contextMenu set="null"><t path="stx.js.HTMLMenuElement"/></contextMenu>
	<contentWindow set="null"><t path="stx.js.Window"/></contentWindow>
	<contentEditable set="null"><t path="stx.js.DOMString"/></contentEditable>
	<contentDocument set="null"><t path="stx.js.HTMLDocument"/></contentDocument>
	<compareDocumentPosition set="method"><f a="other">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
</f></compareDocumentPosition>
	<commandType set="null"><t path="stx.js.DOMString"/></commandType>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="stx.js.HTMLElement"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientTop set="null"><c path="Int"/></clientTop>
	<clientLeft set="null"><c path="Int"/></clientLeft>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><t path="stx.js.DOMString"/></className>
	<childNodes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLElement"/></c></childNodes>
	<checked set="null"><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<baseURI set="null"><t path="stx.js.DOMString"/></baseURI>
	<attributes set="null"><c path="stx.js.DomCollection"><t path="stx.js.HTMLAttr"/></c></attributes>
	<appendChild set="method"><f a="newChild">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></appendChild>
	<align><t path="stx.js.DOMString"/></align>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<accessKeyLabel set="null"><t path="stx.js.DOMString"/></accessKeyLabel>
	<accessKey set="null"><t path="stx.js.DOMString"/></accessKey>
</a></typedef>
	<typedef path="stx.js.ClientRect" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width set="null"><c path="Float"/></width>
	<top set="null"><c path="Float"/></top>
	<right set="null"><c path="Float"/></right>
	<left set="null"><c path="Float"/></left>
	<height set="null"><c path="Float"/></height>
	<bottom set="null"><c path="Float"/></bottom>
</a></typedef>
	<typedef path="stx.js.AbstractView" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<media set="null"><t path="stx.js.Media"/></media>
	<document set="null"><t path="stx.js.Document"/></document>
</a></typedef>
	<typedef path="stx.js.Media" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<matchMedium set="method"><f a="mediaquery">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></matchMedium>
</a></typedef>
	<typedef path="stx.js.MessageEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<source set="null"><t path="stx.js.WindowProxy"/></source>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<ports set="null"><c path="stx.js.MessagePortArray"/></ports>
	<origin set="null"><t path="stx.js.DOMString"/></origin>
	<lastEventId set="null"><t path="stx.js.DOMString"/></lastEventId>
	<initMessageEventNS set="method"><f a="namespaceURI:typeArg:canBubbleArg:cancelableArg:dataArg:originArg:lastEventIdArg:sourceArg:portsArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<d/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.WindowProxy"/>
	<c path="stx.js.MessagePortArray"/>
	<e path="Void"/>
</f></initMessageEventNS>
	<initMessageEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:dataArg:originArg:lastEventIdArg:sourceArg:portsArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<d/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.WindowProxy"/>
	<c path="stx.js.MessagePortArray"/>
	<e path="Void"/>
</f></initMessageEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<data set="null"><d/></data>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.StorageEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<url set="null"><t path="stx.js.DOMString"/></url>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<storageArea set="null"><t path="stx.js.Storage"/></storageArea>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<oldValue set="null"><d/></oldValue>
	<newValue set="null"><d/></newValue>
	<key set="null"><t path="stx.js.DOMString"/></key>
	<initStorageEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:keyArg:oldValueArg:newValueArg:urlArg:storageAreaArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.DOMString"/>
	<d/>
	<d/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Storage"/>
	<e path="Void"/>
</f></initStorageEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.EventException" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><code><c path="Int"/></code></a></typedef>
	<typedef path="stx.js.EventSource" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<readyState set="null"><c path="Int"/></readyState>
	<onopen><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onopen>
	<onmessage><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onmessage>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<URL set="null"><t path="stx.js.DOMString"/></URL>
</a></typedef>
	<typedef path="stx.js.WheelEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<y set="null"><c path="Int"/></y>
	<x set="null"><c path="Int"/></x>
	<view set="null"><t path="stx.js.AbstractView"/></view>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<shiftKey set="null"><e path="Bool"/></shiftKey>
	<screenY set="null"><c path="Int"/></screenY>
	<screenX set="null"><c path="Int"/></screenX>
	<relatedTarget set="null"><t path="stx.js.EventTarget"/></relatedTarget>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<pageY set="null"><c path="Int"/></pageY>
	<pageX set="null"><c path="Int"/></pageX>
	<offsetY set="null"><c path="Int"/></offsetY>
	<offsetX set="null"><c path="Int"/></offsetX>
	<metaKey set="null"><e path="Bool"/></metaKey>
	<initWheelEventNS set="method"><f a="namespaceURIArg:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:buttonArg:relatedTargetArg:modifiersListArg:deltaXArg:deltaYArg:deltaZArg:deltaMode">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initWheelEventNS>
	<initWheelEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:buttonArg:relatedTargetArg:modifiersListArg:deltaXArg:deltaYArg:deltaZArg:deltaMode">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initWheelEvent>
	<initUIEventNS set="method"><f a="namespaceURI:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEventNS>
	<initUIEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEvent>
	<initMouseEventNS set="method"><f a="namespaceURIArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:buttonArg:relatedTargetArg:modifiersListArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></initMouseEventNS>
	<initMouseEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:ctrlKeyArg:altKeyArg:shiftKeyArg:metaKeyArg:buttonArg:relatedTargetArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<e path="Void"/>
</f></initMouseEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<getModifierState set="method"><f a="keyIdentifierArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></getModifierState>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<detail set="null"><c path="Int"/></detail>
	<deltaZ set="null"><c path="Int"/></deltaZ>
	<deltaY set="null"><c path="Int"/></deltaY>
	<deltaX set="null"><c path="Int"/></deltaX>
	<deltaMode set="null"><c path="Int"/></deltaMode>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<ctrlKey set="null"><e path="Bool"/></ctrlKey>
	<clientY set="null"><c path="Int"/></clientY>
	<clientX set="null"><c path="Int"/></clientX>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<button set="null"><c path="Int"/></button>
	<bubbles set="null"><e path="Bool"/></bubbles>
	<altKey set="null"><e path="Bool"/></altKey>
</a></typedef>
	<typedef path="stx.js.TextEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<view set="null"><t path="stx.js.AbstractView"/></view>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<inputMode set="null"><c path="Int"/></inputMode>
	<initUIEventNS set="method"><f a="namespaceURI:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEventNS>
	<initUIEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEvent>
	<initTextEventNS set="method"><f a="namespaceURIArg:typeArg:canBubbleArg:cancelableArg:viewArg:dataArg:inputMode">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initTextEventNS>
	<initTextEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:dataArg:inputMode">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initTextEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<detail set="null"><c path="Int"/></detail>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<data set="null"><t path="stx.js.DOMString"/></data>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.KeyboardEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<view set="null"><t path="stx.js.AbstractView"/></view>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<shiftKey set="null"><e path="Bool"/></shiftKey>
	<repeat set="null"><e path="Bool"/></repeat>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<metaKey set="null"><e path="Bool"/></metaKey>
	<keyLocation set="null"><c path="Int"/></keyLocation>
	<keyIdentifier set="null"><t path="stx.js.DOMString"/></keyIdentifier>
	<initUIEventNS set="method"><f a="namespaceURI:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEventNS>
	<initUIEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEvent>
	<initKeyboardEventNS set="method"><f a="namespaceURIArg:typeArg:canBubbleArg:cancelableArg:viewArg:keyIdentifierArg:keyLocationArg:modifiersListArg:repeat">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initKeyboardEventNS>
	<initKeyboardEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:keyIdentifierArg:keyLocationArg:modifiersListArg:repeat">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initKeyboardEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<getModifierState set="method"><f a="keyIdentifierArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></getModifierState>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<detail set="null"><c path="Int"/></detail>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<ctrlKey set="null"><e path="Bool"/></ctrlKey>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
	<altKey set="null"><e path="Bool"/></altKey>
</a></typedef>
	<typedef path="stx.js.CompositionEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<view set="null"><t path="stx.js.AbstractView"/></view>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<initUIEventNS set="method"><f a="namespaceURI:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEventNS>
	<initUIEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<initCompositionEventNS set="method"><f a="namespaceURIArg:typeArg:canBubbleArg:cancelableArg:viewArg:dataArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></initCompositionEventNS>
	<initCompositionEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:dataArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></initCompositionEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<detail set="null"><c path="Int"/></detail>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<data set="null"><t path="stx.js.DOMString"/></data>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.MouseWheelEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<y set="null"><c path="Int"/></y>
	<x set="null"><c path="Int"/></x>
	<wheelDelta set="null"><c path="Int"/></wheelDelta>
	<view set="null"><t path="stx.js.AbstractView"/></view>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<shiftKey set="null"><e path="Bool"/></shiftKey>
	<screenY set="null"><c path="Int"/></screenY>
	<screenX set="null"><c path="Int"/></screenX>
	<relatedTarget set="null"><t path="stx.js.EventTarget"/></relatedTarget>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<pageY set="null"><c path="Int"/></pageY>
	<pageX set="null"><c path="Int"/></pageX>
	<offsetY set="null"><c path="Int"/></offsetY>
	<offsetX set="null"><c path="Int"/></offsetX>
	<metaKey set="null"><e path="Bool"/></metaKey>
	<initUIEventNS set="method"><f a="namespaceURI:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEventNS>
	<initUIEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEvent>
	<initMouseWheelEventNS set="method"><f a="namespaceURIArg:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:buttonArg:relatedTargetArg:modifiersListArg:wheelDeltaArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initMouseWheelEventNS>
	<initMouseWheelEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:buttonArg:relatedTargetArg:modifiersListArg:wheelDeltaArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initMouseWheelEvent>
	<initMouseEventNS set="method"><f a="namespaceURIArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:buttonArg:relatedTargetArg:modifiersListArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></initMouseEventNS>
	<initMouseEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:ctrlKeyArg:altKeyArg:shiftKeyArg:metaKeyArg:buttonArg:relatedTargetArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<e path="Void"/>
</f></initMouseEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<getModifierState set="method"><f a="keyIdentifierArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></getModifierState>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<detail set="null"><c path="Int"/></detail>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<ctrlKey set="null"><e path="Bool"/></ctrlKey>
	<clientY set="null"><c path="Int"/></clientY>
	<clientX set="null"><c path="Int"/></clientX>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<button set="null"><c path="Int"/></button>
	<bubbles set="null"><e path="Bool"/></bubbles>
	<altKey set="null"><e path="Bool"/></altKey>
</a></typedef>
	<typedef path="stx.js.EventListener" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><f a="">
	<c path="stx.js.EventListener.T"/>
	<e path="Void"/>
</f></typedef>
	<typedef path="stx.js.MouseEventListener" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></typedef>
	<typedef path="stx.js.DragEventListener" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><t path="stx.js.EventListener"><t path="stx.js.DragEvent"/></t></typedef>
	<typedef path="stx.js.UIEventListener" params="T" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><t path="stx.js.EventListener"><t path="stx.js.UIEvent"/></t></typedef>
	<class path="stx.js.MessagePortArray" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" interface="1"/>
	<class path="stx.js.MessagePort" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" interface="1">
		<postMessage public="1" set="method"><f a="message:?ports">
	<d/>
	<c path="stx.js.MessagePortArray"/>
	<e path="Void"/>
</f></postMessage>
		<start public="1" set="method"><f a=""><e path="Void"/></f></start>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<onMessage public="1"><f a="">
	<d/>
	<d/>
</f></onMessage>
	</class>
	<typedef path="stx.js.Event" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.CustomEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<initCustomEventNS set="method"><f a="namespaceURIArg:typeArg:canBubbleArg:cancelableArg:detailArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.DOMObject"/>
	<e path="Void"/>
</f></initCustomEventNS>
	<initCustomEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:detailArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.DOMObject"/>
	<e path="Void"/>
</f></initCustomEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<detail set="null"><t path="stx.js.DOMObject"/></detail>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.FocusEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<view set="null"><t path="stx.js.AbstractView"/></view>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<relatedTarget set="null"><t path="stx.js.EventTarget"/></relatedTarget>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<initUIEventNS set="method"><f a="namespaceURI:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEventNS>
	<initUIEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEvent>
	<initFocusEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:relatedTargetArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<e path="Void"/>
</f></initFocusEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<detail set="null"><c path="Int"/></detail>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.DocumentEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<createEvent set="method"><f a="eventType">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Event"/>
</f></createEvent>
	<canDispatch set="method"><f a="namespaceURI:type">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></canDispatch>
</a></typedef>
	<typedef path="stx.js.UIEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<view set="null"><t path="stx.js.AbstractView"/></view>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<initUIEventNS set="method"><f a="namespaceURI:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEventNS>
	<initUIEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<detail set="null"><c path="Int"/></detail>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.MouseEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<y set="null"><c path="Int"/></y>
	<x set="null"><c path="Int"/></x>
	<view set="null"><t path="stx.js.AbstractView"/></view>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<shiftKey set="null"><e path="Bool"/></shiftKey>
	<screenY set="null"><c path="Int"/></screenY>
	<screenX set="null"><c path="Int"/></screenX>
	<relatedTarget set="null"><t path="stx.js.EventTarget"/></relatedTarget>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<pageY set="null"><c path="Int"/></pageY>
	<pageX set="null"><c path="Int"/></pageX>
	<offsetY set="null"><c path="Int"/></offsetY>
	<offsetX set="null"><c path="Int"/></offsetX>
	<metaKey set="null"><e path="Bool"/></metaKey>
	<initUIEventNS set="method"><f a="namespaceURI:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEventNS>
	<initUIEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEvent>
	<initMouseEventNS set="method"><f a="namespaceURIArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:buttonArg:relatedTargetArg:modifiersListArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></initMouseEventNS>
	<initMouseEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:ctrlKeyArg:altKeyArg:shiftKeyArg:metaKeyArg:buttonArg:relatedTargetArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<e path="Void"/>
</f></initMouseEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<getModifierState set="method"><f a="keyIdentifierArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></getModifierState>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<detail set="null"><c path="Int"/></detail>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<ctrlKey set="null"><e path="Bool"/></ctrlKey>
	<clientY set="null"><c path="Int"/></clientY>
	<clientX set="null"><c path="Int"/></clientX>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<button set="null"><c path="Int"/></button>
	<bubbles set="null"><e path="Bool"/></bubbles>
	<altKey set="null"><e path="Bool"/></altKey>
</a></typedef>
	<typedef path="stx.js.PopStateEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<state set="null"><d/></state>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<initPopStateEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:stateArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<d/>
	<e path="Void"/>
</f></initPopStateEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.BeforeUnloadEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<returnValue><t path="stx.js.DOMString"/></returnValue>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.PageTransitionEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<persisted set="null"><d/></persisted>
	<initPageTransitionEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:persistedArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<d/>
	<e path="Void"/>
</f></initPageTransitionEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.HashChangeEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<oldURL set="null"><t path="stx.js.DOMString"/></oldURL>
	<newURL set="null"><t path="stx.js.DOMString"/></newURL>
	<initHashChangeEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:oldURLArg:newURLArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></initHashChangeEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.DragEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<y set="null"><c path="Int"/></y>
	<x set="null"><c path="Int"/></x>
	<view set="null"><t path="stx.js.AbstractView"/></view>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<shiftKey set="null"><e path="Bool"/></shiftKey>
	<screenY set="null"><c path="Int"/></screenY>
	<screenX set="null"><c path="Int"/></screenX>
	<relatedTarget set="null"><t path="stx.js.EventTarget"/></relatedTarget>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<pageY set="null"><c path="Int"/></pageY>
	<pageX set="null"><c path="Int"/></pageX>
	<offsetY set="null"><c path="Int"/></offsetY>
	<offsetX set="null"><c path="Int"/></offsetX>
	<metaKey set="null"><e path="Bool"/></metaKey>
	<initUIEventNS set="method"><f a="namespaceURI:typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEventNS>
	<initUIEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initUIEvent>
	<initMouseEventNS set="method"><f a="namespaceURIArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:buttonArg:relatedTargetArg:modifiersListArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></initMouseEventNS>
	<initMouseEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:ctrlKeyArg:altKeyArg:shiftKeyArg:metaKeyArg:buttonArg:relatedTargetArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.AbstractView"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<e path="Void"/>
</f></initMouseEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<initDragEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:dummyArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:ctrlKeyArg:altKeyArg:shiftKeyArg:metaKeyArg:buttonArg:relatedTargetArg:dataTransferArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DataTransfer"/>
	<e path="Void"/>
</f></initDragEvent>
	<getModifierState set="method"><f a="keyIdentifierArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></getModifierState>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<detail set="null"><c path="Int"/></detail>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<dataTransfer set="null"><t path="stx.js.DataTransfer"/></dataTransfer>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<ctrlKey set="null"><e path="Bool"/></ctrlKey>
	<clientY set="null"><c path="Int"/></clientY>
	<clientX set="null"><c path="Int"/></clientX>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<button set="null"><c path="Int"/></button>
	<bubbles set="null"><e path="Bool"/></bubbles>
	<altKey set="null"><e path="Bool"/></altKey>
</a></typedef>
	<typedef path="stx.js.DataTransfer" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<types set="null"><c path="stx.js.DOMStringList"/></types>
	<setDragImage set="method"><f a="image:x:y">
	<t path="stx.js.Element"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setDragImage>
	<setData set="method"><f a="format:data">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setData>
	<getData set="method"><f a="format">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getData>
	<files set="null"><c path="stx.js.DomCollection"><t path="stx.js.File"/></c></files>
	<effectAllowed><t path="stx.js.DOMString"/></effectAllowed>
	<dropEffect><t path="stx.js.DOMString"/></dropEffect>
	<clearData set="method"><f a="?format">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></clearData>
	<addElement set="method"><f a="element">
	<t path="stx.js.Element"/>
	<e path="Void"/>
</f></addElement>
</a></typedef>
	<typedef path="stx.js.Blob" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<slice set="method"><f a="start:length">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.Blob"/>
</f></slice>
	<size set="null"><c path="Int"/></size>
</a></typedef>
	<typedef path="stx.js.File" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<urn set="null"><t path="stx.js.DOMString"/></urn>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<slice set="method"><f a="start:length">
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.Blob"/>
</f></slice>
	<size set="null"><c path="Int"/></size>
	<name set="null"><t path="stx.js.DOMString"/></name>
</a></typedef>
	<typedef path="stx.js.MutationEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<relatedNode set="null"><t path="stx.js.Node"/></relatedNode>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<prevValue set="null"><t path="stx.js.DOMString"/></prevValue>
	<newValue set="null"><t path="stx.js.DOMString"/></newValue>
	<initMutationEventNS set="method"><f a="namespaceURIArg:typeArg:canBubbleArg:cancelableArg:relatedNodeArg:prevValueArg:newValueArg:attrNameArg:attrChangeArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initMutationEventNS>
	<initMutationEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:relatedNodeArg:prevValueArg:newValueArg:attrNameArg:attrChangeArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initMutationEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
	<attrName set="null"><t path="stx.js.DOMString"/></attrName>
	<attrChange set="null"><c path="Int"/></attrChange>
</a></typedef>
	<typedef path="stx.js.MutationNameEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<relatedNode set="null"><t path="stx.js.Node"/></relatedNode>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<prevValue set="null"><t path="stx.js.DOMString"/></prevValue>
	<prevNodeName set="null"><t path="stx.js.DOMString"/></prevNodeName>
	<prevNamespaceURI set="null"><t path="stx.js.DOMString"/></prevNamespaceURI>
	<newValue set="null"><t path="stx.js.DOMString"/></newValue>
	<initMutationNameEventNS set="method"><f a="namespaceURIArg:typeArg:canBubbleArg:cancelableArg:relatedNodeArg:prevNamespaceURIArg:prevNodeNameArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></initMutationNameEventNS>
	<initMutationNameEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:relatedNodeArg:prevNamespaceURIArg:prevNodeNameArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></initMutationNameEvent>
	<initMutationEventNS set="method"><f a="namespaceURIArg:typeArg:canBubbleArg:cancelableArg:relatedNodeArg:prevValueArg:newValueArg:attrNameArg:attrChangeArg">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initMutationEventNS>
	<initMutationEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:relatedNodeArg:prevValueArg:newValueArg:attrNameArg:attrChangeArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="stx.js.Node"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<e path="Void"/>
</f></initMutationEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
	<attrName set="null"><t path="stx.js.DOMString"/></attrName>
	<attrChange set="null"><c path="Int"/></attrChange>
</a></typedef>
	<typedef path="stx.js.NodeIterator" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<whatToShow set="null"><c path="Int"/></whatToShow>
	<root set="null"><t path="stx.js.Node"/></root>
	<previousNode set="method"><f a=""><t path="stx.js.Node"/></f></previousNode>
	<nextNode set="method"><f a=""><t path="stx.js.Node"/></f></nextNode>
	<filter set="null"><t path="stx.js.NodeFilter"/></filter>
	<expandEntityReferences set="null"><e path="Bool"/></expandEntityReferences>
	<detach set="method"><f a=""><e path="Void"/></f></detach>
</a></typedef>
	<typedef path="stx.js.NodeFilter" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><acceptNode set="method"><f a="n">
	<t path="stx.js.Node"/>
	<c path="Int"/>
</f></acceptNode></a></typedef>
	<typedef path="stx.js.TreeWalker" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<whatToShow set="null"><c path="Int"/></whatToShow>
	<root set="null"><t path="stx.js.Node"/></root>
	<previousSibling set="method"><f a=""><t path="stx.js.Node"/></f></previousSibling>
	<previousNode set="method"><f a=""><t path="stx.js.Node"/></f></previousNode>
	<parentNode set="method"><f a=""><t path="stx.js.Node"/></f></parentNode>
	<nextSibling set="method"><f a=""><t path="stx.js.Node"/></f></nextSibling>
	<nextNode set="method"><f a=""><t path="stx.js.Node"/></f></nextNode>
	<lastChild set="method"><f a=""><t path="stx.js.Node"/></f></lastChild>
	<firstChild set="method"><f a=""><t path="stx.js.Node"/></f></firstChild>
	<filter set="null"><t path="stx.js.NodeFilter"/></filter>
	<expandEntityReferences set="null"><e path="Bool"/></expandEntityReferences>
	<currentNode set="null"><t path="stx.js.Node"/></currentNode>
</a></typedef>
	<typedef path="stx.js.DocumentTraversal" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<createTreeWalker set="method"><f a="root:whatToShow:filter:entityReferenceExpansion">
	<t path="stx.js.Node"/>
	<c path="Int"/>
	<t path="stx.js.NodeFilter"/>
	<e path="Bool"/>
	<t path="stx.js.TreeWalker"/>
</f></createTreeWalker>
	<createNodeIterator set="method"><f a="root:whatToShow:filter:entityReferenceExpansion">
	<t path="stx.js.Node"/>
	<c path="Int"/>
	<t path="stx.js.NodeFilter"/>
	<e path="Bool"/>
	<t path="stx.js.NodeIterator"/>
</f></createNodeIterator>
</a></typedef>
	<typedef path="stx.js.TimeRanges" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<length set="null"><c path="Int"/></length>
	<end set="method"><f a="index">
	<c path="Int"/>
	<c path="Float"/>
</f></end>
	<Float set="method"><f a="index">
	<c path="Int"/>
	<c path="Float"/>
</f></Float>
</a></typedef>
	<typedef path="stx.js.RangeException" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<getClientRects set="method"><f a=""><c path="stx.js.DomCollection"><t path="stx.js.ClientRect"/></c></f></getClientRects>
	<getBoundingClientRect set="method"><f a=""><t path="stx.js.ClientRect"/></f></getBoundingClientRect>
	<code><c path="Int"/></code>
</a></typedef>
	<typedef path="stx.js.Range" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<toString set="method"><f a=""><t path="stx.js.DOMString"/></f></toString>
	<surroundContents set="method"><f a="newParent">
	<t path="stx.js.Node"/>
	<e path="Void"/>
</f></surroundContents>
	<startOffset set="null"><c path="Int"/></startOffset>
	<startContainer set="null"><t path="stx.js.Node"/></startContainer>
	<setStartBefore set="method"><f a="refNode">
	<t path="stx.js.Node"/>
	<e path="Void"/>
</f></setStartBefore>
	<setStartAfter set="method"><f a="refNode">
	<t path="stx.js.Node"/>
	<e path="Void"/>
</f></setStartAfter>
	<setStart set="method"><f a="refNode:offset">
	<t path="stx.js.Node"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setStart>
	<setEndBefore set="method"><f a="refNode">
	<t path="stx.js.Node"/>
	<e path="Void"/>
</f></setEndBefore>
	<setEndAfter set="method"><f a="refNode">
	<t path="stx.js.Node"/>
	<e path="Void"/>
</f></setEndAfter>
	<setEnd set="method"><f a="refNode:offset">
	<t path="stx.js.Node"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setEnd>
	<selectNodeContents set="method"><f a="refNode">
	<t path="stx.js.Node"/>
	<e path="Void"/>
</f></selectNodeContents>
	<selectNode set="method"><f a="refNode">
	<t path="stx.js.Node"/>
	<e path="Void"/>
</f></selectNode>
	<insertNode set="method"><f a="newNode">
	<t path="stx.js.Node"/>
	<e path="Void"/>
</f></insertNode>
	<extractContents set="method"><f a=""><t path="stx.js.DocumentFragment"/></f></extractContents>
	<endOffset set="null"><c path="Int"/></endOffset>
	<endContainer set="null"><t path="stx.js.Node"/></endContainer>
	<detach set="method"><f a=""><e path="Void"/></f></detach>
	<deleteContents set="method"><f a=""><e path="Void"/></f></deleteContents>
	<compareBoundaryPoints set="method"><f a="how:sourceRange">
	<c path="Int"/>
	<t path="stx.js.Range"/>
	<c path="Int"/>
</f></compareBoundaryPoints>
	<commonAncestorContainer set="null"><t path="stx.js.Node"/></commonAncestorContainer>
	<collapsed set="null"><e path="Bool"/></collapsed>
	<collapse set="method"><f a="toStart">
	<e path="Bool"/>
	<e path="Void"/>
</f></collapse>
	<cloneRange set="method"><f a=""><t path="stx.js.Range"/></f></cloneRange>
	<cloneContents set="method"><f a=""><t path="stx.js.DocumentFragment"/></f></cloneContents>
</a></typedef>
	<typedef path="stx.js.DocumentRange" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><createRange set="method"><f a=""><t path="stx.js.Range"/></f></createRange></a></typedef>
	<typedef path="stx.js.StyleSheet" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<title set="null"><t path="stx.js.DOMString"/></title>
	<parentStyleSheet set="null"><t path="stx.js.StyleSheet"/></parentStyleSheet>
	<ownerNode set="null"><t path="stx.js.Node"/></ownerNode>
	<media set="null"><c path="stx.js.MediaList"/></media>
	<href set="null"><t path="stx.js.DOMString"/></href>
	<disabled set="null"><e path="Bool"/></disabled>
</a></typedef>
	<class path="stx.js.MediaList" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom" interface="1">
		<mediaText public="1"><t path="stx.js.DOMString"/></mediaText>
		<length public="1" set="null"><c path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></item>
		<deleteMedium public="1" set="method"><f a="oldMedium">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></deleteMedium>
		<appendMedium public="1" set="method"><f a="newMedium">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></appendMedium>
	</class>
	<typedef path="stx.js.LinkStyle" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><sheet set="null"><t path="stx.js.StyleSheet"/></sheet></a></typedef>
	<typedef path="stx.js.CSSRule" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><c path="Int"/></type>
	<parentStyleSheet set="null"><t path="stx.js.CSSStyleSheet"/></parentStyleSheet>
	<parentRule set="null"><t path="stx.js.CSSRule"/></parentRule>
	<cssText><t path="stx.js.DOMString"/></cssText>
</a></typedef>
	<typedef path="stx.js.CSSStyleRule" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><c path="Int"/></type>
	<style set="null"><t path="stx.js.CSSStyleDeclaration"/></style>
	<selectorText><t path="stx.js.DOMString"/></selectorText>
	<parentStyleSheet set="null"><t path="stx.js.CSSStyleSheet"/></parentStyleSheet>
	<parentRule set="null"><t path="stx.js.CSSRule"/></parentRule>
	<cssText><t path="stx.js.DOMString"/></cssText>
</a></typedef>
	<typedef path="stx.js.CSSMediaRule" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><c path="Int"/></type>
	<stylesheets set="null"><c path="stx.js.MediaList"/></stylesheets>
	<parentStyleSheet set="null"><t path="stx.js.CSSStyleSheet"/></parentStyleSheet>
	<parentRule set="null"><t path="stx.js.CSSRule"/></parentRule>
	<insertRule set="method"><f a="rule:index">
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<c path="Int"/>
</f></insertRule>
	<deleteRule set="method"><f a="index">
	<c path="Int"/>
	<e path="Void"/>
</f></deleteRule>
	<cssText><t path="stx.js.DOMString"/></cssText>
	<cssRules set="null"><c path="stx.js.DomCollection"><t path="stx.js.CSSRule"/></c></cssRules>
</a></typedef>
	<typedef path="stx.js.CSSFontFaceRule" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><c path="Int"/></type>
	<style set="null"><t path="stx.js.CSSStyleDeclaration"/></style>
	<parentStyleSheet set="null"><t path="stx.js.CSSStyleSheet"/></parentStyleSheet>
	<parentRule set="null"><t path="stx.js.CSSRule"/></parentRule>
	<cssText><t path="stx.js.DOMString"/></cssText>
</a></typedef>
	<typedef path="stx.js.CSSPageRule" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><c path="Int"/></type>
	<style set="null"><t path="stx.js.CSSStyleDeclaration"/></style>
	<selectorText><t path="stx.js.DOMString"/></selectorText>
	<parentStyleSheet set="null"><t path="stx.js.CSSStyleSheet"/></parentStyleSheet>
	<parentRule set="null"><t path="stx.js.CSSRule"/></parentRule>
	<cssText><t path="stx.js.DOMString"/></cssText>
</a></typedef>
	<typedef path="stx.js.CSSImportRule" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><c path="Int"/></type>
	<styleSheet set="null"><t path="stx.js.CSSStyleSheet"/></styleSheet>
	<parentStyleSheet set="null"><t path="stx.js.CSSStyleSheet"/></parentStyleSheet>
	<parentRule set="null"><t path="stx.js.CSSRule"/></parentRule>
	<media set="null"><c path="stx.js.MediaList"/></media>
	<href set="null"><t path="stx.js.DOMString"/></href>
	<cssText><t path="stx.js.DOMString"/></cssText>
</a></typedef>
	<typedef path="stx.js.CSSCharsetRule" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><c path="Int"/></type>
	<parentStyleSheet set="null"><t path="stx.js.CSSStyleSheet"/></parentStyleSheet>
	<parentRule set="null"><t path="stx.js.CSSRule"/></parentRule>
	<encoding><t path="stx.js.DOMString"/></encoding>
	<cssText><t path="stx.js.DOMString"/></cssText>
</a></typedef>
	<typedef path="stx.js.CSSUnknownRule" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><c path="Int"/></type>
	<parentStyleSheet set="null"><t path="stx.js.CSSStyleSheet"/></parentStyleSheet>
	<parentRule set="null"><t path="stx.js.CSSRule"/></parentRule>
	<cssText><t path="stx.js.DOMString"/></cssText>
</a></typedef>
	<typedef path="stx.js.CSS2Properties" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<zIndex><t path="stx.js.DOMString"/></zIndex>
	<wordSpacing><t path="stx.js.DOMString"/></wordSpacing>
	<width><t path="stx.js.DOMString"/></width>
	<widows><t path="stx.js.DOMString"/></widows>
	<whiteSpace><t path="stx.js.DOMString"/></whiteSpace>
	<volume><t path="stx.js.DOMString"/></volume>
	<voiceFamily><t path="stx.js.DOMString"/></voiceFamily>
	<visibility><t path="stx.js.DOMString"/></visibility>
	<verticalAlign><t path="stx.js.DOMString"/></verticalAlign>
	<unicodeBidi><t path="stx.js.DOMString"/></unicodeBidi>
	<top><t path="stx.js.DOMString"/></top>
	<textTransform><t path="stx.js.DOMString"/></textTransform>
	<textShadow><t path="stx.js.DOMString"/></textShadow>
	<textIndent><t path="stx.js.DOMString"/></textIndent>
	<textDecoration><t path="stx.js.DOMString"/></textDecoration>
	<textAlign><t path="stx.js.DOMString"/></textAlign>
	<tableLayout><t path="stx.js.DOMString"/></tableLayout>
	<stress><t path="stx.js.DOMString"/></stress>
	<speechRate><t path="stx.js.DOMString"/></speechRate>
	<speakPunctuation><t path="stx.js.DOMString"/></speakPunctuation>
	<speakNumeral><t path="stx.js.DOMString"/></speakNumeral>
	<speakHeader><t path="stx.js.DOMString"/></speakHeader>
	<speak><t path="stx.js.DOMString"/></speak>
	<size><t path="stx.js.DOMString"/></size>
	<right><t path="stx.js.DOMString"/></right>
	<richness><t path="stx.js.DOMString"/></richness>
	<quotes><t path="stx.js.DOMString"/></quotes>
	<position><t path="stx.js.DOMString"/></position>
	<playDuring><t path="stx.js.DOMString"/></playDuring>
	<pitchRange><t path="stx.js.DOMString"/></pitchRange>
	<pitch><t path="stx.js.DOMString"/></pitch>
	<pauseBefore><t path="stx.js.DOMString"/></pauseBefore>
	<pauseAfter><t path="stx.js.DOMString"/></pauseAfter>
	<pause><t path="stx.js.DOMString"/></pause>
	<pageBreakInside><t path="stx.js.DOMString"/></pageBreakInside>
	<pageBreakBefore><t path="stx.js.DOMString"/></pageBreakBefore>
	<pageBreakAfter><t path="stx.js.DOMString"/></pageBreakAfter>
	<page><t path="stx.js.DOMString"/></page>
	<paddingTop><t path="stx.js.DOMString"/></paddingTop>
	<paddingRight><t path="stx.js.DOMString"/></paddingRight>
	<paddingLeft><t path="stx.js.DOMString"/></paddingLeft>
	<paddingBottom><t path="stx.js.DOMString"/></paddingBottom>
	<padding><t path="stx.js.DOMString"/></padding>
	<overflow><t path="stx.js.DOMString"/></overflow>
	<outlineWidth><t path="stx.js.DOMString"/></outlineWidth>
	<outlineStyle><t path="stx.js.DOMString"/></outlineStyle>
	<outlineColor><t path="stx.js.DOMString"/></outlineColor>
	<outline><t path="stx.js.DOMString"/></outline>
	<orphans><t path="stx.js.DOMString"/></orphans>
	<opacity><t path="stx.js.DOMString"/></opacity>
	<minWidth><t path="stx.js.DOMString"/></minWidth>
	<minHeight><t path="stx.js.DOMString"/></minHeight>
	<maxWidth><t path="stx.js.DOMString"/></maxWidth>
	<maxHeight><t path="stx.js.DOMString"/></maxHeight>
	<marks><t path="stx.js.DOMString"/></marks>
	<markerOffset><t path="stx.js.DOMString"/></markerOffset>
	<marginTop><t path="stx.js.DOMString"/></marginTop>
	<marginRight><t path="stx.js.DOMString"/></marginRight>
	<marginLeft><t path="stx.js.DOMString"/></marginLeft>
	<marginBottom><t path="stx.js.DOMString"/></marginBottom>
	<margin><t path="stx.js.DOMString"/></margin>
	<listStyleType><t path="stx.js.DOMString"/></listStyleType>
	<listStylePosition><t path="stx.js.DOMString"/></listStylePosition>
	<listStyleImage><t path="stx.js.DOMString"/></listStyleImage>
	<listStyle><t path="stx.js.DOMString"/></listStyle>
	<lineHeight><t path="stx.js.DOMString"/></lineHeight>
	<letterSpacing><t path="stx.js.DOMString"/></letterSpacing>
	<left><t path="stx.js.DOMString"/></left>
	<height><t path="stx.js.DOMString"/></height>
	<fontWeight><t path="stx.js.DOMString"/></fontWeight>
	<fontVariant><t path="stx.js.DOMString"/></fontVariant>
	<fontStyle><t path="stx.js.DOMString"/></fontStyle>
	<fontStretch><t path="stx.js.DOMString"/></fontStretch>
	<fontSizeAdjust><t path="stx.js.DOMString"/></fontSizeAdjust>
	<fontSize><t path="stx.js.DOMString"/></fontSize>
	<fontFamily><t path="stx.js.DOMString"/></fontFamily>
	<font><t path="stx.js.DOMString"/></font>
	<emptyCells><t path="stx.js.DOMString"/></emptyCells>
	<elevation><t path="stx.js.DOMString"/></elevation>
	<display><t path="stx.js.DOMString"/></display>
	<direction><t path="stx.js.DOMString"/></direction>
	<cursor><t path="stx.js.DOMString"/></cursor>
	<cueBefore><t path="stx.js.DOMString"/></cueBefore>
	<cueAfter><t path="stx.js.DOMString"/></cueAfter>
	<cue><t path="stx.js.DOMString"/></cue>
	<cssFloat><t path="stx.js.DOMString"/></cssFloat>
	<counterReset><t path="stx.js.DOMString"/></counterReset>
	<counterIncrement><t path="stx.js.DOMString"/></counterIncrement>
	<content><t path="stx.js.DOMString"/></content>
	<color><t path="stx.js.DOMString"/></color>
	<clip><t path="stx.js.DOMString"/></clip>
	<clear><t path="stx.js.DOMString"/></clear>
	<captionSide><t path="stx.js.DOMString"/></captionSide>
	<bottom><t path="stx.js.DOMString"/></bottom>
	<borderWidth><t path="stx.js.DOMString"/></borderWidth>
	<borderTopWidth><t path="stx.js.DOMString"/></borderTopWidth>
	<borderTopStyle><t path="stx.js.DOMString"/></borderTopStyle>
	<borderTopColor><t path="stx.js.DOMString"/></borderTopColor>
	<borderTop><t path="stx.js.DOMString"/></borderTop>
	<borderStyle><t path="stx.js.DOMString"/></borderStyle>
	<borderSpacing><t path="stx.js.DOMString"/></borderSpacing>
	<borderRightWidth><t path="stx.js.DOMString"/></borderRightWidth>
	<borderRightStyle><t path="stx.js.DOMString"/></borderRightStyle>
	<borderRightColor><t path="stx.js.DOMString"/></borderRightColor>
	<borderRight><t path="stx.js.DOMString"/></borderRight>
	<borderLeftWidth><t path="stx.js.DOMString"/></borderLeftWidth>
	<borderLeftStyle><t path="stx.js.DOMString"/></borderLeftStyle>
	<borderLeftColor><t path="stx.js.DOMString"/></borderLeftColor>
	<borderLeft><t path="stx.js.DOMString"/></borderLeft>
	<borderHeight><t path="stx.js.DOMString"/></borderHeight>
	<borderColor><t path="stx.js.DOMString"/></borderColor>
	<borderCollapse><t path="stx.js.DOMString"/></borderCollapse>
	<borderBottomWidth><t path="stx.js.DOMString"/></borderBottomWidth>
	<borderBottomStyle><t path="stx.js.DOMString"/></borderBottomStyle>
	<borderBottomColor><t path="stx.js.DOMString"/></borderBottomColor>
	<borderBottom><t path="stx.js.DOMString"/></borderBottom>
	<border><t path="stx.js.DOMString"/></border>
	<backgroundRepeat><t path="stx.js.DOMString"/></backgroundRepeat>
	<backgroundPosition><t path="stx.js.DOMString"/></backgroundPosition>
	<backgroundImage><t path="stx.js.DOMString"/></backgroundImage>
	<backgroundColor><t path="stx.js.DOMString"/></backgroundColor>
	<backgroundAttachment><t path="stx.js.DOMString"/></backgroundAttachment>
	<background><t path="stx.js.DOMString"/></background>
	<azimuth><t path="stx.js.DOMString"/></azimuth>
</a></typedef>
	<typedef path="stx.js.CSSStyleDeclaration" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<setProperty set="method"><f a="propertyName:value:priority">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setProperty>
	<removeProperty set="method"><f a="propertyName">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></removeProperty>
	<parentRule set="null"><t path="stx.js.CSSRule"/></parentRule>
	<length set="null"><c path="Int"/></length>
	<item set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></item>
	<isPropertyImplicit set="method"><f a="propertyName">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></isPropertyImplicit>
	<getPropertyValue set="method"><f a="propertyName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getPropertyValue>
	<getPropertyShorthand set="method"><f a="propertyName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getPropertyShorthand>
	<getPropertyPriority set="method"><f a="propertyName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getPropertyPriority>
	<getPropertyCSSValue set="method"><f a="propertyName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CSSValue"/>
</f></getPropertyCSSValue>
	<cssText><t path="stx.js.DOMString"/></cssText>
</a></typedef>
	<typedef path="stx.js.CSSInlineStyleDeclaration" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<zIndex><t path="stx.js.DOMString"/></zIndex>
	<wordSpacing><t path="stx.js.DOMString"/></wordSpacing>
	<width><t path="stx.js.DOMString"/></width>
	<widows><t path="stx.js.DOMString"/></widows>
	<whiteSpace><t path="stx.js.DOMString"/></whiteSpace>
	<volume><t path="stx.js.DOMString"/></volume>
	<voiceFamily><t path="stx.js.DOMString"/></voiceFamily>
	<visibility><t path="stx.js.DOMString"/></visibility>
	<verticalAlign><t path="stx.js.DOMString"/></verticalAlign>
	<unicodeBidi><t path="stx.js.DOMString"/></unicodeBidi>
	<top><t path="stx.js.DOMString"/></top>
	<textTransform><t path="stx.js.DOMString"/></textTransform>
	<textShadow><t path="stx.js.DOMString"/></textShadow>
	<textIndent><t path="stx.js.DOMString"/></textIndent>
	<textDecoration><t path="stx.js.DOMString"/></textDecoration>
	<textAlign><t path="stx.js.DOMString"/></textAlign>
	<tableLayout><t path="stx.js.DOMString"/></tableLayout>
	<stress><t path="stx.js.DOMString"/></stress>
	<speechRate><t path="stx.js.DOMString"/></speechRate>
	<speakPunctuation><t path="stx.js.DOMString"/></speakPunctuation>
	<speakNumeral><t path="stx.js.DOMString"/></speakNumeral>
	<speakHeader><t path="stx.js.DOMString"/></speakHeader>
	<speak><t path="stx.js.DOMString"/></speak>
	<size><t path="stx.js.DOMString"/></size>
	<setProperty set="method"><f a="propertyName:value:priority">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setProperty>
	<right><t path="stx.js.DOMString"/></right>
	<richness><t path="stx.js.DOMString"/></richness>
	<quotes><t path="stx.js.DOMString"/></quotes>
	<position><t path="stx.js.DOMString"/></position>
	<playDuring><t path="stx.js.DOMString"/></playDuring>
	<pitchRange><t path="stx.js.DOMString"/></pitchRange>
	<pitch><t path="stx.js.DOMString"/></pitch>
	<pauseBefore><t path="stx.js.DOMString"/></pauseBefore>
	<pauseAfter><t path="stx.js.DOMString"/></pauseAfter>
	<pause><t path="stx.js.DOMString"/></pause>
	<parentRule set="null"><t path="stx.js.CSSRule"/></parentRule>
	<pageBreakInside><t path="stx.js.DOMString"/></pageBreakInside>
	<pageBreakBefore><t path="stx.js.DOMString"/></pageBreakBefore>
	<pageBreakAfter><t path="stx.js.DOMString"/></pageBreakAfter>
	<page><t path="stx.js.DOMString"/></page>
	<paddingTop><t path="stx.js.DOMString"/></paddingTop>
	<paddingRight><t path="stx.js.DOMString"/></paddingRight>
	<paddingLeft><t path="stx.js.DOMString"/></paddingLeft>
	<paddingBottom><t path="stx.js.DOMString"/></paddingBottom>
	<padding><t path="stx.js.DOMString"/></padding>
	<overflow><t path="stx.js.DOMString"/></overflow>
	<outlineWidth><t path="stx.js.DOMString"/></outlineWidth>
	<outlineStyle><t path="stx.js.DOMString"/></outlineStyle>
	<outlineColor><t path="stx.js.DOMString"/></outlineColor>
	<outline><t path="stx.js.DOMString"/></outline>
	<orphans><t path="stx.js.DOMString"/></orphans>
	<opacity><t path="stx.js.DOMString"/></opacity>
	<minWidth><t path="stx.js.DOMString"/></minWidth>
	<minHeight><t path="stx.js.DOMString"/></minHeight>
	<maxWidth><t path="stx.js.DOMString"/></maxWidth>
	<maxHeight><t path="stx.js.DOMString"/></maxHeight>
	<marks><t path="stx.js.DOMString"/></marks>
	<markerOffset><t path="stx.js.DOMString"/></markerOffset>
	<marginTop><t path="stx.js.DOMString"/></marginTop>
	<marginRight><t path="stx.js.DOMString"/></marginRight>
	<marginLeft><t path="stx.js.DOMString"/></marginLeft>
	<marginBottom><t path="stx.js.DOMString"/></marginBottom>
	<margin><t path="stx.js.DOMString"/></margin>
	<listStyleType><t path="stx.js.DOMString"/></listStyleType>
	<listStylePosition><t path="stx.js.DOMString"/></listStylePosition>
	<listStyleImage><t path="stx.js.DOMString"/></listStyleImage>
	<listStyle><t path="stx.js.DOMString"/></listStyle>
	<lineHeight><t path="stx.js.DOMString"/></lineHeight>
	<letterSpacing><t path="stx.js.DOMString"/></letterSpacing>
	<length set="null"><c path="Int"/></length>
	<left><t path="stx.js.DOMString"/></left>
	<item set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></item>
	<height><t path="stx.js.DOMString"/></height>
	<getPropertyValue set="method"><f a="propertyName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getPropertyValue>
	<getPropertyPriority set="method"><f a="propertyName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getPropertyPriority>
	<getPropertyCSSValue set="method"><f a="propertyName">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CSSValue"/>
</f></getPropertyCSSValue>
	<fontWeight><t path="stx.js.DOMString"/></fontWeight>
	<fontVariant><t path="stx.js.DOMString"/></fontVariant>
	<fontStyle><t path="stx.js.DOMString"/></fontStyle>
	<fontStretch><t path="stx.js.DOMString"/></fontStretch>
	<fontSizeAdjust><t path="stx.js.DOMString"/></fontSizeAdjust>
	<fontSize><t path="stx.js.DOMString"/></fontSize>
	<fontFamily><t path="stx.js.DOMString"/></fontFamily>
	<font><t path="stx.js.DOMString"/></font>
	<emptyCells><t path="stx.js.DOMString"/></emptyCells>
	<elevation><t path="stx.js.DOMString"/></elevation>
	<display><t path="stx.js.DOMString"/></display>
	<direction><t path="stx.js.DOMString"/></direction>
	<cursor><t path="stx.js.DOMString"/></cursor>
	<cueBefore><t path="stx.js.DOMString"/></cueBefore>
	<cueAfter><t path="stx.js.DOMString"/></cueAfter>
	<cue><t path="stx.js.DOMString"/></cue>
	<cssText><t path="stx.js.DOMString"/></cssText>
	<cssFloat><t path="stx.js.DOMString"/></cssFloat>
	<counterReset><t path="stx.js.DOMString"/></counterReset>
	<counterIncrement><t path="stx.js.DOMString"/></counterIncrement>
	<content><t path="stx.js.DOMString"/></content>
	<color><t path="stx.js.DOMString"/></color>
	<clip><t path="stx.js.DOMString"/></clip>
	<clear><t path="stx.js.DOMString"/></clear>
	<captionSide><t path="stx.js.DOMString"/></captionSide>
	<bottom><t path="stx.js.DOMString"/></bottom>
	<borderWidth><t path="stx.js.DOMString"/></borderWidth>
	<borderTopWidth><t path="stx.js.DOMString"/></borderTopWidth>
	<borderTopStyle><t path="stx.js.DOMString"/></borderTopStyle>
	<borderTopColor><t path="stx.js.DOMString"/></borderTopColor>
	<borderTop><t path="stx.js.DOMString"/></borderTop>
	<borderStyle><t path="stx.js.DOMString"/></borderStyle>
	<borderSpacing><t path="stx.js.DOMString"/></borderSpacing>
	<borderRightWidth><t path="stx.js.DOMString"/></borderRightWidth>
	<borderRightStyle><t path="stx.js.DOMString"/></borderRightStyle>
	<borderRightColor><t path="stx.js.DOMString"/></borderRightColor>
	<borderRight><t path="stx.js.DOMString"/></borderRight>
	<borderLeftWidth><t path="stx.js.DOMString"/></borderLeftWidth>
	<borderLeftStyle><t path="stx.js.DOMString"/></borderLeftStyle>
	<borderLeftColor><t path="stx.js.DOMString"/></borderLeftColor>
	<borderLeft><t path="stx.js.DOMString"/></borderLeft>
	<borderHeight><t path="stx.js.DOMString"/></borderHeight>
	<borderColor><t path="stx.js.DOMString"/></borderColor>
	<borderCollapse><t path="stx.js.DOMString"/></borderCollapse>
	<borderBottomWidth><t path="stx.js.DOMString"/></borderBottomWidth>
	<borderBottomStyle><t path="stx.js.DOMString"/></borderBottomStyle>
	<borderBottomColor><t path="stx.js.DOMString"/></borderBottomColor>
	<borderBottom><t path="stx.js.DOMString"/></borderBottom>
	<border><t path="stx.js.DOMString"/></border>
	<backgroundRepeat><t path="stx.js.DOMString"/></backgroundRepeat>
	<backgroundPosition><t path="stx.js.DOMString"/></backgroundPosition>
	<backgroundImage><t path="stx.js.DOMString"/></backgroundImage>
	<backgroundColor><t path="stx.js.DOMString"/></backgroundColor>
	<backgroundAttachment><t path="stx.js.DOMString"/></backgroundAttachment>
	<background><t path="stx.js.DOMString"/></background>
	<azimuth><t path="stx.js.DOMString"/></azimuth>
</a></typedef>
	<typedef path="stx.js.CSSValue" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<cssValueType set="null"><c path="Int"/></cssValueType>
	<cssText><t path="stx.js.DOMString"/></cssText>
</a></typedef>
	<typedef path="stx.js.CSSPrimitiveValue" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<setStringValue set="method"><f a="stringType:stringValue">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setStringValue>
	<setFloatValue set="method"><f a="unitType:FloatValue">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setFloatValue>
	<primitiveType set="null"><c path="Int"/></primitiveType>
	<getStringValue set="method"><f a=""><t path="stx.js.DOMString"/></f></getStringValue>
	<getRectValue set="method"><f a=""><t path="stx.js.Rect"/></f></getRectValue>
	<getRGBValue set="method"><f a=""><t path="stx.js.RGBColor"/></f></getRGBValue>
	<getFloatValue set="method"><f a="unitType">
	<c path="Int"/>
	<c path="Float"/>
</f></getFloatValue>
	<getCounterValue set="method"><f a=""><t path="stx.js.Counter"/></f></getCounterValue>
	<cssValueType set="null"><c path="Int"/></cssValueType>
	<cssText><t path="stx.js.DOMString"/></cssText>
</a></typedef>
	<typedef path="stx.js.RGBColor" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<red set="null"><t path="stx.js.CSSPrimitiveValue"/></red>
	<green set="null"><t path="stx.js.CSSPrimitiveValue"/></green>
	<blue set="null"><t path="stx.js.CSSPrimitiveValue"/></blue>
</a></typedef>
	<typedef path="stx.js.Rect" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<top set="null"><t path="stx.js.CSSPrimitiveValue"/></top>
	<right set="null"><t path="stx.js.CSSPrimitiveValue"/></right>
	<left set="null"><t path="stx.js.CSSPrimitiveValue"/></left>
	<bottom set="null"><t path="stx.js.CSSPrimitiveValue"/></bottom>
</a></typedef>
	<typedef path="stx.js.Counter" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<separator set="null"><t path="stx.js.DOMString"/></separator>
	<listStyle set="null"><t path="stx.js.DOMString"/></listStyle>
	<identifier set="null"><t path="stx.js.DOMString"/></identifier>
</a></typedef>
	<typedef path="stx.js.CSSStyleSheet" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<title set="null"><t path="stx.js.DOMString"/></title>
	<parentStyleSheet set="null"><t path="stx.js.StyleSheet"/></parentStyleSheet>
	<ownerRule set="null"><t path="stx.js.CSSRule"/></ownerRule>
	<ownerNode set="null"><t path="stx.js.Node"/></ownerNode>
	<media set="null"><c path="stx.js.MediaList"/></media>
	<insertRule set="method"><f a="rule:index">
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
	<c path="Int"/>
</f></insertRule>
	<href set="null"><t path="stx.js.DOMString"/></href>
	<disabled set="null"><e path="Bool"/></disabled>
	<deleteRule set="method"><f a="index">
	<c path="Int"/>
	<e path="Void"/>
</f></deleteRule>
	<cssRules set="null"><c path="stx.js.DomCollection"><t path="stx.js.CSSRule"/></c></cssRules>
</a></typedef>
	<typedef path="stx.js.ViewCSS" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<media set="null"><t path="stx.js.Media"/></media>
	<getComputedStyle set="method"><f a="elt:pseudoElt">
	<t path="stx.js.Element"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CSSStyleDeclaration"/>
</f></getComputedStyle>
	<document set="null"><t path="stx.js.Document"/></document>
</a></typedef>
	<typedef path="stx.js.DOMImplementationCSS" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<getDOMImplementationList set="method"><f a="features">
	<t path="stx.js.DOMString"/>
	<c path="stx.js.DomCollection"><t path="stx.js.DOMImplementation"/></c>
</f></getDOMImplementationList>
	<getDOMImplementation set="method"><f a="features">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMImplementation"/>
</f></getDOMImplementation>
	<createCSSStyleSheet set="method"><f a="title:media">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CSSStyleSheet"/>
</f></createCSSStyleSheet>
</a></typedef>
	<typedef path="stx.js.Navigator" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<yieldForStorageUpdates set="method"><f a=""><e path="Void"/></f></yieldForStorageUpdates>
	<vendorSub><t path="stx.js.DOMString"/></vendorSub>
	<vendor><t path="stx.js.DOMString"/></vendor>
	<userAgent set="null"><t path="stx.js.DOMString"/></userAgent>
	<taintEnabled set="method"><f a=""><e path="Bool"/></f></taintEnabled>
	<registerProtocolHandler set="method"><f a="scheme:url:title">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></registerProtocolHandler>
	<registerContentHandler set="method"><f a="mimeType:url:title">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></registerContentHandler>
	<productSub><t path="stx.js.DOMString"/></productSub>
	<product><t path="stx.js.DOMString"/></product>
	<plugins set="null"><c path="stx.js.DomCollection"><t path="stx.js.Plugin"/></c></plugins>
	<platform set="null"><t path="stx.js.DOMString"/></platform>
	<onLine set="null"><e path="Bool"/></onLine>
	<mimeTypes><t path="stx.js.MimeTypeArray"/></mimeTypes>
	<language set="null"><t path="stx.js.DOMString"/></language>
	<javaEnabled set="method"><f a=""><e path="Bool"/></f></javaEnabled>
	<getStorageUpdates set="method"><f a=""><e path="Void"/></f></getStorageUpdates>
	<geolocation set="null"><t path="stx.js.DOMString"/></geolocation>
	<cookieEnabled set="null"><t path="stx.js.DOMString"/></cookieEnabled>
	<appVersion set="null"><t path="stx.js.DOMString"/></appVersion>
	<appName set="null"><t path="stx.js.DOMString"/></appName>
	<appCodeName set="null"><t path="stx.js.DOMString"/></appCodeName>
</a></typedef>
	<typedef path="stx.js.Plugin" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<namedItem set="method"><f a="name">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.Plugin"/>
</f></namedItem>
	<name set="null"><t path="stx.js.DOMString"/></name>
	<length set="null"><c path="Int"/></length>
	<item set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.Plugin"/>
</f></item>
	<filename set="null"><t path="stx.js.DOMString"/></filename>
	<description set="null"><t path="stx.js.DOMString"/></description>
</a></typedef>
	<typedef path="stx.js.MimeTypeArray" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a/></typedef>
	<typedef path="stx.js.History" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<replaceState set="method"><f a="data:title:?url">
	<d/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></replaceState>
	<pushState set="method"><f a="data:title:?url">
	<d/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></pushState>
	<length set="null"><c path="Int"/></length>
	<go set="method"><f a="?delta">
	<c path="Int"/>
	<e path="Void"/>
</f></go>
	<forward set="method"><f a=""><e path="Void"/></f></forward>
	<back set="method"><f a=""><e path="Void"/></f></back>
</a></typedef>
	<typedef path="stx.js.Location" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<search><c path="String"/></search>
	<resolveURL set="method"><f a="url">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></resolveURL>
	<replace set="method"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></replace>
	<reload set="method"><f a=""><e path="Void"/></f></reload>
	<protocol><c path="String"/></protocol>
	<port><c path="String"/></port>
	<pathname><c path="String"/></pathname>
	<href><c path="String"/></href>
	<hostname><c path="String"/></hostname>
	<host><c path="String"/></host>
	<hash><c path="String"/></hash>
	<assign set="method"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></assign>
</a></typedef>
	<typedef path="stx.js.Screen" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<width set="null"><c path="String"/></width>
	<top set="null"><c path="String"/></top>
	<pixelDepth set="null"><c path="String"/></pixelDepth>
	<left set="null"><c path="String"/></left>
	<height set="null"><c path="String"/></height>
	<colorDepth set="null"><c path="String"/></colorDepth>
	<availWidth set="null"><c path="String"/></availWidth>
	<availTop set="null"><c path="String"/></availTop>
	<availLeft set="null"><c path="String"/></availLeft>
	<availHeight set="null"><c path="String"/></availHeight>
</a></typedef>
	<typedef path="stx.js.ScreenView" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<scrollTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollTo>
	<scrollBy set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollBy>
	<scroll set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
	<screenY set="null"><c path="Int"/></screenY>
	<screenX set="null"><c path="Int"/></screenX>
	<screen set="null"><t path="stx.js.Screen"/></screen>
	<pageYOffset set="null"><c path="Int"/></pageYOffset>
	<pageXOffset set="null"><c path="Int"/></pageXOffset>
	<outerWidth set="null"><c path="Int"/></outerWidth>
	<outerHeight set="null"><c path="Int"/></outerHeight>
	<media set="null"><t path="stx.js.Media"/></media>
	<innerWidth set="null"><c path="Int"/></innerWidth>
	<innerHeight set="null"><c path="Int"/></innerHeight>
	<document set="null"><t path="stx.js.Document"/></document>
</a></typedef>
	<typedef path="stx.js.Crypto" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a/></typedef>
	<typedef path="stx.js.Window" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<window set="null"><t path="stx.js.WindowProxy"/></window>
	<undoManager set="null"><t path="stx.js.UndoManager"/></undoManager>
	<top set="null"><t path="stx.js.Window"/></top>
	<toolbar set="null"><t path="stx.js.BarProp"/></toolbar>
	<stop set="method"><f a=""><e path="Void"/></f></stop>
	<statusbar set="null"><t path="stx.js.BarProp"/></statusbar>
	<status><t path="stx.js.DOMString"/></status>
	<showModalDialog set="method"><f a="url:?argument">
	<t path="stx.js.DOMString"/>
	<d/>
	<d/>
</f></showModalDialog>
	<setTimeout set="method"><f a="handler:?timeout:args">
	<f a="">
		<t path="stx.js.Event"/>
		<e path="Void"/>
	</f>
	<d/>
	<d/>
	<c path="Int"/>
</f></setTimeout>
	<setInterval set="method"><f a="handler:?timeout:args">
	<f a="">
		<t path="stx.js.Event"/>
		<e path="Void"/>
	</f>
	<d/>
	<d/>
	<c path="Int"/>
</f></setInterval>
	<sessionStorage set="null"><t path="stx.js.Storage"/></sessionStorage>
	<self set="null"><t path="stx.js.WindowProxy"/></self>
	<scrollbars set="null"><t path="stx.js.BarProp"/></scrollbars>
	<scrollY><c path="Int"/></scrollY>
	<scrollTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollTo>
	<scrollBy set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollBy>
	<scroll set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
	<screenY set="null"><c path="Int"/></screenY>
	<screenX set="null"><c path="Int"/></screenX>
	<screenTop set="null"><c path="Int"/></screenTop>
	<screenLeft set="null"><c path="Int"/></screenLeft>
	<screen set="null"><t path="stx.js.Screen"/></screen>
	<returnValue><t path="stx.js.DOMString"/></returnValue>
	<resizeTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></resizeTo>
	<resizeBy set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></resizeBy>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<prompt set="method"><f a="message:?def">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></prompt>
	<print set="method"><f a=""><e path="Void"/></f></print>
	<postMessage set="null"><f a=":">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></postMessage>
	<personalbar set="null"><t path="stx.js.BarProp"/></personalbar>
	<parent set="null"><t path="stx.js.Window"/></parent>
	<pageYOffset set="null"><c path="Int"/></pageYOffset>
	<pageXOffset set="null"><c path="Int"/></pageXOffset>
	<outerWidth><c path="Int"/></outerWidth>
	<outerHeight><c path="Int"/></outerHeight>
	<opener set="null"><t path="stx.js.Window"/></opener>
	<open set="method"><f a="?url:?target:?features:?replace">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.WindowProxy"/>
</f></open>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<onunload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onunload>
	<onundo><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onundo>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstorage><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstorage>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onresize><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onresize>
	<onredo><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onredo>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onpopstate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpopstate>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onpageshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpageshow>
	<onpagehide><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpagehide>
	<ononline><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ononline>
	<onoffline><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onoffline>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onmessage><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onmessage>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onhashchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onhashchange>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onbeforeunload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onbeforeunload>
	<onbeforeprint><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onbeforeprint>
	<onafterprint><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onafterprint>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<navigator set="null"><t path="stx.js.Navigator"/></navigator>
	<name><t path="stx.js.DOMString"/></name>
	<moveTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveTo>
	<moveBy set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveBy>
	<menubar set="null"><t path="stx.js.BarProp"/></menubar>
	<locationbar set="null"><t path="stx.js.BarProp"/></locationbar>
	<location set="null"><t path="stx.js.Location"/></location>
	<localStorage set="null"><t path="stx.js.Storage"/></localStorage>
	<length set="null"><c path="Int"/></length>
	<innerWidth><c path="Int"/></innerWidth>
	<innerHeight><c path="Int"/></innerHeight>
	<history set="null"><t path="stx.js.History"/></history>
	<getSelection set="method"><f a=""><c path="stx.js.Selection"/></f></getSelection>
	<getComputedStyle set="null"><f a=":">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CSSStyleDeclaration"/>
</f></getComputedStyle>
	<frames set="null"><c path="stx.js.DomCollection"><t path="stx.js.Frame"/></c></frames>
	<frameElement set="null"><t path="stx.js.Element"/></frameElement>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<find set="method"><f a="string:caseSensitive:backwards:wrapAround:wholeWord:searchInFrames:showDialog">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></find>
	<document set="null"><t path="stx.js.HTMLDocument"/></document>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<dialogArguments set="null"><d/></dialogArguments>
	<defaultStatus><t path="stx.js.DOMString"/></defaultStatus>
	<crypto set="null"><t path="stx.js.Crypto"/></crypto>
	<confirm set="method"><f a="message">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></confirm>
	<closed set="null"><e path="Bool"/></closed>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<clearTimeout set="method"><f a="handle">
	<c path="Int"/>
	<e path="Void"/>
</f></clearTimeout>
	<clearInterval set="method"><f a="handle">
	<c path="Int"/>
	<e path="Void"/>
</f></clearInterval>
	<btoa set="method"><f a="unencodedString">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></btoa>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<atob set="method"><f a="encodedString">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></atob>
	<applicationCache set="null"><t path="stx.js.ApplicationCache"/></applicationCache>
	<alert set="method"><f a="message">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></alert>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.WindowProxy" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<window set="null"><t path="stx.js.WindowProxy"/></window>
	<undoManager set="null"><t path="stx.js.UndoManager"/></undoManager>
	<top set="null"><t path="stx.js.Window"/></top>
	<toolbar set="null"><t path="stx.js.BarProp"/></toolbar>
	<stop set="method"><f a=""><e path="Void"/></f></stop>
	<statusbar set="null"><t path="stx.js.BarProp"/></statusbar>
	<status><t path="stx.js.DOMString"/></status>
	<showModalDialog set="method"><f a="url:?argument">
	<t path="stx.js.DOMString"/>
	<d/>
	<d/>
</f></showModalDialog>
	<setTimeout set="method"><f a="handler:?timeout:args">
	<f a="">
		<t path="stx.js.Event"/>
		<e path="Void"/>
	</f>
	<d/>
	<d/>
	<c path="Int"/>
</f></setTimeout>
	<setInterval set="method"><f a="handler:?timeout:args">
	<f a="">
		<t path="stx.js.Event"/>
		<e path="Void"/>
	</f>
	<d/>
	<d/>
	<c path="Int"/>
</f></setInterval>
	<sessionStorage set="null"><t path="stx.js.Storage"/></sessionStorage>
	<self set="null"><t path="stx.js.WindowProxy"/></self>
	<scrollbars set="null"><t path="stx.js.BarProp"/></scrollbars>
	<scrollY><c path="Int"/></scrollY>
	<scrollTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollTo>
	<scrollBy set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollBy>
	<scroll set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
	<screenY set="null"><c path="Int"/></screenY>
	<screenX set="null"><c path="Int"/></screenX>
	<screenTop set="null"><c path="Int"/></screenTop>
	<screenLeft set="null"><c path="Int"/></screenLeft>
	<screen set="null"><t path="stx.js.Screen"/></screen>
	<returnValue><t path="stx.js.DOMString"/></returnValue>
	<resizeTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></resizeTo>
	<resizeBy set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></resizeBy>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<prompt set="method"><f a="message:?def">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></prompt>
	<print set="method"><f a=""><e path="Void"/></f></print>
	<postMessage set="null"><f a=":">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></postMessage>
	<personalbar set="null"><t path="stx.js.BarProp"/></personalbar>
	<parent set="null"><t path="stx.js.Window"/></parent>
	<pageYOffset set="null"><c path="Int"/></pageYOffset>
	<pageXOffset set="null"><c path="Int"/></pageXOffset>
	<outerWidth><c path="Int"/></outerWidth>
	<outerHeight><c path="Int"/></outerHeight>
	<opener set="null"><t path="stx.js.Window"/></opener>
	<open set="method"><f a="?url:?target:?features:?replace">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.WindowProxy"/>
</f></open>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<onunload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onunload>
	<onundo><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onundo>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstorage><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstorage>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onresize><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onresize>
	<onredo><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onredo>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onpopstate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpopstate>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onpageshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpageshow>
	<onpagehide><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpagehide>
	<ononline><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ononline>
	<onoffline><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onoffline>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onmessage><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onmessage>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onhashchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onhashchange>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onbeforeunload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onbeforeunload>
	<onbeforeprint><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onbeforeprint>
	<onafterprint><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onafterprint>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<navigator set="null"><t path="stx.js.Navigator"/></navigator>
	<name><t path="stx.js.DOMString"/></name>
	<moveTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveTo>
	<moveBy set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveBy>
	<menubar set="null"><t path="stx.js.BarProp"/></menubar>
	<locationbar set="null"><t path="stx.js.BarProp"/></locationbar>
	<location set="null"><t path="stx.js.Location"/></location>
	<localStorage set="null"><t path="stx.js.Storage"/></localStorage>
	<length set="null"><c path="Int"/></length>
	<innerWidth><c path="Int"/></innerWidth>
	<innerHeight><c path="Int"/></innerHeight>
	<history set="null"><t path="stx.js.History"/></history>
	<getSelection set="method"><f a=""><c path="stx.js.Selection"/></f></getSelection>
	<getComputedStyle set="null"><f a=":">
	<t path="stx.js.Element"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CSSStyleDeclaration"/>
</f></getComputedStyle>
	<frames set="null"><c path="stx.js.DomCollection"><t path="stx.js.Frame"/></c></frames>
	<frameElement set="null"><t path="stx.js.Element"/></frameElement>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<find set="method"><f a="string:caseSensitive:backwards:wrapAround:wholeWord:searchInFrames:showDialog">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></find>
	<document set="null"><t path="stx.js.HTMLDocument"/></document>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<dialogArguments set="null"><d/></dialogArguments>
	<defaultStatus><t path="stx.js.DOMString"/></defaultStatus>
	<crypto set="null"><t path="stx.js.Crypto"/></crypto>
	<confirm set="method"><f a="message">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></confirm>
	<closed set="null"><e path="Bool"/></closed>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<clearTimeout set="method"><f a="handle">
	<c path="Int"/>
	<e path="Void"/>
</f></clearTimeout>
	<clearInterval set="method"><f a="handle">
	<c path="Int"/>
	<e path="Void"/>
</f></clearInterval>
	<btoa set="method"><f a="unencodedString">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></btoa>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<atob set="method"><f a="encodedString">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></atob>
	<applicationCache set="null"><t path="stx.js.ApplicationCache"/></applicationCache>
	<alert set="method"><f a="message">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></alert>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.Frame" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<window set="null"><t path="stx.js.WindowProxy"/></window>
	<undoManager set="null"><t path="stx.js.UndoManager"/></undoManager>
	<top set="null"><t path="stx.js.Window"/></top>
	<toolbar set="null"><t path="stx.js.BarProp"/></toolbar>
	<stop set="method"><f a=""><e path="Void"/></f></stop>
	<statusbar set="null"><t path="stx.js.BarProp"/></statusbar>
	<status><t path="stx.js.DOMString"/></status>
	<showModalDialog set="method"><f a="url:?argument">
	<t path="stx.js.DOMString"/>
	<d/>
	<d/>
</f></showModalDialog>
	<setTimeout set="method"><f a="handler:?timeout:args">
	<f a="">
		<t path="stx.js.Event"/>
		<e path="Void"/>
	</f>
	<d/>
	<d/>
	<c path="Int"/>
</f></setTimeout>
	<setInterval set="method"><f a="handler:?timeout:args">
	<f a="">
		<t path="stx.js.Event"/>
		<e path="Void"/>
	</f>
	<d/>
	<d/>
	<c path="Int"/>
</f></setInterval>
	<sessionStorage set="null"><t path="stx.js.Storage"/></sessionStorage>
	<self set="null"><t path="stx.js.WindowProxy"/></self>
	<scrollbars set="null"><t path="stx.js.BarProp"/></scrollbars>
	<scrollY><c path="Int"/></scrollY>
	<scrollTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollTo>
	<scrollBy set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollBy>
	<scroll set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
	<screenY set="null"><c path="Int"/></screenY>
	<screenX set="null"><c path="Int"/></screenX>
	<screenTop set="null"><c path="Int"/></screenTop>
	<screenLeft set="null"><c path="Int"/></screenLeft>
	<screen set="null"><t path="stx.js.Screen"/></screen>
	<returnValue><t path="stx.js.DOMString"/></returnValue>
	<resizeTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></resizeTo>
	<resizeBy set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></resizeBy>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<prompt set="method"><f a="message:?def">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></prompt>
	<print set="method"><f a=""><e path="Void"/></f></print>
	<postMessage set="null"><f a=":">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></postMessage>
	<personalbar set="null"><t path="stx.js.BarProp"/></personalbar>
	<parent set="null"><t path="stx.js.Window"/></parent>
	<pageYOffset set="null"><c path="Int"/></pageYOffset>
	<pageXOffset set="null"><c path="Int"/></pageXOffset>
	<outerWidth><c path="Int"/></outerWidth>
	<outerHeight><c path="Int"/></outerHeight>
	<opener set="null"><t path="stx.js.Window"/></opener>
	<open set="method"><f a="?url:?target:?features:?replace">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.WindowProxy"/>
</f></open>
	<onwaiting><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onwaiting>
	<onvolumechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onvolumechange>
	<onunload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onunload>
	<onundo><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onundo>
	<ontimeupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ontimeupdate>
	<onsuspend><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsuspend>
	<onsubmit><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onsubmit>
	<onstorage><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstorage>
	<onstalled><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onstalled>
	<onshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onshow>
	<onselect><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onselect>
	<onseeking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeking>
	<onseeked><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onseeked>
	<onscroll><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onscroll>
	<onresize><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onresize>
	<onredo><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onredo>
	<onreadystatechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onreadystatechange>
	<onratechange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onratechange>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onpopstate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpopstate>
	<onplaying><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplaying>
	<onplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onplay>
	<onpause><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpause>
	<onpageshow><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpageshow>
	<onpagehide><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onpagehide>
	<ononline><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ononline>
	<onoffline><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onoffline>
	<onmousewheel><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousewheel>
	<onmouseup><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseup>
	<onmouseover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseover>
	<onmouseout><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmouseout>
	<onmousemove><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousemove>
	<onmousedown><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onmousedown>
	<onmessage><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onmessage>
	<onloadstart><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadstart>
	<onloadedmetadata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadedmetadata>
	<onloadeddata><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onloadeddata>
	<onload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onload>
	<onkeyup><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeyup>
	<onkeypress><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeypress>
	<onkeydown><t path="stx.js.EventListener"><t path="stx.js.KeyboardEvent"/></t></onkeydown>
	<oninvalid><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninvalid>
	<oninput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oninput>
	<onhashchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onhashchange>
	<onforminput><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onforminput>
	<onformchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onformchange>
	<onfocus><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onfocus>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<onended><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onended>
	<onemptied><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onemptied>
	<ondurationchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondurationchange>
	<ondrop><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrop>
	<ondragstart><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragstart>
	<ondragover><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragover>
	<ondragleave><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragleave>
	<ondragenter><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragenter>
	<ondragend><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondragend>
	<ondrag><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondrag>
	<ondblclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></ondblclick>
	<oncontextmenu><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncontextmenu>
	<onclick><t path="stx.js.EventListener"><t path="stx.js.MouseEvent"/></t></onclick>
	<onchange><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchange>
	<oncanplaythrough><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplaythrough>
	<oncanplay><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncanplay>
	<onblur><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onblur>
	<onbeforeunload><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onbeforeunload>
	<onbeforeprint><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onbeforeprint>
	<onafterprint><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onafterprint>
	<onabort><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onabort>
	<navigator set="null"><t path="stx.js.Navigator"/></navigator>
	<name><t path="stx.js.DOMString"/></name>
	<moveTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveTo>
	<moveBy set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveBy>
	<menubar set="null"><t path="stx.js.BarProp"/></menubar>
	<locationbar set="null"><t path="stx.js.BarProp"/></locationbar>
	<location set="null"><t path="stx.js.Location"/></location>
	<localStorage set="null"><t path="stx.js.Storage"/></localStorage>
	<length set="null"><c path="Int"/></length>
	<innerWidth><c path="Int"/></innerWidth>
	<innerHeight><c path="Int"/></innerHeight>
	<history set="null"><t path="stx.js.History"/></history>
	<getSelection set="method"><f a=""><c path="stx.js.Selection"/></f></getSelection>
	<getComputedStyle set="null"><f a=":">
	<t path="stx.js.Element"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CSSStyleDeclaration"/>
</f></getComputedStyle>
	<frames set="null"><c path="stx.js.DomCollection"><t path="stx.js.Frame"/></c></frames>
	<frameElement set="null"><t path="stx.js.Element"/></frameElement>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<find set="method"><f a="string:caseSensitive:backwards:wrapAround:wholeWord:searchInFrames:showDialog">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></find>
	<document set="null"><t path="stx.js.HTMLDocument"/></document>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<dialogArguments set="null"><d/></dialogArguments>
	<defaultStatus><t path="stx.js.DOMString"/></defaultStatus>
	<crypto set="null"><t path="stx.js.Crypto"/></crypto>
	<confirm set="method"><f a="message">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
</f></confirm>
	<closed set="null"><e path="Bool"/></closed>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<clearTimeout set="method"><f a="handle">
	<c path="Int"/>
	<e path="Void"/>
</f></clearTimeout>
	<clearInterval set="method"><f a="handle">
	<c path="Int"/>
	<e path="Void"/>
</f></clearInterval>
	<btoa set="method"><f a="unencodedString">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></btoa>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<atob set="method"><f a="encodedString">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></atob>
	<applicationCache set="null"><t path="stx.js.ApplicationCache"/></applicationCache>
	<alert set="method"><f a="message">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></alert>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.BarProp" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a><visible><e path="Bool"/></visible></a></typedef>
	<typedef path="stx.js.ApplicationCache" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<update set="method"><f a=""><e path="Void"/></f></update>
	<swapCache set="method"><f a=""><e path="Void"/></f></swapCache>
	<status set="null"><c path="Int"/></status>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<remove set="method"><f a="uri">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></remove>
	<onupdateready><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onupdateready>
	<onprogress><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onprogress>
	<onnoupdate><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onnoupdate>
	<onerror><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onerror>
	<ondownloading><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></ondownloading>
	<onchecking><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></onchecking>
	<oncached><t path="stx.js.EventListener"><t path="stx.js.Event"/></t></oncached>
	<length set="null"><c path="Int"/></length>
	<item set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMString"/>
</f></item>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<add set="method"><f a="uri">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></add>
</a></typedef>
	<typedef path="stx.js.UndoManager" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<remove set="method"><f a="index">
	<c path="Int"/>
	<e path="Void"/>
</f></remove>
	<position set="null"><c path="Int"/></position>
	<length set="null"><c path="Int"/></length>
	<item set="method"><f a="index">
	<c path="Int"/>
	<t path="stx.js.DOMObject"/>
</f></item>
	<clearUndo set="method"><f a=""><e path="Void"/></f></clearUndo>
	<clearRedo set="method"><f a=""><e path="Void"/></f></clearRedo>
	<add set="method"><f a="data:title">
	<t path="stx.js.DOMObject"/>
	<t path="stx.js.DOMString"/>
	<c path="Int"/>
</f></add>
</a></typedef>
	<typedef path="stx.js.UndoManagerEvent" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<type set="null"><t path="stx.js.DOMString"/></type>
	<trusted set="null"><e path="Bool"/></trusted>
	<timeStamp set="null"><t path="stx.js.DOMTimeStamp"/></timeStamp>
	<target set="null"><t path="stx.js.EventTarget"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<initUndoManagerEvent set="method"><f a="typeArg:canBubbleArg:cancelableArg:dataArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<d/>
	<e path="Void"/>
</f></initUndoManagerEvent>
	<initEvent set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></initEvent>
	<eventPhase set="null"><c path="Int"/></eventPhase>
	<defaultPrevented set="null"><e path="Bool"/></defaultPrevented>
	<date set="null"><d/></date>
	<currentTarget set="null"><t path="stx.js.EventTarget"/></currentTarget>
	<cancelable set="null"><e path="Bool"/></cancelable>
	<bubbles set="null"><e path="Bool"/></bubbles>
</a></typedef>
	<typedef path="stx.js.XMLHttpRequestEventTarget" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
</a></typedef>
	<typedef path="stx.js.XMLHttpRequest" params="" file="src/main/haxe/stx/js/Dom.hx" module="stx.js.Dom"><a>
	<statusText set="null"><t path="stx.js.DOMString"/></statusText>
	<status set="null"><c path="Int"/></status>
	<setRequestHeader set="method"><f a="header:value">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></setRequestHeader>
	<send set="method"><f a="?data">
	<c path="String"/>
	<e path="Void"/>
</f></send>
	<responseXML set="null"><t path="stx.js.Document"/></responseXML>
	<responseText set="null"><t path="stx.js.DOMString"/></responseText>
	<removeEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListenerNS>
	<removeEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
	<readyState set="null"><c path="Int"/></readyState>
	<overrideMimeType set="method"><f a="mimeType">
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></overrideMimeType>
	<open set="method"><f a="method:url:?async:?user:?password">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Bool"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<e path="Void"/>
</f></open>
	<onreadystatechange><f a=""><e path="Void"/></f></onreadystatechange>
	<getResponseHeader set="method"><f a="header">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></getResponseHeader>
	<getAllResponseHeaders set="method"><f a=""><t path="stx.js.DOMString"/></f></getAllResponseHeaders>
	<dispatchEvent set="method"><f a="evt">
	<t path="stx.js.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
	<addEventListenerNS set="method"><f a="namespaceURI:type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListenerNS>
	<addEventListener set="method"><f a="type:listener:useCapture">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	<abort set="method"><f a=""><e path="Void"/></f></abort>
</a></typedef>
	<class path="stx.js.Env" params="" file="src/main/haxe/stx/js/Env.hx">
		<document public="1" line="7" static="1">
			<t path="stx.js.HTMLDocument"/>
			<haxe_doc> Top level objects </haxe_doc>
		</document>
		<documentRaw public="1" line="8" static="1"><t path="stx.js.Document"/></documentRaw>
		<screen public="1" line="9" static="1"><t path="stx.js.Screen"/></screen>
		<window public="1" line="10" static="1"><t path="stx.js.Window"/></window>
		<navigator public="1" line="11" static="1"><t path="stx.js.Navigator"/></navigator>
		<history public="1" line="12" static="1"><t path="stx.js.History"/></history>
		<JInfinity public="1" line="15" static="1">
			<d/>
			<haxe_doc> Top level values </haxe_doc>
		</JInfinity>
		<JNaN public="1" line="16" static="1"><d/></JNaN>
		<JUndefined public="1" line="17" static="1"><d/></JUndefined>
		<eq public="1" set="method" line="19" static="1"><f a="a:b">
	<d/>
	<d/>
	<e path="Bool"/>
</f></eq>
		<alert public="1" set="method" line="24" static="1">
			<f a="a">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc> Top level functions </haxe_doc>
		</alert>
		<decodeURI public="1" set="method" line="28" static="1"><f a="uri">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></decodeURI>
		<decodeURIComponent public="1" set="method" line="32" static="1"><f a="uriComponent">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></decodeURIComponent>
		<encodeURI public="1" set="method" line="36" static="1"><f a="uri">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></encodeURI>
		<encodeURIComponent public="1" set="method" line="40" static="1"><f a="uriComponent">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></encodeURIComponent>
		<escape public="1" set="method" line="44" static="1"><f a="string">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></escape>
		<unescape public="1" set="method" line="48" static="1"><f a="string">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></unescape>
		<eval public="1" set="method" line="52" static="1"><f a="?string">
	<t path="stx.js.DOMString"/>
	<t path="stx.js.DOMString"/>
</f></eval>
		<isFinite public="1" set="method" line="56" static="1"><f a="number">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" line="60" static="1"><f a="number">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<isDefined public="1" set="method" line="64" static="1"><f a="d">
	<d/>
	<e path="Bool"/>
</f></isDefined>
		<isDefinedGlobal public="1" set="method" line="68" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></isDefinedGlobal>
		<typeOf public="1" set="method" line="72" static="1"><f a="d">
	<d/>
	<c path="String"/>
</f></typeOf>
		<getElementsByClass public="1" set="method" line="80" static="1"><f a="className:?tag:?elm">
	<c path="String"/>
	<c path="String"/>
	<t path="stx.js.HTMLElement"/>
	<c path="Array"><t path="stx.js.HTMLElement"/></c>
</f></getElementsByClass>
		<setCookie public="1" set="method" line="185" static="1"><f a="name:value:?expires:?path:?domain:secure">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setCookie>
		<getCookie public="1" set="method" line="198" static="1"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></getCookie>
		<getCookies public="1" set="method" line="209" static="1"><f a=""><c path="Array"><c path="String"/></c></f></getCookies>
		<getCookieExpiration set="method" line="213" static="1"><f a="expires">
	<c path="Int"/>
	<c path="String"/>
</f></getCookieExpiration>
		<asCookiePair set="method" line="220" static="1"><f a="n:v:?withSemi:?ifNull">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
</f></asCookiePair>
	</class>
	<class path="stx.js.XmlHttpRequestState" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<UNSENT public="1" line="231" static="1"><c path="Int"/></UNSENT>
		<OPENED public="1" line="232" static="1"><c path="Int"/></OPENED>
		<HEADERS_RECEIVED public="1" line="233" static="1"><c path="Int"/></HEADERS_RECEIVED>
		<LOADING public="1" line="234" static="1"><c path="Int"/></LOADING>
		<DONE public="1" line="235" static="1"><c path="Int"/></DONE>
	</class>
	<class path="stx.js.ExceptionCode" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<INDEX_SIZE_ERR public="1" line="239" static="1"><c path="Int"/></INDEX_SIZE_ERR>
		<DOMSTRING_SIZE_ERR public="1" line="240" static="1"><c path="Int"/></DOMSTRING_SIZE_ERR>
		<HIERARCHY_REQUEST_ERR public="1" line="241" static="1"><c path="Int"/></HIERARCHY_REQUEST_ERR>
		<WRONG_DOCUMENT_ERR public="1" line="242" static="1"><c path="Int"/></WRONG_DOCUMENT_ERR>
		<INVALID_CHARACTER_ERR public="1" line="243" static="1"><c path="Int"/></INVALID_CHARACTER_ERR>
		<NO_DATA_ALLOWED_ERR public="1" line="244" static="1"><c path="Int"/></NO_DATA_ALLOWED_ERR>
		<NO_MODIFICATION_ALLOWED_ERR public="1" line="245" static="1"><c path="Int"/></NO_MODIFICATION_ALLOWED_ERR>
		<NOT_FOUND_ERR public="1" line="246" static="1"><c path="Int"/></NOT_FOUND_ERR>
		<NOT_SUPPORTED_ERR public="1" line="247" static="1"><c path="Int"/></NOT_SUPPORTED_ERR>
		<INUSE_ATTRIBUTE_ERR public="1" line="248" static="1"><c path="Int"/></INUSE_ATTRIBUTE_ERR>
		<INVALID_STATE_ERR public="1" line="249" static="1"><c path="Int"/></INVALID_STATE_ERR>
		<SYNTAX_ERR public="1" line="250" static="1"><c path="Int"/></SYNTAX_ERR>
		<INVALID_MODIFICATION_ERR public="1" line="251" static="1"><c path="Int"/></INVALID_MODIFICATION_ERR>
		<NAMESPACE_ERR public="1" line="252" static="1"><c path="Int"/></NAMESPACE_ERR>
		<INVALID_ACCESS_ERR public="1" line="253" static="1"><c path="Int"/></INVALID_ACCESS_ERR>
		<VALIDATION_ERR public="1" line="254" static="1"><c path="Int"/></VALIDATION_ERR>
		<TYPE_MISMATCH_ERR public="1" line="255" static="1"><c path="Int"/></TYPE_MISMATCH_ERR>
	</class>
	<class path="stx.js.NodeType" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<ELEMENT_NODE public="1" line="259" static="1"><c path="Int"/></ELEMENT_NODE>
		<ATTRIBUTE_NODE public="1" line="260" static="1"><c path="Int"/></ATTRIBUTE_NODE>
		<TEXT_NODE public="1" line="261" static="1"><c path="Int"/></TEXT_NODE>
		<CDATA_SECTION_NODE public="1" line="262" static="1"><c path="Int"/></CDATA_SECTION_NODE>
		<ENTITY_REFERENCE_NODE public="1" line="263" static="1"><c path="Int"/></ENTITY_REFERENCE_NODE>
		<ENTITY_NODE public="1" line="264" static="1"><c path="Int"/></ENTITY_NODE>
		<PROCESSING_INSTRUCTION_NODE public="1" line="265" static="1"><c path="Int"/></PROCESSING_INSTRUCTION_NODE>
		<COMMENT_NODE public="1" line="266" static="1"><c path="Int"/></COMMENT_NODE>
		<DOCUMENT_NODE public="1" line="267" static="1"><c path="Int"/></DOCUMENT_NODE>
		<DOCUMENT_TYPE_NODE public="1" line="268" static="1"><c path="Int"/></DOCUMENT_TYPE_NODE>
		<DOCUMENT_FRAGMENT_NODE public="1" line="269" static="1"><c path="Int"/></DOCUMENT_FRAGMENT_NODE>
		<NOTATION_NODE public="1" line="270" static="1"><c path="Int"/></NOTATION_NODE>
	</class>
	<class path="stx.js.DocumentPosition" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<DOCUMENT_POSITION_DISCONNECTED public="1" line="274" static="1"><c path="Int"/></DOCUMENT_POSITION_DISCONNECTED>
		<DOCUMENT_POSITION_PRECEDING public="1" line="275" static="1"><c path="Int"/></DOCUMENT_POSITION_PRECEDING>
		<DOCUMENT_POSITION_FOLLOWING public="1" line="276" static="1"><c path="Int"/></DOCUMENT_POSITION_FOLLOWING>
		<DOCUMENT_POSITION_CONTAINS public="1" line="277" static="1"><c path="Int"/></DOCUMENT_POSITION_CONTAINS>
		<DOCUMENT_POSITION_CONTAINED_BY public="1" line="278" static="1"><c path="Int"/></DOCUMENT_POSITION_CONTAINED_BY>
		<DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC public="1" line="279" static="1"><c path="Int"/></DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>
	</class>
	<class path="stx.js.DerivationMethod" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<DERIVATION_RESTRICTION public="1" line="283" static="1"><c path="Int"/></DERIVATION_RESTRICTION>
		<DERIVATION_EXTENSION public="1" line="284" static="1"><c path="Int"/></DERIVATION_EXTENSION>
		<DERIVATION_UNION public="1" line="285" static="1"><c path="Int"/></DERIVATION_UNION>
		<DERIVATION_LIST public="1" line="286" static="1"><c path="Int"/></DERIVATION_LIST>
	</class>
	<class path="stx.js.OperationType" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<NODE_CLONED public="1" line="290" static="1"><c path="Int"/></NODE_CLONED>
		<NODE_IMPORTED public="1" line="291" static="1"><c path="Int"/></NODE_IMPORTED>
		<NODE_DELETED public="1" line="292" static="1"><c path="Int"/></NODE_DELETED>
		<NODE_RENAMED public="1" line="293" static="1"><c path="Int"/></NODE_RENAMED>
		<NODE_ADOPTED public="1" line="294" static="1"><c path="Int"/></NODE_ADOPTED>
	</class>
	<class path="stx.js.ErrorState" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<NETWORK_EMPTY public="1" line="298" static="1"><c path="Int"/></NETWORK_EMPTY>
		<NETWORK_IDLE public="1" line="299" static="1"><c path="Int"/></NETWORK_IDLE>
		<NETWORK_LOADING public="1" line="300" static="1"><c path="Int"/></NETWORK_LOADING>
		<NETWORK_NO_SOURCE public="1" line="301" static="1"><c path="Int"/></NETWORK_NO_SOURCE>
	</class>
	<class path="stx.js.ReadyState" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<CONNECTING public="1" line="305" static="1"><c path="Int"/></CONNECTING>
		<OPEN public="1" line="306" static="1"><c path="Int"/></OPEN>
		<CLOSED public="1" line="307" static="1"><c path="Int"/></CLOSED>
	</class>
	<class path="stx.js.EventExceptionCode" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env"><UNSPECIFIED_EVENT_TYPE_ERR public="1" line="311" static="1"><c path="Int"/></UNSPECIFIED_EVENT_TYPE_ERR></class>
	<class path="stx.js.DeltaModeCode" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<DOM_DELTA_PIXEL public="1" line="315" static="1"><c path="Int"/></DOM_DELTA_PIXEL>
		<DOM_DELTA_Line public="1" line="316" static="1"><c path="Int"/></DOM_DELTA_Line>
		<DOM_DELTA_Page public="1" line="317" static="1"><c path="Int"/></DOM_DELTA_Page>
	</class>
	<class path="stx.js.InputModeCode" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<DOM_INPUT_METHOD_UNKNOWN public="1" line="321" static="1"><c path="Int"/></DOM_INPUT_METHOD_UNKNOWN>
		<DOM_INPUT_METHOD_KEYBOARD public="1" line="322" static="1"><c path="Int"/></DOM_INPUT_METHOD_KEYBOARD>
		<DOM_INPUT_METHOD_PASTE public="1" line="323" static="1"><c path="Int"/></DOM_INPUT_METHOD_PASTE>
		<DOM_INPUT_METHOD_DROP public="1" line="324" static="1"><c path="Int"/></DOM_INPUT_METHOD_DROP>
		<DOM_INPUT_METHOD_IME public="1" line="325" static="1"><c path="Int"/></DOM_INPUT_METHOD_IME>
		<DOM_INPUT_METHOD_OPTION public="1" line="326" static="1"><c path="Int"/></DOM_INPUT_METHOD_OPTION>
		<DOM_INPUT_METHOD_HANDWRITING public="1" line="327" static="1"><c path="Int"/></DOM_INPUT_METHOD_HANDWRITING>
		<DOM_INPUT_METHOD_VOICE public="1" line="328" static="1"><c path="Int"/></DOM_INPUT_METHOD_VOICE>
		<DOM_INPUT_METHOD_MULTIMODAL public="1" line="329" static="1"><c path="Int"/></DOM_INPUT_METHOD_MULTIMODAL>
		<DOM_INPUT_METHOD_SCRIPT public="1" line="330" static="1"><c path="Int"/></DOM_INPUT_METHOD_SCRIPT>
	</class>
	<class path="stx.js.KeyLocationCode" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<DOM_KEY_LOCATION_STANDARD public="1" line="335" static="1"><c path="Int"/></DOM_KEY_LOCATION_STANDARD>
		<DOM_KEY_LOCATION_LEFT public="1" line="336" static="1"><c path="Int"/></DOM_KEY_LOCATION_LEFT>
		<DOM_KEY_LOCATION_RIGHT public="1" line="337" static="1"><c path="Int"/></DOM_KEY_LOCATION_RIGHT>
		<DOM_KEY_LOCATION_NUMPAD public="1" line="338" static="1"><c path="Int"/></DOM_KEY_LOCATION_NUMPAD>
		<DOM_KEY_LOCATION_MOBILE public="1" line="339" static="1"><c path="Int"/></DOM_KEY_LOCATION_MOBILE>
		<DOM_KEY_LOCATION_JOYSTICK public="1" line="340" static="1"><c path="Int"/></DOM_KEY_LOCATION_JOYSTICK>
	</class>
	<class path="stx.js.PhaseType" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<CAPTURING_PHASE public="1" line="344" static="1"><c path="Int"/></CAPTURING_PHASE>
		<AT_TARGET public="1" line="345" static="1"><c path="Int"/></AT_TARGET>
		<BUBBLING_PHASE public="1" line="346" static="1"><c path="Int"/></BUBBLING_PHASE>
	</class>
	<class path="stx.js.AttrChangeType" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<MODIFICATION public="1" line="350" static="1"><c path="Int"/></MODIFICATION>
		<ADDITION public="1" line="351" static="1"><c path="Int"/></ADDITION>
		<REMOVAL public="1" line="352" static="1"><c path="Int"/></REMOVAL>
	</class>
	<class path="stx.js.AcceptNodeConstants" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<FILTER_ACCEPT public="1" line="356" static="1"><c path="Int"/></FILTER_ACCEPT>
		<FILTER_REJECT public="1" line="357" static="1"><c path="Int"/></FILTER_REJECT>
		<FILTER_SKIP public="1" line="358" static="1"><c path="Int"/></FILTER_SKIP>
	</class>
	<class path="stx.js.WhatToShowConstants" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<SHOW_ALL public="1" line="363" static="1"><c path="Int"/></SHOW_ALL>
		<SHOW_ELEMENT public="1" line="364" static="1"><c path="Int"/></SHOW_ELEMENT>
		<SHOW_ATTRIBUTE public="1" line="365" static="1"><c path="Int"/></SHOW_ATTRIBUTE>
		<SHOW_TEXT public="1" line="366" static="1"><c path="Int"/></SHOW_TEXT>
		<SHOW_CDATA_SECTION public="1" line="367" static="1"><c path="Int"/></SHOW_CDATA_SECTION>
		<SHOW_ENTITY_REFERENCE public="1" line="368" static="1"><c path="Int"/></SHOW_ENTITY_REFERENCE>
		<SHOW_ENTITY public="1" line="369" static="1"><c path="Int"/></SHOW_ENTITY>
		<SHOW_PROCESSING_INSTRUCTION public="1" line="370" static="1"><c path="Int"/></SHOW_PROCESSING_INSTRUCTION>
		<SHOW_COMMENT public="1" line="371" static="1"><c path="Int"/></SHOW_COMMENT>
		<SHOW_DOCUMENT public="1" line="372" static="1"><c path="Int"/></SHOW_DOCUMENT>
		<SHOW_DOCUMENT_TYPE public="1" line="373" static="1"><c path="Int"/></SHOW_DOCUMENT_TYPE>
		<SHOW_DOCUMENT_FRAGMENT public="1" line="374" static="1"><c path="Int"/></SHOW_DOCUMENT_FRAGMENT>
		<SHOW_NOTATION public="1" line="375" static="1"><c path="Int"/></SHOW_NOTATION>
	</class>
	<class path="stx.js.RangeExceptionCode" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<BAD_BOUNDARYPOINTS_ERR public="1" line="379" static="1"><c path="Int"/></BAD_BOUNDARYPOINTS_ERR>
		<INVALID_NODE_TYPE_ERR public="1" line="380" static="1"><c path="Int"/></INVALID_NODE_TYPE_ERR>
	</class>
	<class path="stx.js.CompareHow" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<START_TO_START public="1" line="384" static="1"><c path="Int"/></START_TO_START>
		<START_TO_END public="1" line="385" static="1"><c path="Int"/></START_TO_END>
		<END_TO_END public="1" line="386" static="1"><c path="Int"/></END_TO_END>
		<END_TO_START public="1" line="387" static="1"><c path="Int"/></END_TO_START>
	</class>
	<class path="stx.js.RuleType" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<UNKNOWN_RULE public="1" line="391" static="1"><c path="Int"/></UNKNOWN_RULE>
		<STYLE_RULE public="1" line="392" static="1"><c path="Int"/></STYLE_RULE>
		<CHARSET_RULE public="1" line="393" static="1"><c path="Int"/></CHARSET_RULE>
		<IMPORT_RULE public="1" line="394" static="1"><c path="Int"/></IMPORT_RULE>
		<MEDIA_RULE public="1" line="395" static="1"><c path="Int"/></MEDIA_RULE>
		<FONT_FACE_RULE public="1" line="396" static="1"><c path="Int"/></FONT_FACE_RULE>
		<PAGE_RULE public="1" line="397" static="1"><c path="Int"/></PAGE_RULE>
	</class>
	<class path="stx.js.CSSValueType" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<CSS_INHERIT public="1" line="401" static="1"><c path="Int"/></CSS_INHERIT>
		<CSS_PRIMITIVE_VALUE public="1" line="402" static="1"><c path="Int"/></CSS_PRIMITIVE_VALUE>
		<CSS_VALUE_LIST public="1" line="403" static="1"><c path="Int"/></CSS_VALUE_LIST>
		<CSS_CUSTOM public="1" line="404" static="1"><c path="Int"/></CSS_CUSTOM>
	</class>
	<class path="stx.js.PrimitiveType" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<CSS_UNKNOWN public="1" line="408" static="1"><c path="Int"/></CSS_UNKNOWN>
		<CSS_NUMBER public="1" line="409" static="1"><c path="Int"/></CSS_NUMBER>
		<CSS_PERCENTAGE public="1" line="410" static="1"><c path="Int"/></CSS_PERCENTAGE>
		<CSS_EMS public="1" line="411" static="1"><c path="Int"/></CSS_EMS>
		<CSS_EXS public="1" line="412" static="1"><c path="Int"/></CSS_EXS>
		<CSS_PX public="1" line="413" static="1"><c path="Int"/></CSS_PX>
		<CSS_CM public="1" line="414" static="1"><c path="Int"/></CSS_CM>
		<CSS_MM public="1" line="415" static="1"><c path="Int"/></CSS_MM>
		<CSS_IN public="1" line="416" static="1"><c path="Int"/></CSS_IN>
		<CSS_PT public="1" line="417" static="1"><c path="Int"/></CSS_PT>
		<CSS_PC public="1" line="418" static="1"><c path="Int"/></CSS_PC>
		<CSS_DEG public="1" line="419" static="1"><c path="Int"/></CSS_DEG>
		<CSS_RAD public="1" line="420" static="1"><c path="Int"/></CSS_RAD>
		<CSS_GRAD public="1" line="421" static="1"><c path="Int"/></CSS_GRAD>
		<CSS_MS public="1" line="422" static="1"><c path="Int"/></CSS_MS>
		<CSS_S public="1" line="423" static="1"><c path="Int"/></CSS_S>
		<CSS_HZ public="1" line="424" static="1"><c path="Int"/></CSS_HZ>
		<CSS_KHZ public="1" line="425" static="1"><c path="Int"/></CSS_KHZ>
		<CSS_DIMENSION public="1" line="426" static="1"><c path="Int"/></CSS_DIMENSION>
		<CSS_STRING public="1" line="427" static="1"><c path="Int"/></CSS_STRING>
		<CSS_URI public="1" line="428" static="1"><c path="Int"/></CSS_URI>
		<CSS_IDENT public="1" line="429" static="1"><c path="Int"/></CSS_IDENT>
		<CSS_ATTR public="1" line="430" static="1"><c path="Int"/></CSS_ATTR>
		<CSS_COUNTER public="1" line="431" static="1"><c path="Int"/></CSS_COUNTER>
		<CSS_RECT public="1" line="432" static="1"><c path="Int"/></CSS_RECT>
		<CSS_RGBCOLOR public="1" line="433" static="1"><c path="Int"/></CSS_RGBCOLOR>
	</class>
	<class path="stx.js.UpdateStatus" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<UNCACHED public="1" line="437" static="1"><c path="Int"/></UNCACHED>
		<IDLE public="1" line="438" static="1"><c path="Int"/></IDLE>
		<CHECKING public="1" line="439" static="1"><c path="Int"/></CHECKING>
		<DOWNLOADING public="1" line="440" static="1"><c path="Int"/></DOWNLOADING>
		<UPDATEREADY public="1" line="441" static="1"><c path="Int"/></UPDATEREADY>
	</class>
	<class path="stx.js.ErrorSeverity" params="" file="src/main/haxe/stx/js/Env.hx" module="stx.js.Env">
		<SEVERITY_WARNING public="1" line="445" static="1"><c path="Int"/></SEVERITY_WARNING>
		<SEVERITY_ERROR public="1" line="446" static="1"><c path="Int"/></SEVERITY_ERROR>
		<SEVERITY_FATAL_ERROR public="1" line="447" static="1"><c path="Int"/></SEVERITY_FATAL_ERROR>
	</class>
	<class path="stx.js.detect.BrowserSupport" params="" file="src/main/haxe/stx/js/detect/BrowserSupport.hx">
		<memorized line="37" static="1"><c path="stx.ds.Map">
	<c path="String"/>
	<e path="Bool"/>
</c></memorized>
		<cssTransformationSupported public="1" set="method" line="43" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the browser supports "css transformation".
	 * @return 
   </haxe_doc>
		</cssTransformationSupported>
		<elementTagnameUppercased public="1" set="method" line="58" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the browser supports "element tagname" is uppercased. The document must
   * have a body for the detection to be accurate.
   </haxe_doc>
		</elementTagnameUppercased>
		<querySelectorIgnoresCapitalizedValuesBug public="1" set="method" line="73" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the browser supports "element tagname" is uppercased. The document must
   * have a body for the detection to be accurate.
   </haxe_doc>
		</querySelectorIgnoresCapitalizedValuesBug>
		<isEventSrcelementPresent public="1" set="method" line="93" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the event has property  "srcElement". The document must
   * have a body for the detection to be accurate.
   </haxe_doc>
		</isEventSrcelementPresent>
		<isNativeHasAttributePresent public="1" set="method" line="124" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the document element has property "hasAttribute". The document must
   * have a body for the detection to be accurate.
   </haxe_doc>
		</isNativeHasAttributePresent>
		<isContextMenuEventSupported public="1" set="method" line="163" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the document element supports "context menu". The document must
   * have a body for the detection to be accurate.
   </haxe_doc>
		</isContextMenuEventSupported>
		<computedStyleReturnsValuesForStaticlyPositionedElements public="1" set="method" line="181" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the computed style returns values for staticly positioned elements. The document must
   * have a body for the detection to be accurate.
   </haxe_doc>
		</computedStyleReturnsValuesForStaticlyPositionedElements>
		<isRgbaSupported public="1" set="method" line="208" static="1"><f a=""><e path="Bool"/></f></isRgbaSupported>
		<isCssBorderRadiusSupported public="1" set="method" line="228" static="1"><f a=""><e path="Bool"/></f></isCssBorderRadiusSupported>
		<elemenChildrenReturnsElementNodes public="1" set="method" line="243" static="1"><f a=""><e path="Bool"/></f></elemenChildrenReturnsElementNodes>
		<isCanvasSupported public="1" set="method" line="262" static="1"><f a=""><e path="Bool"/></f></isCanvasSupported>
		<positionFixed public="1" set="method" line="277" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the browser supports "position: fixed". The document must
   * have a body for the detection to be accurate.
   </haxe_doc>
		</positionFixed>
		<isCssEnabled public="1" set="method" line="304" static="1"><f a=""><e path="Bool"/></f></isCssEnabled>
		<isQuirksMode public="1" set="method" line="324" static="1"><f a=""><e path="Bool"/></f></isQuirksMode>
		<isContainsBuggy public="1" set="method" line="340" static="1"><f a=""><e path="Bool"/></f></isContainsBuggy>
		<isActivexEnabled public="1" set="method" line="354" static="1"><f a=""><e path="Bool"/></f></isActivexEnabled>
		<typeofNodelistIsFunctionBug public="1" set="method" line="379" static="1"><f a=""><e path="Bool"/></f></typeofNodelistIsFunctionBug>
		<getElementsByTagNameReturnsCommentNodesBug public="1" set="method" line="388" static="1"><f a=""><e path="Bool"/></f></getElementsByTagNameReturnsCommentNodesBug>
		<setAttributeIgnoresNameAttributeBug public="1" set="method" line="406" static="1"><f a=""><e path="Bool"/></f></setAttributeIgnoresNameAttributeBug>
		<elementPropertiesAreAttributesBug public="1" set="method" line="435" static="1"><f a=""><e path="Bool"/></f></elementPropertiesAreAttributesBug>
		<isRegexpWhitespaceCharacterClassBug public="1" set="method" line="450" static="1"><f a=""><e path="Bool"/></f></isRegexpWhitespaceCharacterClassBug>
		<isStringPrototypeSplitRegexpBug public="1" set="method" line="459" static="1"><f a=""><e path="Bool"/></f></isStringPrototypeSplitRegexpBug>
		<preElementsIgnoreNewLinesBug public="1" set="method" line="466" static="1"><f a=""><e path="Bool"/></f></preElementsIgnoreNewLinesBug>
		<selectElementInnerHtmlBug public="1" set="method" line="494" static="1"><f a=""><e path="Bool"/></f></selectElementInnerHtmlBug>
		<tableElementInnerHtmlBug public="1" set="method" line="511" static="1"><f a=""><e path="Bool"/></f></tableElementInnerHtmlBug>
		<scriptElementRejectsTextNodeAppendingBug public="1" set="method" line="530" static="1"><f a=""><e path="Bool"/></f></scriptElementRejectsTextNodeAppendingBug>
		<documentGetElementByIdConfusesIdsWithNamesBug public="1" set="method" line="549" static="1"><f a=""><e path="Bool"/></f></documentGetElementByIdConfusesIdsWithNamesBug>
		<documentGetElementByIdIgnoresCaseBug public="1" set="method" line="576" static="1"><f a=""><e path="Bool"/></f></documentGetElementByIdIgnoresCaseBug>
		<offsetValuesForStaticElementsInsidePositionedOnesBug public="1" set="method" line="595" static="1"><f a=""><e path="Bool"/></f></offsetValuesForStaticElementsInsidePositionedOnesBug>
		<isDocumentGetElementsByNameBug public="1" set="method" line="636" static="1"><f a=""><e path="Bool"/></f></isDocumentGetElementsByNameBug>
		<isOverflowStyleBug public="1" set="method" line="658" static="1"><f a=""><e path="Bool"/></f></isOverflowStyleBug>
		<isQuerySelectorAllBug public="1" set="method" line="677" static="1"><f a=""><e path="Bool"/></f></isQuerySelectorAllBug>
		<html5Audio public="1" set="method" line="691" static="1"><f a=""><e path="Bool"/></f></html5Audio>
		<html5AudioInMP3Format public="1" set="method" line="703" static="1"><f a=""><e path="Bool"/></f></html5AudioInMP3Format>
		<html5AudioInVorbisFormat public="1" set="method" line="708" static="1"><f a=""><e path="Bool"/></f></html5AudioInVorbisFormat>
		<html5AudioInWavFormat public="1" set="method" line="713" static="1"><f a=""><e path="Bool"/></f></html5AudioInWavFormat>
		<html5AudioInAACFormat public="1" set="method" line="718" static="1"><f a=""><e path="Bool"/></f></html5AudioInAACFormat>
		<canPlayType set="method" line="723" static="1"><f a="element:format">
	<c path="String"/>
	<c path="String"/>
	<e path="stx.Option"><e path="Bool"/></e>
</f></canPlayType>
		<html5Canvas public="1" set="method" line="732" static="1"><f a=""><e path="Bool"/></f></html5Canvas>
		<html5CanvasTextAPI public="1" set="method" line="743" static="1"><f a=""><e path="Bool"/></f></html5CanvasTextAPI>
		<html5Command public="1" set="method" line="754" static="1"><f a=""><e path="Bool"/></f></html5Command>
		<html5Datalist public="1" set="method" line="759" static="1"><f a=""><e path="Bool"/></f></html5Datalist>
		<html5Details public="1" set="method" line="764" static="1"><f a=""><e path="Bool"/></f></html5Details>
		<html5Device public="1" set="method" line="769" static="1"><f a=""><e path="Bool"/></f></html5Device>
		<html5FormConstraintValidation public="1" set="method" line="774" static="1"><f a=""><e path="Bool"/></f></html5FormConstraintValidation>
		<html5IframeSandbox public="1" set="method" line="779" static="1"><f a=""><e path="Bool"/></f></html5IframeSandbox>
		<html5IframeSrcdoc public="1" set="method" line="784" static="1"><f a=""><e path="Bool"/></f></html5IframeSrcdoc>
		<html5InputAutofocus public="1" set="method" line="789" static="1"><f a=""><e path="Bool"/></f></html5InputAutofocus>
		<html5InputPlaceholder public="1" set="method" line="794" static="1"><f a=""><e path="Bool"/></f></html5InputPlaceholder>
		<html5InputTypeColor public="1" set="method" line="799" static="1"><f a=""><e path="Bool"/></f></html5InputTypeColor>
		<html5InputTypeEmail public="1" set="method" line="804" static="1"><f a=""><e path="Bool"/></f></html5InputTypeEmail>
		<html5InputTypeNumber public="1" set="method" line="809" static="1"><f a=""><e path="Bool"/></f></html5InputTypeNumber>
		<html5InputTypeRange public="1" set="method" line="814" static="1"><f a=""><e path="Bool"/></f></html5InputTypeRange>
		<html5InputTypeSearch public="1" set="method" line="819" static="1"><f a=""><e path="Bool"/></f></html5InputTypeSearch>
		<html5InputTypeTel public="1" set="method" line="824" static="1"><f a=""><e path="Bool"/></f></html5InputTypeTel>
		<html5InputTypeUrl public="1" set="method" line="829" static="1"><f a=""><e path="Bool"/></f></html5InputTypeUrl>
		<html5InputTypeDate public="1" set="method" line="834" static="1"><f a=""><e path="Bool"/></f></html5InputTypeDate>
		<html5InputTypeTime public="1" set="method" line="839" static="1"><f a=""><e path="Bool"/></f></html5InputTypeTime>
		<html5InputTypeDatetime public="1" set="method" line="844" static="1"><f a=""><e path="Bool"/></f></html5InputTypeDatetime>
		<html5InputTypeDatetimeLocal public="1" set="method" line="849" static="1"><f a=""><e path="Bool"/></f></html5InputTypeDatetimeLocal>
		<html5InputTypeWeek public="1" set="method" line="854" static="1"><f a=""><e path="Bool"/></f></html5InputTypeWeek>
		<html5InputTypeMonth public="1" set="method" line="859" static="1"><f a=""><e path="Bool"/></f></html5InputTypeMonth>
		<html5Meter public="1" set="method" line="865" static="1"><f a=""><e path="Bool"/></f></html5Meter>
		<html5Output public="1" set="method" line="870" static="1"><f a=""><e path="Bool"/></f></html5Output>
		<html5Progress public="1" set="method" line="875" static="1"><f a=""><e path="Bool"/></f></html5Progress>
		<html5Time public="1" set="method" line="880" static="1"><f a=""><e path="Bool"/></f></html5Time>
		<html5Video public="1" set="method" line="886" static="1"><f a=""><e path="Bool"/></f></html5Video>
		<html5VideoCaptions public="1" set="method" line="898" static="1"><f a=""><e path="Bool"/></f></html5VideoCaptions>
		<html5VideoPoster public="1" set="method" line="904" static="1"><f a=""><e path="Bool"/></f></html5VideoPoster>
		<checIfExist set="method" line="910" static="1"><f a="elementName:property">
	<c path="String"/>
	<c path="String"/>
	<e path="stx.Option"><e path="Bool"/></e>
</f></checIfExist>
		<checIputTypeProperty set="method" line="919" static="1"><f a="type">
	<c path="String"/>
	<e path="stx.Option"><e path="Bool"/></e>
</f></checIputTypeProperty>
		<html5VidouInWebMFormat public="1" set="method" line="929" static="1"><f a=""><e path="Bool"/></f></html5VidouInWebMFormat>
		<html5VidouInH264Format public="1" set="method" line="934" static="1"><f a=""><e path="Bool"/></f></html5VidouInH264Format>
		<html5VidouInTheoraFormat public="1" set="method" line="939" static="1"><f a=""><e path="Bool"/></f></html5VidouInTheoraFormat>
		<html5ContentEditable public="1" set="method" line="944" static="1"><f a=""><e path="Bool"/></f></html5ContentEditable>
		<html5CrossDocumentMessaging public="1" set="method" line="949" static="1"><f a=""><e path="Bool"/></f></html5CrossDocumentMessaging>
		<html5DragAndDrop public="1" set="method" line="952" static="1"><f a=""><e path="Bool"/></f></html5DragAndDrop>
		<html5FileApi public="1" set="method" line="957" static="1"><f a=""><e path="Bool"/></f></html5FileApi>
		<html5Geolocation public="1" set="method" line="965" static="1"><f a=""><e path="Bool"/></f></html5Geolocation>
		<html5History public="1" set="method" line="968" static="1"><f a=""><e path="Bool"/></f></html5History>
		<html5LocalStorage public="1" set="method" line="971" static="1"><f a=""><e path="Bool"/></f></html5LocalStorage>
		<html5Microdata public="1" set="method" line="974" static="1"><f a=""><e path="Bool"/></f></html5Microdata>
		<html5OfflineWebApplications public="1" set="method" line="977" static="1"><f a=""><e path="Bool"/></f></html5OfflineWebApplications>
		<html5ServerSentEvents public="1" set="method" line="980" static="1"><f a=""><e path="Bool"/></f></html5ServerSentEvents>
		<html5SessionStorage public="1" set="method" line="988" static="1"><f a=""><e path="Bool"/></f></html5SessionStorage>
		<html5SVG public="1" set="method" line="996" static="1"><f a=""><e path="Bool"/></f></html5SVG>
		<html5SVGInTextHtml public="1" set="method" line="999" static="1"><f a=""><e path="Bool"/></f></html5SVGInTextHtml>
		<html5WebSimpleDB public="1" set="method" line="1011" static="1"><f a=""><e path="Bool"/></f></html5WebSimpleDB>
		<html5WebSocket public="1" set="method" line="1014" static="1"><f a=""><e path="Bool"/></f></html5WebSocket>
		<html5WebSQLDatabase public="1" set="method" line="1017" static="1"><f a=""><e path="Bool"/></f></html5WebSQLDatabase>
		<html5WebWorkers public="1" set="method" line="1020" static="1"><f a=""><e path="Bool"/></f></html5WebWorkers>
		<html5Widgets public="1" set="method" line="1023" static="1"><f a=""><e path="Bool"/></f></html5Widgets>
		<html5Undo public="1" set="method" line="1031" static="1"><f a=""><e path="Bool"/></f></html5Undo>
		<boxModel public="1" set="method" line="1042" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> Determines if the browser supports the CSS box model.
   </haxe_doc>
		</boxModel>
		<getAttributeStyle public="1" set="method" line="1052" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the style of an attribute can be retrieved through its
   * getAttribute() member.
   </haxe_doc>
		</getAttributeStyle>
		<opacity public="1" set="method" line="1070" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the opacity property is supported.
   </haxe_doc>
		</opacity>
		<cssFloat public="1" set="method" line="1082" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the CSS 'float' property (a reserved JavaScript keyword) can
   * be accessed through 'cssFloat'.
   </haxe_doc>
		</cssFloat>
		<checkboxValueDefaultsToOn public="1" set="method" line="1091" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if a checkbox's value defaults to 'on'.
   </haxe_doc>
		</checkboxValueDefaultsToOn>
		<defaultSelectedHasSelectProperty public="1" set="method" line="1102" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if an option that is selected by default has a '.select' property.
   </haxe_doc>
		</defaultSelectedHasSelectProperty>
		<removedNodeHasNullParentNode public="1" set="method" line="1111" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if a node added and removed has a parentNode equal to null.
   </haxe_doc>
		</removedNodeHasNullParentNode>
		<getComputedStyle public="1" set="method" line="1120" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if the getComputedStyle() function is supported.
   </haxe_doc>
		</getComputedStyle>
		<offsetDoesNotIncludeMarginInBodyOffset public="1" set="method" line="1127" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> Determines if offset calculations fail to include the margin of the body.
   * It's not clear from W3 if this is a bug or not.
   </haxe_doc>
		</offsetDoesNotIncludeMarginInBodyOffset>
		<spuriousTbodyInsertedBug public="1" set="method" line="1145" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc><![CDATA[
   * Determines if adding an empty table element also results in the addition
   * of spurious <tbody> elements.
   ]]></haxe_doc>
		</spuriousTbodyInsertedBug>
		<whitespaceDroppedWithInnerHTMLBug public="1" set="method" line="1153" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if leading whitespace is dropped when used to form the
   * innerHTML of an element.
   </haxe_doc>
		</whitespaceDroppedWithInnerHTMLBug>
		<linksDroppedWithInnerHTMLBug public="1" set="method" line="1163" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if link elements are dropped when used to form the
   * innerHTML of an element.
   </haxe_doc>
		</linksDroppedWithInnerHTMLBug>
		<hrefIsNormalizedBug public="1" set="method" line="1170" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
   * Determines if href's are altered by the browser (this is a bug in some versions of IE).
   </haxe_doc>
		</hrefIsNormalizedBug>
		<offsetDoesNotAddBorder public="1" set="method" line="1179" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> Determines if offset calculations fail to include border. It's not clear
   * from W3 if this is a bug or not.
   </haxe_doc>
		</offsetDoesNotAddBorder>
		<offsetAddsBorderForTableAndCells public="1" set="method" line="1208" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> Determines if offset calculations includes border for table and cells.
   * It's not clear from W3 if this is a bug or not.
   </haxe_doc>
		</offsetAddsBorderForTableAndCells>
		<offsetSubtractsBorderForOverflowNotVisible public="1" set="method" line="1236" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> Determines if offset calculations fail to include border when overlay is
   * set to some other value than 'visible'.
   </haxe_doc>
		</offsetSubtractsBorderForOverflowNotVisible>
		<testSupport set="method" line="1269" static="1"><f a="contents:tagName:f:?def">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="stx.js.HTMLElement"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
	<e path="Bool"/>
</f></testSupport>
		<testSupportInBody set="method" line="1273" static="1"><f a="contents:tagName:f:?def">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="stx.js.HTMLElement"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
	<e path="Bool"/>
</f></testSupportInBody>
		<testBug set="method" line="1277" static="1"><f a="contents:tagName:f:?def">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="stx.js.HTMLElement"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
	<e path="Bool"/>
</f></testBug>
		<testBugInBody set="method" line="1281" static="1"><f a="contents:tagName:f:?def">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="stx.js.HTMLElement"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
	<e path="Bool"/>
</f></testBugInBody>
		<test set="method" line="1285" static="1"><f a="contents:tagName:f:def1:def2">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="stx.js.HTMLElement"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></test>
		<testInBody set="method" line="1299" static="1"><f a="contents:tagName:f:def1:def2">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="stx.js.HTMLElement"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></testInBody>
		<testFeatureAndMemorize set="method" line="1318" static="1"><f a="key:testFunction">
	<c path="String"/>
	<t path="stx.Function">
		<e path="Void"/>
		<e path="stx.Option"><e path="Bool"/></e>
	</t>
	<e path="Bool"/>
</f></testFeatureAndMemorize>
		<testBugAndMemorize set="method" line="1321" static="1"><f a="key:testFunction">
	<c path="String"/>
	<t path="stx.Function">
		<e path="Void"/>
		<e path="stx.Option"><e path="Bool"/></e>
	</t>
	<e path="Bool"/>
</f></testBugAndMemorize>
		<testAndMemorize set="method" line="1324" static="1"><f a="key:defaultValue:testFunction">
	<c path="String"/>
	<e path="Bool"/>
	<t path="stx.Function">
		<e path="Void"/>
		<e path="stx.Option"><e path="Bool"/></e>
	</t>
	<e path="Bool"/>
</f></testAndMemorize>
		<haxe_doc> Feature detection library </haxe_doc>
	</class>
	<enum path="stx.js.detect.EnvironmentType" params="" file="src/main/haxe/stx/js/detect/Host.hx" module="stx.js.detect.Host">
		<UnknownServer/>
		<Unknown a="what"><c path="String"/></Unknown>
		<Safari a="version"><c path="String"/></Safari>
		<Opera a="version"><c path="String"/></Opera>
		<NodeJs/>
		<IE a="version"><c path="String"/></IE>
		<Firefox a="version"><c path="String"/></Firefox>
		<Chrome a="version"><c path="String"/></Chrome>
	</enum>
	<enum path="stx.js.detect.OSType" params="" file="src/main/haxe/stx/js/detect/Host.hx" module="stx.js.detect.Host">
		<Windows/>
		<Unknown a="userAgent"><c path="String"/></Unknown>
		<MacMobile/>
		<Mac/>
		<Linux/>
		<Android/>
	</enum>
	<class path="stx.js.detect.Host" params="" file="src/main/haxe/stx/js/detect/Host.hx">
		<Environment public="1" line="39" static="1"><e path="stx.js.detect.EnvironmentType"/></Environment>
		<OS public="1" line="40" static="1"><e path="stx.js.detect.OSType"/></OS>
		<OperaPattern line="42" static="1"><c path="EReg"/></OperaPattern>
		<ChromePattern line="43" static="1"><c path="EReg"/></ChromePattern>
		<SafariPattern line="44" static="1"><c path="EReg"/></SafariPattern>
		<FirefoxPattern line="45" static="1"><c path="EReg"/></FirefoxPattern>
		<IEPattern line="46" static="1"><c path="EReg"/></IEPattern>
		<WindowsPattern line="48" static="1"><c path="EReg"/></WindowsPattern>
		<MacPattern line="49" static="1"><c path="EReg"/></MacPattern>
		<MacMobilePattern line="50" static="1"><c path="EReg"/></MacMobilePattern>
		<AndroidPattern line="51" static="1"><c path="EReg"/></AndroidPattern>
		<LinuxPattern line="52" static="1"><c path="EReg"/></LinuxPattern>
		<detectEnvironment set="method" line="54" static="1"><f a=""><e path="stx.js.detect.EnvironmentType"/></f></detectEnvironment>
		<detectOS set="method" line="68" static="1"><f a=""><e path="stx.js.detect.OSType"/></f></detectOS>
	</class>
	<class path="stx.js.dom.DomCollectionExtensions" params="" file="src/main/haxe/stx/js/dom/DomExtensions.hx" module="stx.js.dom.DomExtensions"><toArray public="1" params="T" set="method" line="21" static="1"><f a="c">
	<c path="stx.js.DomCollection"><c path="toArray.T"/></c>
	<c path="Array"><c path="toArray.T"/></c>
</f></toArray></class>
	<class path="stx.js.dom.HTMLDocumentExtensions" params="" file="src/main/haxe/stx/js/dom/HTMLDocumentExtensions.hx">
		<newElement public="1" set="method" line="34" static="1"><f a="document:eType:?atts:?style">
	<t path="stx.js.HTMLDocument"/>
	<c path="String"/>
	<c path="Array"><c path="stx.Tuple2">
	<c path="String"/>
	<c path="String"/>
</c></c>
	<c path="String"/>
	<t path="stx.js.HTMLElement"/>
</f></newElement>
		<newImage public="1" set="method" line="47" static="1"><f a="doc">
	<t path="stx.js.HTMLDocument"/>
	<t path="stx.js.HTMLImageElement"/>
</f></newImage>
		<newDiv public="1" set="method" line="51" static="1"><f a="doc">
	<t path="stx.js.HTMLDocument"/>
	<t path="stx.js.HTMLDivElement"/>
</f></newDiv>
		<newIframe public="1" set="method" line="55" static="1"><f a="doc:?width:?height">
	<t path="stx.js.HTMLDocument"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="stx.js.HTMLIFrameElement"/>
</f></newIframe>
		<newIframeWindow public="1" set="method" line="70" static="1">
			<f a="doc:width:height">
				<t path="stx.js.HTMLDocument"/>
				<c path="Int"/>
				<c path="Int"/>
				<t path="stx.js.HTMLIFrameElement"/>
			</f>
			<haxe_doc> Creates a new iframe intended to be used as a window. This iframe will 
   * not have borders, will not allow resizing, will not have any margin or
   * padding, and will be transparent (depending on the body).
   </haxe_doc>
		</newIframeWindow>
		<newIframeInvisible public="1" set="method" line="94" static="1"><f a="doc">
	<t path="stx.js.HTMLDocument"/>
	<t path="stx.js.HTMLIFrameElement"/>
</f></newIframeInvisible>
		<getId public="1" set="method" line="98" static="1"><f a="doc:s">
	<t path="stx.js.HTMLDocument"/>
	<c path="String"/>
	<t path="stx.js.HTMLElement"/>
</f></getId>
		<getIds public="1" set="method" line="102" static="1"><f a="doc:a">
	<t path="stx.js.HTMLDocument"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><t path="stx.js.HTMLElement"/></c>
</f></getIds>
		<getTags public="1" set="method" line="112" static="1"><f a="doc:s">
	<t path="stx.js.HTMLDocument"/>
	<c path="String"/>
	<c path="Array"><t path="stx.js.HTMLElement"/></c>
</f></getTags>
		<getClasses public="1" set="method" line="116" static="1"><f a="doc:s">
	<t path="stx.js.HTMLDocument"/>
	<c path="String"/>
	<c path="Array"><t path="stx.js.HTMLElement"/></c>
</f></getClasses>
		<haxe_doc> 
 * Comm]on elements.
 </haxe_doc>
	</class>
	<class path="stx.js.dom.HTMLElementExtensions" params="" file="src/main/haxe/stx/js/dom/HTMLElementExtensions.hx">
		<hasClass public="1" set="method" line="30" static="1"><f a="e:name">
	<t path="stx.js.HTMLElement"/>
	<c path="String"/>
	<e path="Bool"/>
</f></hasClass>
		<removeElement public="1" set="method" line="34" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="Void"/>
</f></removeElement>
		<getTags public="1" set="method" line="41" static="1"><f a="e:tagName">
	<t path="stx.js.HTMLElement"/>
	<c path="String"/>
	<c path="Array"><t path="stx.js.HTMLElement"/></c>
</f></getTags>
		<append public="1" set="method" line="45" static="1"><f a="e:child">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></append>
		<setAttr public="1" set="method" line="50" static="1"><f a="e:attGet:attSet">
	<t path="stx.js.HTMLElement"/>
	<c path="String"/>
	<c path="String"/>
	<t path="stx.js.HTMLElement"/>
</f></setAttr>
		<getAttr public="1" set="method" line="55" static="1"><f a="e:attGet">
	<t path="stx.js.HTMLElement"/>
	<c path="String"/>
	<c path="String"/>
</f></getAttr>
		<setClass public="1" set="method" line="59" static="1"><f a="e:className">
	<t path="stx.js.HTMLElement"/>
	<c path="String"/>
	<t path="stx.js.HTMLElement"/>
</f></setClass>
		<asIframe public="1" get="inline" set="null" line="67" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLIFrameElement"/>
</f></asIframe>
		<asScript public="1" get="inline" set="null" line="71" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLScriptElement"/>
</f></asScript>
		<asDiv public="1" get="inline" set="null" line="75" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLDivElement"/>
</f></asDiv>
		<asForm public="1" get="inline" set="null" line="79" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLFormElement"/>
</f></asForm>
		<asBody public="1" get="inline" set="null" line="83" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLBodyElement"/>
</f></asBody>
		<asStyle public="1" get="inline" set="null" line="87" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLStyleElement"/>
</f></asStyle>
		<asText public="1" get="inline" set="null" line="91" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLTextElement"/>
</f></asText>
		<asVideo public="1" get="inline" set="null" line="95" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLVideoElement"/>
</f></asVideo>
		<asAudio public="1" get="inline" set="null" line="99" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLAudioElement"/>
</f></asAudio>
		<asHead public="1" get="inline" set="null" line="103" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLHeadElement"/>
</f></asHead>
		<asLink public="1" get="inline" set="null" line="107" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLLinkElement"/>
</f></asLink>
		<asTitle public="1" get="inline" set="null" line="111" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLTitleElement"/>
</f></asTitle>
		<asMeta public="1" get="inline" set="null" line="115" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLMetaElement"/>
</f></asMeta>
		<asBase public="1" get="inline" set="null" line="119" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLBaseElement"/>
</f></asBase>
		<asIsIndex public="1" get="inline" set="null" line="123" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLIsIndexElement"/>
</f></asIsIndex>
		<asSelect public="1" get="inline" set="null" line="127" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLSelectElement"/>
</f></asSelect>
		<asCanvas public="1" get="inline" set="null" line="131" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLCanvasElement"/>
</f></asCanvas>
		<asOptGroup public="1" get="inline" set="null" line="135" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLOptGroupElement"/>
</f></asOptGroup>
		<asOption public="1" get="inline" set="null" line="139" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLOptionElement"/>
</f></asOption>
		<asInput public="1" get="inline" set="null" line="143" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLInputElement"/>
</f></asInput>
		<asTextArea public="1" get="inline" set="null" line="147" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLTextAreaElement"/>
</f></asTextArea>
		<asButton public="1" get="inline" set="null" line="151" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLButtonElement"/>
</f></asButton>
		<asLabel public="1" get="inline" set="null" line="155" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLLabelElement"/>
</f></asLabel>
		<asFieldSet public="1" get="inline" set="null" line="159" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLFieldSetElement"/>
</f></asFieldSet>
		<asLegend public="1" get="inline" set="null" line="163" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLLegendElement"/>
</f></asLegend>
		<asUList public="1" get="inline" set="null" line="167" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLUListElement"/>
</f></asUList>
		<asOList public="1" get="inline" set="null" line="171" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLOListElement"/>
</f></asOList>
		<asDList public="1" get="inline" set="null" line="175" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLDListElement"/>
</f></asDList>
		<asDir public="1" get="inline" set="null" line="179" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLDirectoryElement"/>
</f></asDir>
		<asMenu public="1" get="inline" set="null" line="183" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLMenuElement"/>
</f></asMenu>
		<asLI public="1" get="inline" set="null" line="187" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLLIElement"/>
</f></asLI>
		<asP public="1" get="inline" set="null" line="191" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLParagraphElement"/>
</f></asP>
		<asH public="1" get="inline" set="null" line="195" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLHeadingElement"/>
</f></asH>
		<asQuote public="1" get="inline" set="null" line="199" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLQuoteElement"/>
</f></asQuote>
		<asPre public="1" get="inline" set="null" line="203" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLPreElement"/>
</f></asPre>
		<asBR public="1" get="inline" set="null" line="207" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLBRElement"/>
</f></asBR>
		<asBaseFont public="1" get="inline" set="null" line="211" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLBaseFontElement"/>
</f></asBaseFont>
		<asFont public="1" get="inline" set="null" line="215" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLFontElement"/>
</f></asFont>
		<asHR public="1" get="inline" set="null" line="219" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLHRElement"/>
</f></asHR>
		<asMod public="1" get="inline" set="null" line="223" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLModElement"/>
</f></asMod>
		<asA public="1" get="inline" set="null" line="227" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLAnchorElement"/>
</f></asA>
		<asImage public="1" get="inline" set="null" line="231" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLImageElement"/>
</f></asImage>
		<asObject public="1" get="inline" set="null" line="235" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLObjectElement"/>
</f></asObject>
		<asParam public="1" get="inline" set="null" line="239" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLParamElement"/>
</f></asParam>
		<asApplet public="1" get="inline" set="null" line="243" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLAppletElement"/>
</f></asApplet>
		<asMap public="1" get="inline" set="null" line="247" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLMapElement"/>
</f></asMap>
		<asArea public="1" get="inline" set="null" line="251" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLAreaElement"/>
</f></asArea>
		<asTable public="1" get="inline" set="null" line="255" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLTableElement"/>
</f></asTable>
		<asCaption public="1" get="inline" set="null" line="259" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLTableCaptionElement"/>
</f></asCaption>
		<asTD public="1" get="inline" set="null" line="263" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLTableColElement"/>
</f></asTD>
		<asTHead public="1" get="inline" set="null" line="267" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLTableSectionElement"/>
</f></asTHead>
		<asTBody public="1" get="inline" set="null" line="271" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLTableSectionElement"/>
</f></asTBody>
		<asTFoot public="1" get="inline" set="null" line="275" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLTableSectionElement"/>
</f></asTFoot>
		<asTR public="1" get="inline" set="null" line="279" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLTableRowElement"/>
</f></asTR>
		<asFrameSet public="1" get="inline" set="null" line="283" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLFrameSetElement"/>
</f></asFrameSet>
		<asFrame public="1" get="inline" set="null" line="287" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLFrameElement"/>
</f></asFrame>
		<asIFrame public="1" get="inline" set="null" line="291" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLIFrameElement"/>
</f></asIFrame>
		<asIframeOption public="1" get="inline" set="null" line="299" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLIFrameElement"/></e>
</f></asIframeOption>
		<asScriptOption public="1" get="inline" set="null" line="303" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLScriptElement"/></e>
</f></asScriptOption>
		<asDivOption public="1" get="inline" set="null" line="307" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLDivElement"/></e>
</f></asDivOption>
		<asFormOption public="1" get="inline" set="null" line="311" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLFormElement"/></e>
</f></asFormOption>
		<asBodyOption public="1" get="inline" set="null" line="315" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLBodyElement"/></e>
</f></asBodyOption>
		<asStyleOption public="1" get="inline" set="null" line="319" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLStyleElement"/></e>
</f></asStyleOption>
		<asTextOption public="1" get="inline" set="null" line="323" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLTextElement"/></e>
</f></asTextOption>
		<asVideoOption public="1" get="inline" set="null" line="327" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLVideoElement"/></e>
</f></asVideoOption>
		<asAudioOption public="1" get="inline" set="null" line="331" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLAudioElement"/></e>
</f></asAudioOption>
		<asHeadOption public="1" get="inline" set="null" line="335" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLHeadElement"/></e>
</f></asHeadOption>
		<asLinkOption public="1" get="inline" set="null" line="339" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLLinkElement"/></e>
</f></asLinkOption>
		<asTitleOption public="1" get="inline" set="null" line="343" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLTitleElement"/></e>
</f></asTitleOption>
		<asMetaOption public="1" get="inline" set="null" line="347" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLMetaElement"/></e>
</f></asMetaOption>
		<asBaseOption public="1" get="inline" set="null" line="351" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLBaseElement"/></e>
</f></asBaseOption>
		<asIsIndexOption public="1" get="inline" set="null" line="355" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLIsIndexElement"/></e>
</f></asIsIndexOption>
		<asSelectOption public="1" get="inline" set="null" line="359" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLSelectElement"/></e>
</f></asSelectOption>
		<asCanvasOption public="1" get="inline" set="null" line="363" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLCanvasElement"/></e>
</f></asCanvasOption>
		<asOptGroupOption public="1" get="inline" set="null" line="367" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLOptGroupElement"/></e>
</f></asOptGroupOption>
		<asOptionOption public="1" get="inline" set="null" line="371" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLOptionElement"/></e>
</f></asOptionOption>
		<asInputOption public="1" get="inline" set="null" line="375" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLInputElement"/></e>
</f></asInputOption>
		<asTextAreaOption public="1" get="inline" set="null" line="379" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLTextAreaElement"/></e>
</f></asTextAreaOption>
		<asButtonOption public="1" get="inline" set="null" line="383" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLButtonElement"/></e>
</f></asButtonOption>
		<asLabelOption public="1" get="inline" set="null" line="387" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLLabelElement"/></e>
</f></asLabelOption>
		<asFieldSetOption public="1" get="inline" set="null" line="391" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLFieldSetElement"/></e>
</f></asFieldSetOption>
		<asLegendOption public="1" get="inline" set="null" line="395" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLLegendElement"/></e>
</f></asLegendOption>
		<asUListOption public="1" get="inline" set="null" line="399" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLUListElement"/></e>
</f></asUListOption>
		<asOListOption public="1" get="inline" set="null" line="403" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLOListElement"/></e>
</f></asOListOption>
		<asDListOption public="1" get="inline" set="null" line="407" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLDListElement"/></e>
</f></asDListOption>
		<asDirOption public="1" get="inline" set="null" line="411" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLDirectoryElement"/></e>
</f></asDirOption>
		<asMenuOption public="1" get="inline" set="null" line="415" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLMenuElement"/></e>
</f></asMenuOption>
		<asLIOption public="1" get="inline" set="null" line="419" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLLIElement"/></e>
</f></asLIOption>
		<asPOption public="1" get="inline" set="null" line="423" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLParagraphElement"/></e>
</f></asPOption>
		<asHOption public="1" get="inline" set="null" line="427" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLHeadingElement"/></e>
</f></asHOption>
		<asQuoteOption public="1" get="inline" set="null" line="431" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLQuoteElement"/></e>
</f></asQuoteOption>
		<asPreOption public="1" get="inline" set="null" line="435" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLPreElement"/></e>
</f></asPreOption>
		<asBROption public="1" get="inline" set="null" line="439" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLBRElement"/></e>
</f></asBROption>
		<asBaseFontOption public="1" get="inline" set="null" line="443" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLBaseFontElement"/></e>
</f></asBaseFontOption>
		<asFontOption public="1" get="inline" set="null" line="447" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLFontElement"/></e>
</f></asFontOption>
		<asHROption public="1" get="inline" set="null" line="451" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLHRElement"/></e>
</f></asHROption>
		<asModOption public="1" get="inline" set="null" line="455" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLModElement"/></e>
</f></asModOption>
		<asAOption public="1" get="inline" set="null" line="459" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLAnchorElement"/></e>
</f></asAOption>
		<asImageOption public="1" get="inline" set="null" line="463" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLImageElement"/></e>
</f></asImageOption>
		<asObjectOption public="1" get="inline" set="null" line="467" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLObjectElement"/></e>
</f></asObjectOption>
		<asParamOption public="1" get="inline" set="null" line="471" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLParamElement"/></e>
</f></asParamOption>
		<asAppletOption public="1" get="inline" set="null" line="475" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLAppletElement"/></e>
</f></asAppletOption>
		<asMapOption public="1" get="inline" set="null" line="479" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLMapElement"/></e>
</f></asMapOption>
		<asAreaOption public="1" get="inline" set="null" line="483" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLAreaElement"/></e>
</f></asAreaOption>
		<asTableOption public="1" get="inline" set="null" line="487" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLTableElement"/></e>
</f></asTableOption>
		<asCaptionOption public="1" get="inline" set="null" line="491" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLTableCaptionElement"/></e>
</f></asCaptionOption>
		<asTDOption public="1" get="inline" set="null" line="495" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLTableColElement"/></e>
</f></asTDOption>
		<asTHeadOption public="1" get="inline" set="null" line="499" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLTableSectionElement"/></e>
</f></asTHeadOption>
		<asTBodyOption public="1" get="inline" set="null" line="503" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLTableSectionElement"/></e>
</f></asTBodyOption>
		<asTFootOption public="1" get="inline" set="null" line="507" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLTableSectionElement"/></e>
</f></asTFootOption>
		<asTROption public="1" get="inline" set="null" line="511" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLTableRowElement"/></e>
</f></asTROption>
		<asFrameSetOption public="1" get="inline" set="null" line="515" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLFrameSetElement"/></e>
</f></asFrameSetOption>
		<asFrameOption public="1" get="inline" set="null" line="519" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLFrameElement"/></e>
</f></asFrameOption>
		<asIFrameOption public="1" get="inline" set="null" line="523" static="1"><f a="e">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><t path="stx.js.HTMLIFrameElement"/></e>
</f></asIFrameOption>
	</class>
	<class path="stx.js.dom.HTMLEventExtensions" params="" file="src/main/haxe/stx/js/dom/HTMLEventExtensions.hx">
		<cancelBubbling public="1" set="method" line="25" static="1"><f a="e">
	<t path="stx.js.EventListener"><d/></t>
	<e path="Void"/>
</f></cancelBubbling>
		<getRelatedTarget public="1" set="method" line="35" static="1"><f a="event">
	<t path="stx.js.EventListener"><d/></t>
	<t path="stx.js.HTMLElement"/>
</f></getRelatedTarget>
	</class>
	<class path="stx.js.dom.Quirks" params="" file="src/main/haxe/stx/js/dom/Quirks.hx">
		<__meta__ public="1" line="49" static="1"><d/></__meta__>
		<ExcludePattern line="50" static="1"><c path="EReg"/></ExcludePattern>
		<AlphaPattern line="51" static="1"><c path="EReg"/></AlphaPattern>
		<OpacityPattern line="52" static="1"><c path="EReg"/></OpacityPattern>
		<FloatPattern line="53" static="1"><c path="EReg"/></FloatPattern>
		<UpperCasePattern line="54" static="1"><c path="EReg"/></UpperCasePattern>
		<NumberPixelPattern line="55" static="1"><c path="EReg"/></NumberPixelPattern>
		<NumberPattern line="56" static="1"><c path="EReg"/></NumberPattern>
		<RootPattern line="57" static="1"><c path="EReg"/></RootPattern>
		<cssWidth line="59" static="1"><c path="Array"><c path="String"/></c></cssWidth>
		<cssHeight line="60" static="1"><c path="Array"><c path="String"/></c></cssHeight>
		<cssShow line="61" static="1"><c path="stx.ds.Map">
	<c path="String"/>
	<c path="String"/>
</c></cssShow>
		<border line="62" static="1"><c path="String"/></border>
		<margin line="63" static="1"><c path="String"/></margin>
		<createXMLHttpRequest public="1" set="method" line="66" static="1"><f a=""><t path="stx.js.XMLHttpRequest"/></f></createXMLHttpRequest>
		<getIframeDocument public="1" set="method" line="88" static="1"><f a="iframe">
	<t path="stx.js.HTMLIFrameElement"/>
	<t path="stx.js.HTMLDocument"/>
</f></getIframeDocument>
		<getIframeWindow public="1" set="method" line="101" static="1"><f a="iframe">
	<t path="stx.js.HTMLIFrameElement"/>
	<t path="stx.js.Window"/>
</f></getIframeWindow>
		<addEventListener public="1" set="method" line="114" static="1"><f a="target:type:listener:useCapture">
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<removeEventListener public="1" set="method" line="123" static="1"><f a="target:type:listener:useCapture">
	<t path="stx.js.EventTarget"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.EventListener"><d/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<getOverrideStyle public="1" set="method" line="132" static="1"><f a="doc:el:pseudo">
	<t path="stx.js.HTMLDocument"/>
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.DOMString"/>
	<t path="stx.js.CSSStyleDeclaration"/>
</f></getOverrideStyle>
		<deleteCssRule public="1" set="method" line="146" static="1">
			<f a="doc:rule">
				<t path="stx.js.HTMLDocument"/>
				<t path="stx.js.CSSRule"/>
				<t path="stx.js.CSSRule"/>
			</f>
			<haxe_doc> Deletes the specified css rule.
   </haxe_doc>
		</deleteCssRule>
		<addOverridingCssRule public="1" set="method" line="183" static="1">
			<f a="el:?style">
				<t path="stx.js.HTMLElement"/>
				<c path="String"/>
				<t path="stx.js.CSSStyleRule"/>
			</f>
			<haxe_doc> Adds an overriding style to the specified element. These styles will not
   * override inline styles unless "!important" is specified.
   </haxe_doc>
		</addOverridingCssRule>
		<addCssStylesheet public="1" set="method" line="201" static="1">
			<f a="doc:content">
				<t path="stx.js.HTMLDocument"/>
				<c path="String"/>
				<t path="stx.js.CSSStyleSheet"/>
			</f>
			<haxe_doc> Adds a new style sheet to the document with the specified content.
   </haxe_doc>
		</addCssStylesheet>
		<getCssRules public="1" set="method" line="233" static="1">
			<f a="sheet">
				<t path="stx.js.CSSStyleSheet"/>
				<c path="stx.js.DomCollection"><t path="stx.js.CSSRule"/></c>
			</f>
			<haxe_doc> Retrieves the rules comprising the specified CSS sheet.
   </haxe_doc>
		</getCssRules>
		<insertCssRule public="1" set="method" line="240" static="1">
			<f a="sheet:rule:?index_">
				<t path="stx.js.CSSStyleSheet"/>
				<c path="String"/>
				<c path="Int"/>
				<t path="stx.js.CSSRule"/>
			</f>
			<haxe_doc> Inserts the specified rule into the specified CSS sheet.
   </haxe_doc>
		</insertCssRule>
		<getActualCssPropertyName public="1" set="method" line="275" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc> Retrieves the actual property name for the specified css property.
   * Because some CSS property names are reserved JavaScript keywords, not
   * every CSS property has an identically equal JavaScript property name.
   </haxe_doc>
		</getActualCssPropertyName>
		<getComputedCssProperty public="1" set="method" line="283" static="1">
			<f a="elem:name">
				<t path="stx.js.HTMLElement"/>
				<c path="String"/>
				<e path="stx.Option"><c path="String"/></e>
			</f>
			<haxe_doc> Retrieves the computed value for a particular CSS property.
   </haxe_doc>
		</getComputedCssProperty>
		<getCssProperty public="1" set="method" line="330" static="1">
			<f a="elem:name">
				<t path="stx.js.HTMLElement"/>
				<c path="String"/>
				<e path="stx.Option"><c path="String"/></e>
			</f>
			<haxe_doc> Retrieves a particular CSS property.
   </haxe_doc>
		</getCssProperty>
		<getCssPropertyIfSet public="1" set="method" line="338" static="1"><f a="elem:name">
	<t path="stx.js.HTMLElement"/>
	<c path="String"/>
	<e path="stx.Option"><c path="String"/></e>
</f></getCssPropertyIfSet>
		<getViewportSize public="1" set="method" line="344" static="1">
			<f a="?win_">
				<t path="stx.js.Window"/>
				<a>
					<dy><c path="Int"/></dy>
					<dx><c path="Int"/></dx>
				</a>
			</f>
			<haxe_doc> Retrieves the dimensions of the viewport (inner window of the browser,
   * for top-level windows).
   </haxe_doc>
		</getViewportSize>
		<getPageScroll public="1" set="method" line="363" static="1">
			<f a="?win_">
				<t path="stx.js.Window"/>
				<a>
					<y><c path="Int"/></y>
					<x><c path="Int"/></x>
				</a>
			</f>
			<haxe_doc> Retrieves the scroll of the page, in pixels. </haxe_doc>
		</getPageScroll>
		<hasAttribute public="1" set="method" line="388" static="1">
			<f a="e:attr">
				<t path="stx.js.HTMLElement"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> Determines if the specified element has the specified attribute.
   </haxe_doc>
		</hasAttribute>
		<getBodyOffset public="1" set="method" line="401" static="1">
			<f a="doc">
				<t path="stx.js.HTMLDocument"/>
				<e path="stx.Option"><a>
	<y><c path="Int"/></y>
	<x><c path="Int"/></x>
</a></e>
			</f>
			<haxe_doc> Retrieves the offset of the document's body, relative to the window origin.
   </haxe_doc>
		</getBodyOffset>
		<setOffset public="1" set="method" line="419" static="1">
			<f a="elem:offset">
				<t path="stx.js.HTMLElement"/>
				<a>
					<y><c path="Int"/></y>
					<x><c path="Int"/></x>
				</a>
				<t path="stx.js.HTMLElement"/>
			</f>
			<haxe_doc>
  *   Set the current coordinates of the element, relative to the document.
  </haxe_doc>
		</setOffset>
		<addClass public="1" set="method" line="441" static="1">
			<f a="element:value">
				<t path="stx.js.HTMLElement"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
   * Adds the specified class the element.
   </haxe_doc>
		</addClass>
		<removeClass public="1" set="method" line="448" static="1">
			<f a="element:value">
				<t path="stx.js.HTMLElement"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
   * Remove a single the element.
   </haxe_doc>
		</removeClass>
		<hasClass public="1" set="method" line="456" static="1">
			<f a="element:value">
				<t path="stx.js.HTMLElement"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   * Determine whether the element is assigned the given class.
   </haxe_doc>
		</hasClass>
		<setWidth public="1" set="method" line="461" static="1"><f a="elem:width">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
	<t path="stx.js.HTMLElement"/>
</f></setWidth>
		<setHeight public="1" set="method" line="464" static="1"><f a="elem:hight">
	<t path="stx.js.HTMLElement"/>
	<c path="Int"/>
	<t path="stx.js.HTMLElement"/>
</f></setHeight>
		<setCssProperty public="1" set="method" line="471" static="1">
			<f a="elem:name:value">
				<t path="stx.js.HTMLElement"/>
				<c path="String"/>
				<c path="String"/>
				<t path="stx.js.HTMLElement"/>
			</f>
			<haxe_doc>
   *  Sets new value of the css property.
   </haxe_doc>
		</setCssProperty>
		<getInnerHeight public="1" set="method" line="510" static="1">
			<f a="elem">
				<t path="stx.js.HTMLElement"/>
				<e path="stx.Option"><c path="Int"/></e>
			</f>
			<haxe_doc>
 * Get the current computed height for the  element , including padding but not border.
 </haxe_doc>
		</getInnerHeight>
		<getOuterHeight public="1" set="method" line="516" static="1">
			<f a="elem:includeMargin">
				<t path="stx.js.HTMLElement"/>
				<e path="Bool"/>
				<e path="stx.Option"><c path="Int"/></e>
			</f>
			<haxe_doc>
 * Get the current computed height for the element, including padding, border, and optionally margin.
 </haxe_doc>
		</getOuterHeight>
		<getInnerWidth public="1" set="method" line="523" static="1">
			<f a="elem">
				<t path="stx.js.HTMLElement"/>
				<e path="stx.Option"><c path="Int"/></e>
			</f>
			<haxe_doc>
  * Get the current computed width for the element, including padding but not border.
  </haxe_doc>
		</getInnerWidth>
		<getOuterWidth public="1" set="method" line="529" static="1">
			<f a="elem:includeMargin">
				<t path="stx.js.HTMLElement"/>
				<e path="Bool"/>
				<e path="stx.Option"><c path="Int"/></e>
			</f>
			<haxe_doc>
  * Get the current computed width for the element, including padding and border.
  </haxe_doc>
		</getOuterWidth>
		<getHeight public="1" set="method" line="534" static="1"><f a="elem">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><c path="Int"/></e>
</f></getHeight>
		<getWidth public="1" set="method" line="538" static="1"><f a="elem">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><c path="Int"/></e>
</f></getWidth>
		<getWidthOrHeight set="method" line="542" static="1"><f a="elem:offsetValueExtract:which:extra">
	<t path="stx.js.HTMLElement"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<e path="stx.Option"><c path="Int"/></e>
</f></getWidthOrHeight>
		<swap params="T" set="method" line="556" static="1"><f a="elem:values:functionCallback">
	<t path="stx.js.HTMLElement"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<t path="stx.Function">
		<t path="stx.js.HTMLElement"/>
		<c path="swap.T"/>
	</t>
	<c path="swap.T"/>
</f></swap>
		<setAndStore set="method" line="562" static="1"><f a="elem:styles">
	<t path="stx.js.HTMLElement"/>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
	<c path="stx.ds.Map">
		<c path="String"/>
		<c path="String"/>
	</c>
</f></setAndStore>
		<getWH set="method" line="571" static="1"><f a="elem:offsetValueExtract:which:extra">
	<t path="stx.js.HTMLElement"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="Int"/>
</f></getWH>
		<getOffset public="1" set="method" line="592" static="1">
			<f a="elem">
				<t path="stx.js.HTMLElement"/>
				<e path="stx.Option"><a>
	<y><c path="Int"/></y>
	<x><c path="Int"/></x>
</a></e>
			</f>
			<haxe_doc> Retrieves the offset of the element, relative to the window origin.
   </haxe_doc>
		</getOffset>
		<getPosition public="1" set="method" line="669" static="1"><f a="elem">
	<t path="stx.js.HTMLElement"/>
	<e path="stx.Option"><a>
	<y><c path="Int"/></y>
	<x><c path="Int"/></x>
</a></e>
</f></getPosition>
		<offsetParent public="1" set="method" line="692" static="1"><f a="elem">
	<t path="stx.js.HTMLElement"/>
	<t path="stx.js.HTMLElement"/>
</f></offsetParent>
		<haxe_doc>
 * Common operations that need to be performed differently across browsers.
 </haxe_doc>
	</class>
	<class path="stx.js.io.IFrameIO" params="" file="src/main/haxe/stx/js/io/IFrameIO.hx" interface="1">
		<receive public="1" set="method">
			<f a="f:originUrl:?originWindow">
				<f a="">
					<d/>
					<e path="Void"/>
				</f>
				<c path="String"/>
				<t path="stx.js.Window"/>
				<c path="stx.js.io.IFrameIO"/>
			</f>
			<haxe_doc> Adds a receiver that will handle messages from the given domain.
   *
   * @param f             The function that will be passed each message.
   *
   * @param originUrl     The URL where the messages will come from, including 
   *                      the query string but without the hash tag.
   *
   * @param originWindow  The window that the messages will come from. If this
   *                      parameter is not specified, reliable reception from
   *                      the origin window is not possible.
   </haxe_doc>
		</receive>
		<receiveWhile public="1" set="method">
			<f a="f:originUrl:?originWindow">
				<f a="">
					<d/>
					<e path="Bool"/>
				</f>
				<c path="String"/>
				<t path="stx.js.Window"/>
				<c path="stx.js.io.IFrameIO"/>
			</f>
			<haxe_doc> Adds a receiver that will handle messages from the given domain for as 
   * long as it returns true.
   *
   * @param f             The function that will be passed each message.
   *
   * @param originUrl     The URL where the messages will come from, including 
   *                      the query string but without the hash tag.
   *
   * @param originWindow  The window that the messages will come from. If this
   *                      parameter is not specified, reliable reception from
   *                      the origin window is not possible.
   </haxe_doc>
		</receiveWhile>
		<receiveRequests public="1" set="method">
			<f a="f:url:window">
				<f a="">
					<d/>
					<c path="stx.Future"><d/></c>
				</f>
				<c path="String"/>
				<t path="stx.js.Window"/>
				<c path="stx.js.io.IFrameIO"/>
			</f>
			<haxe_doc> Receives and responds to requests with the specified function.
   *
   * @param f       The function that will receive and responde to requests.
   *
   * @param url     The URL of the target/source window, including the query string but without the hash tag. 
   *
   * @param window  The window of the target/source window.
   </haxe_doc>
		</receiveRequests>
		<send public="1" set="method">
			<f a="data:targetUrl:targetWindow">
				<d/>
				<c path="String"/>
				<t path="stx.js.Window"/>
				<c path="stx.js.io.IFrameIO"/>
			</f>
			<haxe_doc> Posts a message to the specified iframe, which should be located at the 
   * exact URL specified.
   *
   * @param data          The anonymous object that will be sent.
   *
   * @param targetUrl     The exact URL the message is being sent to, including 
   *                      host, port, path, and query, but excluding hash tag.
   *
   * @param targetWindow  The window that will receive the message.
   </haxe_doc>
		</send>
		<request public="1" set="method">
			<f a="request:targetUrl:targetWindow">
				<d/>
				<c path="String"/>
				<t path="stx.js.Window"/>
				<c path="stx.Future"><d/></c>
			</f>
			<haxe_doc> Sends a request for information to the specified iframe, which should be
   * located at the exact URL specified.
    *
    * @param request       The anonymous object that will be sent.
    *
    * @param targetUrl     The exact URL the message is being sent to, including 
    *                      host, port, path, and query, but excluding hash tag.
    *
    * @param targetWindow  The window that will receive the message.
    *
    </haxe_doc>
		</request>
		<haxe_doc> A bidirectional communication layer capable of crossing frames hosted on 
 * different domains.
 </haxe_doc>
	</class>
	<class path="stx.js.io._IFrameIO.AbstractIFrameIO" params="" file="src/main/haxe/stx/js/io/IFrameIO.hx" private="1" module="stx.js.io.IFrameIO">
		<implements path="stx.js.io.IFrameIO"/>
		<requestCounter><c path="Int"/></requestCounter>
		<receive public="1" set="method" line="129"><f a="f:originUrl:?originWindow">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></receive>
		<receiveWhile public="1" set="method" line="133"><f a="f:originUrl:?originWindow">
	<f a="">
		<d/>
		<e path="Bool"/>
	</f>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></receiveWhile>
		<receiveRequests public="1" set="method" line="137"><f a="f:url:window">
	<f a="">
		<d/>
		<c path="stx.Future"><d/></c>
	</f>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></receiveRequests>
		<send public="1" set="method" line="152"><f a="data:targetUrl:targetWindow">
	<d/>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></send>
		<request public="1" set="method" line="156"><f a="requestData:targetUrl:targetWindow">
	<d/>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.Future"><d/></c>
</f></request>
		<new public="1" set="method" line="125"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.js.io.IFrameIOAutoDetect" params="" file="src/main/haxe/stx/js/io/IFrameIO.hx" module="stx.js.io.IFrameIO">
		<implements path="stx.js.io.IFrameIO"/>
		<bindTarget><t path="stx.js.Window"/></bindTarget>
		<underlying><c path="stx.js.io.IFrameIO"/></underlying>
		<receive public="1" set="method" line="189"><f a="f:originUrl:?originWindow">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></receive>
		<receiveWhile public="1" set="method" line="195"><f a="f:originUrl:?originWindow">
	<f a="">
		<d/>
		<e path="Bool"/>
	</f>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></receiveWhile>
		<receiveRequests public="1" set="method" line="201"><f a="f:url:window">
	<f a="">
		<d/>
		<c path="stx.Future"><d/></c>
	</f>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></receiveRequests>
		<send public="1" set="method" line="207"><f a="data:targetUrl:targetWindow">
	<d/>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></send>
		<request public="1" set="method" line="213"><f a="data:targetUrl:targetWindow">
	<d/>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.Future"><d/></c>
</f></request>
		<new public="1" set="method" line="183"><f a="?w">
	<t path="stx.js.Window"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.js.io.IFrameIOPostMessage" params="" file="src/main/haxe/stx/js/io/IFrameIO.hx" module="stx.js.io.IFrameIO">
		<extends path="stx.js.io._IFrameIO.AbstractIFrameIO"/>
		<implements path="stx.js.io.IFrameIO"/>
		<normalizeOpt set="method" line="271" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<e path="stx.Option"><t path="stx.net.Url"/></e>
</f></normalizeOpt>
		<normalize set="method" line="275" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<t path="stx.net.Url"/>
</f></normalize>
		<getUrlFor set="method" line="279" static="1"><f a="w:url_">
	<t path="stx.js.Window"/>
	<t path="stx.net.Url"/>
	<t path="stx.net.Url"/>
</f></getUrlFor>
		<bindTarget><t path="stx.js.Window"/></bindTarget>
		<receive public="1" set="method" line="227" override="1"><f a="f:originUrl:?originWindow">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></receive>
		<receiveWhile public="1" set="method" line="231" override="1"><f a="f:originUrl_:?originWindow">
	<f a="">
		<d/>
		<e path="Bool"/>
	</f>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></receiveWhile>
		<send public="1" set="method" line="256" override="1"><f a="data:targetUrl_:targetWindow">
	<d/>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></send>
		<new public="1" set="method" line="221"><f a="w">
	<t path="stx.js.Window"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.js.io.IFrameIOPollingHashtag" params="" file="src/main/haxe/stx/js/io/IFrameIO.hx" module="stx.js.io.IFrameIO">
		<extends path="stx.js.io._IFrameIO.AbstractIFrameIO"/>
		<implements path="stx.js.io.IFrameIO"/>
		<lastMessageId line="303" static="1"><c path="Int"/></lastMessageId>
		<newFragmentsList line="304" static="1"><t path="stx.Factory"><c path="stx.ds.List"><c path="stx.Tuple2">
	<t path="stx.js.Window"/>
	<t path="stx.js.io._IFrameIO.AddressableFragment"/>
</c></c></t></newFragmentsList>
		<normalizeOpt set="method" line="392" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<e path="stx.Option"><t path="stx.net.Url"/></e>
</f></normalizeOpt>
		<normalize set="method" line="396" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<t path="stx.net.Url"/>
</f></normalize>
		<messageKeyFrom set="method" line="547" static="1"><f a="o">
	<a>
		<to><c path="String"/></to>
		<messageId><c path="String"/></messageId>
		<from><c path="String"/></from>
		<fragmentCount><c path="String"/></fragmentCount>
	</a>
	<c path="stx.js.io._IFrameIO.MessageKey"/>
</f></messageKeyFrom>
		<executor><c path="stx.time.ScheduledExecutor"/></executor>
		<fragmentsToSend><c path="stx.ds.List"><c path="stx.Tuple2">
	<t path="stx.js.Window"/>
	<t path="stx.js.io._IFrameIO.AddressableFragment"/>
</c></c></fragmentsToSend>
		<fragmentsReceived><c path="stx.ds.Map">
	<c path="stx.js.io._IFrameIO.MessageKey"/>
	<c path="Array"><t path="stx.js.io._IFrameIO.FragmentDelivery"/></c>
</c></fragmentsReceived>
		<receivers><c path="Hash"><c path="Array"><f a="">
	<d/>
	<e path="Void"/>
</f></c></c></receivers>
		<originUrlToWindow><c path="Hash"><t path="stx.js.Window"/></c></originUrlToWindow>
		<bindTarget><t path="stx.js.Window"/></bindTarget>
		<senderFuture><e path="stx.Option"><c path="stx.Future"><e path="Void"/></c></e></senderFuture>
		<receiverFuture><e path="stx.Option"><c path="stx.Future"><e path="Void"/></c></e></receiverFuture>
		<receive public="1" set="method" line="330" override="1"><f a="f:originUrl:?originWindow">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></receive>
		<receiveWhile public="1" set="method" line="334" override="1"><f a="f:originUrl:?originWindow">
	<f a="">
		<d/>
		<e path="Bool"/>
	</f>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></receiveWhile>
		<send public="1" set="method" line="356" override="1"><f a="data:to_:iframe">
	<d/>
	<c path="String"/>
	<t path="stx.js.Window"/>
	<c path="stx.js.io.IFrameIO"/>
</f></send>
		<stop public="1" set="method" line="385">
			<f a=""><c path="stx.js.io.IFrameIO"/></f>
			<haxe_doc> Stops the IO.
   </haxe_doc>
		</stop>
		<sender set="method" line="400"><f a=""><e path="Void"/></f></sender>
		<receiver set="method" line="416"><f a=""><e path="Void"/></f></receiver>
		<extractDomain set="method" line="480"><f a="url">
	<t path="stx.net.Url"/>
	<c path="String"/>
</f></extractDomain>
		<analyzeReceivedFragments set="method" line="488"><f a="messageKey:fragments">
	<c path="stx.js.io._IFrameIO.MessageKey"/>
	<c path="Array"><t path="stx.js.io._IFrameIO.FragmentDelivery"/></c>
	<e path="Void"/>
</f></analyzeReceivedFragments>
		<findMissingFragments set="method" line="507"><f a=""><c path="stx.ds.List"><t path="stx.js.io._IFrameIO.AddressableFragment"/></c></f></findMissingFragments>
		<fragmentsReceivedFor set="method" line="539"><f a="messageKey">
	<c path="stx.js.io._IFrameIO.MessageKey"/>
	<c path="Array"><t path="stx.js.io._IFrameIO.FragmentDelivery"/></c>
</f></fragmentsReceivedFor>
		<startSender set="method" line="551"><f a=""><e path="Void"/></f></startSender>
		<stopSender set="method" line="557"><f a=""><e path="Void"/></f></stopSender>
		<startReceiver set="method" line="563"><f a=""><e path="Void"/></f></startReceiver>
		<stopReceiver set="method" line="569"><f a=""><e path="Void"/></f></stopReceiver>
		<new public="1" set="method" line="316"><f a="w">
	<t path="stx.js.Window"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.js.io._IFrameIO.MessageKey" params="" file="src/main/haxe/stx/js/io/IFrameIO.hx" private="1" module="stx.js.io.IFrameIO">
		<messageId public="1" set="null"><c path="Int"/></messageId>
		<from public="1" set="null"><c path="String"/></from>
		<to public="1" set="null"><c path="String"/></to>
		<fragmentCount public="1" set="null"><c path="Int"/></fragmentCount>
		<hashCode public="1" set="method" line="589"><f a=""><c path="Int"/></f></hashCode>
		<equals public="1" set="method" line="595"><f a="other">
	<c path="stx.js.io._IFrameIO.MessageKey"/>
	<e path="Bool"/>
</f></equals>
		<new public="1" set="method" line="582"><f a="messageId:from:to:fragmentCount">
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="stx.js.io._IFrameIO.AddressableFragment" params="" file="src/main/haxe/stx/js/io/IFrameIO.hx" private="1" module="stx.js.io.IFrameIO"><a><to><c path="String"/></to></a></typedef>
	<typedef path="stx.js.io._IFrameIO.FragmentDelivery" params="" file="src/main/haxe/stx/js/io/IFrameIO.hx" private="1" module="stx.js.io.IFrameIO"><a>
	<type><c path="String"/></type>
	<to><c path="String"/></to>
	<messageId><c path="String"/></messageId>
	<from><c path="String"/></from>
	<fragmentId><c path="String"/></fragmentId>
	<fragmentCount><c path="String"/></fragmentCount>
	<data><c path="String"/></data>
</a></typedef>
	<typedef path="stx.js.io._IFrameIO.FragmentRequest" params="" file="src/main/haxe/stx/js/io/IFrameIO.hx" private="1" module="stx.js.io.IFrameIO"><a>
	<type><c path="String"/></type>
	<to><c path="String"/></to>
	<messageId><c path="String"/></messageId>
	<from><c path="String"/></from>
	<fragmentId><c path="String"/></fragmentId>
	<fragmentCount><c path="String"/></fragmentCount>
</a></typedef>
	<typedef path="stx.js.io._IFrameIO.FragmentReceipt" params="" file="src/main/haxe/stx/js/io/IFrameIO.hx" private="1" module="stx.js.io.IFrameIO"><a>
	<type><c path="String"/></type>
	<to><c path="String"/></to>
	<messageId><c path="String"/></messageId>
	<from><c path="String"/></from>
	<fragmentId><c path="String"/></fragmentId>
	<fragmentCount><c path="String"/></fragmentCount>
</a></typedef>
	<class path="stx.js.text.html.HTMLParser" params="" file="src/main/haxe/stx/js/text/html/HTMLParser.hx">
		<parseIntoElements public="1" set="method" line="13" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><t path="js.HtmlDom"/></c>
</f></parseIntoElements>
		<parse public="1" set="method" line="47" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></parse>
	</class>
	<class path="stx.macro.Stx" params="" file="src/main/haxe/stx/macro/Stx.hx"/>
	<typedef path="stx.math.geom.Point2d" params="T" file="src/main/haxe/stx/math/geom/Point.hx" module="stx.math.geom.Point"><a>
	<y><c path="stx.math.geom.Point2d.T"/></y>
	<x><c path="stx.math.geom.Point2d.T"/></x>
</a></typedef>
	<class path="stx.math.geom.Point2dIntExtensions" params="" file="src/main/haxe/stx/math/geom/PointExtensions.hx" module="stx.math.geom.PointExtensions">
		<minus public="1" get="inline" set="null" line="29" static="1"><f a="p1:p2">
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
</f></minus>
		<plus public="1" get="inline" set="null" line="36" static="1"><f a="p:v">
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
</f></plus>
		<map public="1" get="inline" set="null" line="43" static="1"><f a="p:f:g">
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
	<f a="">
		<c path="Int"/>
		<c path="Int"/>
	</f>
	<f a="">
		<c path="Int"/>
		<c path="Int"/>
	</f>
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
</f></map>
		<toVector public="1" get="inline" set="null" line="50" static="1"><f a="p">
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
</f></toVector>
		<toFloat public="1" get="inline" set="null" line="57" static="1"><f a="p">
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
</f></toFloat>
		<toTuple public="1" get="inline" set="null" line="64" static="1"><f a="p">
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
	<c path="stx.Tuple2">
		<c path="Int"/>
		<c path="Int"/>
	</c>
</f></toTuple>
	</class>
	<class path="stx.math.geom.Point2dFloatExtensions" params="" file="src/main/haxe/stx/math/geom/PointExtensions.hx" module="stx.math.geom.PointExtensions">
		<minus public="1" get="inline" set="null" line="70" static="1"><f a="p1:p2">
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
</f></minus>
		<plus public="1" get="inline" set="null" line="77" static="1"><f a="p:v">
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
</f></plus>
		<map public="1" get="inline" set="null" line="84" static="1"><f a="p:f:g">
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
</f></map>
		<toVector public="1" get="inline" set="null" line="91" static="1"><f a="p">
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
</f></toVector>
		<toInt public="1" get="inline" set="null" line="98" static="1"><f a="p">
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
</f></toInt>
		<toTuple public="1" get="inline" set="null" line="105" static="1"><f a="p">
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
	<c path="stx.Tuple2">
		<c path="Float"/>
		<c path="Float"/>
	</c>
</f></toTuple>
	</class>
	<typedef path="stx.math.geom.Vector2d" params="T" file="src/main/haxe/stx/math/geom/Vector.hx" module="stx.math.geom.Vector"><a>
	<dy><c path="stx.math.geom.Vector2d.T"/></dy>
	<dx><c path="stx.math.geom.Vector2d.T"/></dx>
</a></typedef>
	<class path="stx.math.geom.Vector2dIntExtensions" params="" file="src/main/haxe/stx/math/geom/VectorExtensions.hx" module="stx.math.geom.VectorExtensions">
		<minus public="1" get="inline" set="null" line="30" static="1"><f a="v1:v2">
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
</f></minus>
		<plus public="1" get="inline" set="null" line="37" static="1"><f a="v1:v2">
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
</f></plus>
		<times public="1" get="inline" set="null" line="44" static="1"><f a="v:factor">
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<c path="Int"/>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
</f></times>
		<dot public="1" get="inline" set="null" line="51" static="1"><f a="v1:v2">
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<c path="Int"/>
</f></dot>
		<map public="1" get="inline" set="null" line="55" static="1"><f a="v:f:g">
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<f a="">
		<c path="Int"/>
		<c path="Int"/>
	</f>
	<f a="">
		<c path="Int"/>
		<c path="Int"/>
	</f>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
</f></map>
		<toPoint public="1" get="inline" set="null" line="62" static="1"><f a="v">
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<t path="stx.math.geom.Point2d"><c path="Int"/></t>
</f></toPoint>
		<toFloat public="1" get="inline" set="null" line="69" static="1"><f a="v">
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
</f></toFloat>
		<toTuple public="1" get="inline" set="null" line="76" static="1"><f a="v">
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
	<c path="stx.Tuple2">
		<c path="Int"/>
		<c path="Int"/>
	</c>
</f></toTuple>
	</class>
	<class path="stx.math.geom.Vector2dFloatExtensions" params="" file="src/main/haxe/stx/math/geom/VectorExtensions.hx" module="stx.math.geom.VectorExtensions">
		<minus public="1" get="inline" set="null" line="82" static="1"><f a="v1:v2">
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
</f></minus>
		<plus public="1" get="inline" set="null" line="89" static="1"><f a="v1:v2">
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
</f></plus>
		<times public="1" get="inline" set="null" line="96" static="1"><f a="v:factor">
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<c path="Float"/>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
</f></times>
		<dot public="1" get="inline" set="null" line="103" static="1"><f a="v1:v2">
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<c path="Float"/>
</f></dot>
		<map public="1" get="inline" set="null" line="107" static="1"><f a="v:f:g">
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
</f></map>
		<toPoint public="1" get="inline" set="null" line="114" static="1"><f a="v">
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<t path="stx.math.geom.Point2d"><c path="Float"/></t>
</f></toPoint>
		<toInt public="1" get="inline" set="null" line="121" static="1"><f a="v">
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<t path="stx.math.geom.Vector2d"><c path="Int"/></t>
</f></toInt>
		<toTuple public="1" get="inline" set="null" line="128" static="1"><f a="v">
	<t path="stx.math.geom.Vector2d"><c path="Float"/></t>
	<c path="stx.Tuple2">
		<c path="Float"/>
		<c path="Float"/>
	</c>
</f></toTuple>
	</class>
	<typedef path="stx.math.tween.Easing" params="" file="src/main/haxe/stx/math/tween/Easing.hx"><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></typedef>
	<class path="stx.math.tween.Easings" params="" file="src/main/haxe/stx/math/tween/Easing.hx" module="stx.math.tween.Easing">
		<Linear public="1" line="21" static="1"><t path="stx.math.tween.Easing"/></Linear>
		<Quadratic public="1" line="22" static="1"><t path="stx.math.tween.Easing"/></Quadratic>
		<Cubic public="1" line="23" static="1"><t path="stx.math.tween.Easing"/></Cubic>
		<Quartic public="1" line="24" static="1"><t path="stx.math.tween.Easing"/></Quartic>
		<Quintic public="1" line="25" static="1"><t path="stx.math.tween.Easing"/></Quintic>
	</class>
	<typedef path="stx.math.tween.Tweener" params="" file="src/main/haxe/stx/math/tween/Tween.hx" module="stx.math.tween.Tween"><f a="">
	<c path="Float"/>
	<d><c path="Float"/></d>
</f></typedef>
	<class path="stx.math.tween.Tween" params="" file="src/main/haxe/stx/math/tween/Tween.hx"><linear public="1" set="method" line="36" static="1"><f a="state1:state2:?def">
	<d><c path="Float"/></d>
	<d><c path="Float"/></d>
	<c path="Float"/>
	<t path="stx.math.tween.Tweener"/>
</f></linear></class>
	<class path="stx.math.tween.TweenerExtensions" params="" file="src/main/haxe/stx/math/tween/TweenExtensions.hx" module="stx.math.tween.TweenExtensions">
		<DefaultFrequency line="29" static="1"><c path="Int"/></DefaultFrequency>
		<startWith public="1" set="method" line="33" static="1">
			<f a="tweener:easing">
				<t path="stx.math.tween.Tweener"/>
				<t path="stx.math.tween.Easing"/>
				<t path="stx.math.tween.Tweener"/>
			</f>
			<haxe_doc> Starts the tween with the specified easment.
   </haxe_doc>
		</startWith>
		<endWith public="1" set="method" line="41" static="1">
			<f a="tweener:easing">
				<t path="stx.math.tween.Tweener"/>
				<t path="stx.math.tween.Easing"/>
				<t path="stx.math.tween.Tweener"/>
			</f>
			<haxe_doc> Ends the tween with the specified easment.
   </haxe_doc>
		</endWith>
		<animate public="1" set="method" line="52" static="1">
			<f a="tweener:duration:?frequency_:cb">
				<t path="stx.math.tween.Tweener"/>
				<c path="Int"/>
				<c path="Int"/>
				<f a="">
					<d><c path="Float"/></d>
					<e path="Void"/>
				</f>
				<c path="stx.Future"><c path="Int"/></c>
			</f>
			<haxe_doc>
   * Tween.linear({x: 0}, {x: 1}).animate(1000, 10, function(intermediate) {
   *   trace(intermediate.x);
   * });
   </haxe_doc>
		</animate>
	</class>
	<typedef path="stx.net.HttpHeader" params="" file="src/main/haxe/stx/net/HttpHeader.hx"><c path="stx.Tuple2">
	<c path="String"/>
	<c path="String"/>
</c></typedef>
	<typedef path="stx.net.HttpHeaders" params="" file="src/main/haxe/stx/net/HttpHeader.hx" module="stx.net.HttpHeader"><c path="stx.ds.Map">
	<c path="String"/>
	<c path="String"/>
</c></typedef>
	<class path="stx.net.HttpHeaderExtensions" params="" file="src/main/haxe/stx/net/HttpHeaderExtensions.hx">
		<HeaderPattern line="33" static="1"><c path="EReg"/></HeaderPattern>
		<HeaderLinesPattern line="34" static="1"><c path="EReg"/></HeaderLinesPattern>
		<toHttpHeader public="1" set="method" line="36" static="1"><f a="str">
	<c path="String"/>
	<e path="stx.Option"><t path="stx.net.HttpHeader"/></e>
</f></toHttpHeader>
		<toHttpHeaders public="1" set="method" line="40" static="1"><f a="str">
	<c path="String"/>
	<t path="stx.net.HttpHeaders"/>
</f></toHttpHeaders>
	</class>
	<enum path="stx.net.HttpInformational" params="" file="src/main/haxe/stx/net/HttpResponseCode.hx" module="stx.net.HttpResponseCode">
		<SwitchingProtocols/>
		<Processing/>
		<Continue/>
	</enum>
	<enum path="stx.net.HttpSuccess" params="" file="src/main/haxe/stx/net/HttpResponseCode.hx" module="stx.net.HttpResponseCode">
		<ResetContent/>
		<PartialContent/>
		<OK/>
		<Non/>
		<NoContent/>
		<Multi/>
		<Created/>
		<Accepted/>
	</enum>
	<enum path="stx.net.HttpRedirection" params="" file="src/main/haxe/stx/net/HttpResponseCode.hx" module="stx.net.HttpResponseCode">
		<UseProxy/>
		<TemporaryRedirect/>
		<SeeOther/>
		<NotModified/>
		<MultipleChoices/>
		<MovedPermanently/>
		<Found/>
	</enum>
	<enum path="stx.net.HttpClientError" params="" file="src/main/haxe/stx/net/HttpResponseCode.hx" module="stx.net.HttpResponseCode">
		<UpgradeRequired/>
		<UnsupportedMediaType/>
		<UnprocessableEntity/>
		<UnorderedCollection/>
		<Unauthorized/>
		<TooManyConnections/>
		<RetryWith/>
		<RequestedRangeNotSatisfiable/>
		<RequestTimeout/>
		<RequestEntityTooLarge/>
		<Request/>
		<ProxyAuthenticationRequired/>
		<PreconditionFailed/>
		<PaymentRequired/>
		<NotFound/>
		<NotAcceptable/>
		<MethodNotAllowed/>
		<Locked/>
		<LengthRequired/>
		<Gone/>
		<Forbidden/>
		<FailedDependency/>
		<ExpectationFailed/>
		<Conflict/>
		<BadRequest/>
	</enum>
	<enum path="stx.net.HttpServerError" params="" file="src/main/haxe/stx/net/HttpResponseCode.hx" module="stx.net.HttpResponseCode">
		<VariantAlsoNegotiates/>
		<UserAccessDenied/>
		<ServiceUnavailable/>
		<NotImplemented/>
		<NotExtended/>
		<InternalServerError/>
		<InsufficientStorage/>
		<HTTPVersionNotSupported/>
		<GatewayTimeout/>
		<BandwidthLimitExceeded/>
		<BadGateway/>
	</enum>
	<enum path="stx.net.HttpNormal" params="" file="src/main/haxe/stx/net/HttpResponseCode.hx" module="stx.net.HttpResponseCode">
		<Success a="v"><e path="stx.net.HttpSuccess"/></Success>
		<Redirection a="v"><e path="stx.net.HttpRedirection"/></Redirection>
		<Informational a="v"><e path="stx.net.HttpInformational"/></Informational>
	</enum>
	<enum path="stx.net.HttpError" params="" file="src/main/haxe/stx/net/HttpResponseCode.hx" module="stx.net.HttpResponseCode">
		<Server a="v"><e path="stx.net.HttpServerError"/></Server>
		<Client a="v"><e path="stx.net.HttpClientError"/></Client>
	</enum>
	<enum path="stx.net.HttpResponseCode" params="" file="src/main/haxe/stx/net/HttpResponseCode.hx">
		<Normal a="v"><e path="stx.net.HttpNormal"/></Normal>
		<Error a="v"><e path="stx.net.HttpError"/></Error>
	</enum>
	<class path="stx.net.HttpResponseCodeExtensions" params="" file="src/main/haxe/stx/net/HttpResponseCodeExtensions.hx">
		<toHttpResponseCode public="1" set="method" line="23" static="1"><f a="code">
	<c path="Int"/>
	<e path="stx.net.HttpResponseCode"/>
</f></toHttpResponseCode>
		<isNormal public="1" set="method" line="88" static="1"><f a="response">
	<e path="stx.net.HttpResponseCode"/>
	<e path="Bool"/>
</f></isNormal>
		<isInformational public="1" set="method" line="96" static="1"><f a="response">
	<e path="stx.net.HttpResponseCode"/>
	<e path="Bool"/>
</f></isInformational>
		<isSuccess public="1" set="method" line="108" static="1"><f a="response">
	<e path="stx.net.HttpResponseCode"/>
	<e path="Bool"/>
</f></isSuccess>
		<isRedirection public="1" set="method" line="120" static="1"><f a="response">
	<e path="stx.net.HttpResponseCode"/>
	<e path="Bool"/>
</f></isRedirection>
		<isError public="1" set="method" line="132" static="1"><f a="response">
	<e path="stx.net.HttpResponseCode"/>
	<e path="Bool"/>
</f></isError>
		<isClientError public="1" set="method" line="140" static="1"><f a="response">
	<e path="stx.net.HttpResponseCode"/>
	<e path="Bool"/>
</f></isClientError>
		<isServerError public="1" set="method" line="152" static="1"><f a="response">
	<e path="stx.net.HttpResponseCode"/>
	<e path="Bool"/>
</f></isServerError>
		<toStatusCode public="1" set="method" line="164" static="1"><f a="response">
	<e path="stx.net.HttpResponseCode"/>
	<c path="Int"/>
</f></toStatusCode>
	</class>
	<typedef path="stx.net.Url" params="" file="src/main/haxe/stx/net/Url.hx"><c path="String"/></typedef>
	<typedef path="stx.net.ParsedUrl" params="" file="src/main/haxe/stx/net/Url.hx" module="stx.net.Url">
		<a>
			<search><c path="String"/></search>
			<protocol><c path="String"/></protocol>
			<port><c path="String"/></port>
			<pathname><c path="String"/></pathname>
			<href><c path="String"/></href>
			<hostname><c path="String"/></hostname>
			<host><c path="String"/></host>
			<hash><c path="String"/></hash>
		</a>
		<haxe_doc> A parsed representation of a url chosen to match the DOM's Location 
 * object. The meaning of the fields are the same as those of Location.
 </haxe_doc>
	</typedef>
	<typedef path="stx.net.QueryParameters" params="" file="src/main/haxe/stx/net/Url.hx" module="stx.net.Url"><c path="stx.ds.Map">
	<c path="String"/>
	<c path="String"/>
</c></typedef>
	<class path="stx.net.UrlExtensions" params="" file="src/main/haxe/stx/net/UrlExtensions.hx">
		<UrlPattern line="39" static="1"><c path="EReg"/></UrlPattern>
		<Protocol line="41" static="1"><c path="Int"/></Protocol>
		<Hostname line="42" static="1"><c path="Int"/></Hostname>
		<Port line="43" static="1"><c path="Int"/></Port>
		<Pathname line="44" static="1"><c path="Int"/></Pathname>
		<Search line="45" static="1"><c path="Int"/></Search>
		<Hash line="46" static="1"><c path="Int"/></Hash>
		<toParsedUrl public="1" set="method" line="50" static="1">
			<f a="s">
				<c path="String"/>
				<e path="stx.Option"><t path="stx.net.ParsedUrl"/></e>
			</f>
			<haxe_doc> Tries to parse the url, returning None if unsuccessful.
   </haxe_doc>
		</toParsedUrl>
		<toUrl public="1" set="method" line="68" static="1">
			<f a="parsed">
				<t path="stx.net.ParsedUrl"/>
				<t path="stx.net.Url"/>
			</f>
			<haxe_doc> Converts a parsed url into a Url in standard string form.
   </haxe_doc>
		</toUrl>
		<withProtocol public="1" set="method" line="72" static="1"><f a="parsed:protocol">
	<t path="stx.net.ParsedUrl"/>
	<c path="String"/>
	<t path="stx.net.ParsedUrl"/>
</f></withProtocol>
		<withHostname public="1" set="method" line="76" static="1"><f a="parsed:hostname">
	<t path="stx.net.ParsedUrl"/>
	<c path="String"/>
	<t path="stx.net.ParsedUrl"/>
</f></withHostname>
		<withPort public="1" set="method" line="80" static="1"><f a="parsed:port">
	<t path="stx.net.ParsedUrl"/>
	<c path="String"/>
	<t path="stx.net.ParsedUrl"/>
</f></withPort>
		<withPathname public="1" set="method" line="84" static="1"><f a="parsed:pathname">
	<t path="stx.net.ParsedUrl"/>
	<c path="String"/>
	<t path="stx.net.ParsedUrl"/>
</f></withPathname>
		<withSearch public="1" set="method" line="88" static="1"><f a="parsed:search">
	<t path="stx.net.ParsedUrl"/>
	<c path="String"/>
	<t path="stx.net.ParsedUrl"/>
</f></withSearch>
		<withSubdomains public="1" set="method" line="92" static="1"><f a="parsed:subdomains">
	<t path="stx.net.ParsedUrl"/>
	<c path="String"/>
	<t path="stx.net.ParsedUrl"/>
</f></withSubdomains>
		<withHash public="1" set="method" line="107" static="1"><f a="parsed:hash">
	<t path="stx.net.ParsedUrl"/>
	<c path="String"/>
	<t path="stx.net.ParsedUrl"/>
</f></withHash>
		<withFile public="1" set="method" line="111" static="1"><f a="parsed:file">
	<t path="stx.net.ParsedUrl"/>
	<c path="String"/>
	<t path="stx.net.ParsedUrl"/>
</f></withFile>
		<withoutProtocol public="1" set="method" line="119" static="1"><f a="parsed">
	<t path="stx.net.ParsedUrl"/>
	<t path="stx.net.ParsedUrl"/>
</f></withoutProtocol>
		<withoutHostname public="1" set="method" line="123" static="1"><f a="parsed">
	<t path="stx.net.ParsedUrl"/>
	<t path="stx.net.ParsedUrl"/>
</f></withoutHostname>
		<withoutPort public="1" set="method" line="127" static="1"><f a="parsed">
	<t path="stx.net.ParsedUrl"/>
	<t path="stx.net.ParsedUrl"/>
</f></withoutPort>
		<withoutPathname public="1" set="method" line="131" static="1"><f a="parsed">
	<t path="stx.net.ParsedUrl"/>
	<t path="stx.net.ParsedUrl"/>
</f></withoutPathname>
		<withoutSearch public="1" set="method" line="135" static="1"><f a="parsed">
	<t path="stx.net.ParsedUrl"/>
	<t path="stx.net.ParsedUrl"/>
</f></withoutSearch>
		<withoutSubdomains public="1" set="method" line="139" static="1"><f a="parsed">
	<t path="stx.net.ParsedUrl"/>
	<t path="stx.net.ParsedUrl"/>
</f></withoutSubdomains>
		<withoutHash public="1" set="method" line="143" static="1"><f a="parsed">
	<t path="stx.net.ParsedUrl"/>
	<t path="stx.net.ParsedUrl"/>
</f></withoutHash>
		<withoutFile public="1" set="method" line="147" static="1"><f a="parsed">
	<t path="stx.net.ParsedUrl"/>
	<t path="stx.net.ParsedUrl"/>
</f></withoutFile>
		<addQueryParameters public="1" set="method" line="153" static="1">
			<f a="url:params">
				<t path="stx.net.Url"/>
				<t path="stx.net.QueryParameters"/>
				<t path="stx.net.Url"/>
			</f>
			<haxe_doc> Adds query parameters to an existing URL.
   </haxe_doc>
		</addQueryParameters>
		<extractQueryParameters public="1" set="method" line="166" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<t path="stx.net.QueryParameters"/>
</f></extractQueryParameters>
		<extractSearch public="1" set="method" line="170" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<c path="String"/>
</f></extractSearch>
		<extractProtocol public="1" set="method" line="174" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<c path="String"/>
</f></extractProtocol>
		<extractHash public="1" set="method" line="178" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<c path="String"/>
</f></extractHash>
		<extractPathname public="1" set="method" line="182" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<c path="String"/>
</f></extractPathname>
		<extractHostname public="1" set="method" line="186" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<c path="String"/>
</f></extractHostname>
		<extractHost public="1" set="method" line="190" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<c path="String"/>
</f></extractHost>
		<extractPort public="1" set="method" line="194" static="1"><f a="url">
	<t path="stx.net.Url"/>
	<c path="Int"/>
</f></extractPort>
		<toQueryParameters public="1" set="method" line="201" static="1">
			<f a="query">
				<c path="String"/>
				<t path="stx.net.QueryParameters"/>
			</f>
			<haxe_doc> Converts a query string, which must begin with '?', into an anonymous 
   * object, whose fields all have string values.
   </haxe_doc>
		</toQueryParameters>
		<toQueryString public="1" set="method" line="217" static="1">
			<f a="query">
				<t path="stx.net.QueryParameters"/>
				<c path="String"/>
			</f>
			<haxe_doc> Converts an anonymous object, whose fields all have string values, into a
   * query string, beginning with the character '?'.
   </haxe_doc>
		</toQueryString>
		<formUrl set="method" line="228" static="1"><f a="protocol:hostname:port:pathname:search:hash">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<t path="stx.net.ParsedUrl"/>
</f></formUrl>
		<extractField set="method" line="244" static="1"><f a="url:field">
	<t path="stx.net.Url"/>
	<c path="String"/>
	<c path="String"/>
</f></extractField>
	</class>
	<typedef path="stx.reactive.DynArrow" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<c path="stx.reactive.Arrow">
			<d/>
			<d/>
		</c>
		<haxe_doc>
 * Used with permission of Sledorze.
 </haxe_doc>
	</typedef>
	<class path="stx.reactive.Arrow" params="I:O" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows" interface="1"><withInput public="1" set="method"><f a="?i:cont">
	<c path="stx.reactive.Arrow.I"/>
	<c path="stx.Method">
		<c path="stx.reactive.Arrow.O"/>
		<e path="Void"/>
		<f a="">
			<c path="stx.reactive.Arrow.O"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput></class>
	<class path="stx.reactive.Viaz" params="I:O" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<implements path="stx.reactive.Arrow">
			<c path="stx.reactive.Viaz.I"/>
			<c path="stx.reactive.Viaz.O"/>
		</implements>
		<constant public="1" params="I:O" set="method" line="30" static="1"><f a="v">
	<c path="constant.O"/>
	<c path="stx.reactive.Arrow">
		<c path="constant.I"/>
		<c path="constant.O"/>
	</c>
</f></constant>
		<identity public="1" params="I" set="method" line="33" static="1"><f a=""><c path="stx.reactive.Arrow">
	<c path="identity.I"/>
	<c path="identity.I"/>
</c></f></identity>
		<first public="1" params="I:O" set="method" line="38" static="1"><f a="first">
	<c path="stx.reactive.Arrow">
		<c path="first.I"/>
		<c path="first.O"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="stx.Tuple2">
			<c path="first.I"/>
			<c path="first.I"/>
		</c>
		<c path="stx.Tuple2">
			<c path="first.O"/>
			<c path="first.I"/>
		</c>
	</c>
</f></first>
		<second public="1" params="I:O" set="method" line="41" static="1"><f a="second">
	<c path="stx.reactive.Arrow">
		<c path="second.I"/>
		<c path="second.O"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="stx.Tuple2">
			<c path="second.I"/>
			<c path="second.I"/>
		</c>
		<c path="stx.Tuple2">
			<c path="second.I"/>
			<c path="second.O"/>
		</c>
	</c>
</f></second>
		<bind public="1" params="A:B:C" set="method" line="45" static="1"><f a="bindl:bindr">
	<c path="stx.reactive.Arrow">
		<c path="bind.A"/>
		<c path="bind.C"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="stx.Tuple2">
			<c path="bind.A"/>
			<c path="bind.C"/>
		</c>
		<c path="bind.B"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="bind.A"/>
		<c path="bind.B"/>
	</c>
</f></bind>
		<as public="1" params="I:O:NO" set="method" line="53" static="1"><f a="a:type">
	<c path="stx.reactive.Arrow">
		<c path="as.I"/>
		<c path="as.O"/>
	</c>
	<c path="Class"><c path="as.NO"/></c>
	<c path="stx.reactive.Arrow">
		<c path="as.I"/>
		<c path="as.NO"/>
	</c>
</f></as>
		<then public="1" params="I:O:NO" set="method" line="56" static="1"><f a="before:after">
	<c path="stx.reactive.Arrow">
		<c path="then.I"/>
		<c path="then.O"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="then.O"/>
		<c path="then.NO"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="then.I"/>
		<c path="then.NO"/>
	</c>
</f></then>
		<lift public="1" params="I:O" set="method" line="57" static="1"><f a="lift">
	<c path="stx.Method">
		<c path="lift.I"/>
		<c path="lift.O"/>
		<f a="">
			<c path="lift.I"/>
			<c path="lift.O"/>
		</f>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="lift.I"/>
		<c path="lift.O"/>
	</c>
</f></lift>
		<pair public="1" params="A:B:C:D" set="method" line="58" static="1"><f a="pair_:_pair">
	<c path="stx.reactive.Arrow">
		<c path="pair.A"/>
		<c path="pair.B"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="pair.C"/>
		<c path="pair.D"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="stx.Tuple2">
			<c path="pair.A"/>
			<c path="pair.C"/>
		</c>
		<c path="stx.Tuple2">
			<c path="pair.B"/>
			<c path="pair.D"/>
		</c>
	</c>
</f></pair>
		<repeat public="1" params="I:O" set="method" line="59" static="1"><f a="a">
	<c path="stx.reactive.Arrow">
		<c path="repeat.I"/>
		<e path="stx.reactive.RepeatV">
			<c path="repeat.I"/>
			<c path="repeat.O"/>
		</e>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="repeat.I"/>
		<c path="repeat.O"/>
	</c>
</f></repeat>
		<delay public="1" params="I:O" set="method" line="61" static="1"><f a="a:delay">
	<c path="stx.reactive.Arrow">
		<c path="delay.I"/>
		<c path="delay.O"/>
	</c>
	<c path="Int"/>
	<c path="stx.reactive.Arrow">
		<c path="delay.I"/>
		<c path="delay.O"/>
	</c>
</f></delay>
		<split public="1" params="A:B:C" set="method" line="63" static="1"><f a="split_:_split">
	<c path="stx.reactive.Arrow">
		<c path="split.A"/>
		<c path="split.B"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="split.A"/>
		<c path="split.C"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="split.A"/>
		<c path="stx.Tuple2">
			<c path="split.B"/>
			<c path="split.C"/>
		</c>
	</c>
</f></split>
		<or public="1" params="P1:P2:R0" set="method" line="68" static="1"><f a="or_:_or">
	<c path="stx.reactive.Arrow">
		<c path="or.P1"/>
		<c path="or.R0"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="or.P2"/>
		<c path="or.R0"/>
	</c>
	<c path="stx.reactive.Arrow">
		<e path="stx.Either">
			<c path="or.P1"/>
			<c path="or.P2"/>
		</e>
		<c path="or.R0"/>
	</c>
</f></or>
		<future public="1" params="I" set="method" line="72" static="1"><f a="future">
	<c path="stx.Future"><c path="future.I"/></c>
	<c path="stx.reactive.Arrow">
		<c path="stx.Future"><c path="future.I"/></c>
		<c path="future.I"/>
	</c>
</f></future>
		<runCPS public="1" params="I:O" set="method" line="73" static="1"><f a="a:i:cont">
	<c path="stx.reactive.Arrow">
		<c path="runCPS.I"/>
		<c path="runCPS.O"/>
	</c>
	<c path="runCPS.I"/>
	<c path="stx.Method">
		<c path="runCPS.O"/>
		<e path="Void"/>
		<f a="">
			<c path="runCPS.O"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></runCPS>
		<runCont public="1" params="I:O" set="method" line="75" static="1"><f a="a:i:cont">
	<c path="stx.reactive.Arrow">
		<c path="runCont.I"/>
		<c path="runCont.O"/>
	</c>
	<c path="runCont.I"/>
	<c path="stx.Method">
		<c path="runCont.O"/>
		<e path="Void"/>
		<f a="">
			<c path="runCont.O"/>
			<e path="Void"/>
		</f>
	</c>
	<f a="">
		<c path="stx.Method">
			<c path="runCont.O"/>
			<e path="Void"/>
			<f a="">
				<c path="runCont.O"/>
				<e path="Void"/>
			</f>
		</c>
		<e path="Void"/>
	</f>
</f></runCont>
		<trace public="1" params="A:B" set="method" line="78" static="1"><f a="a">
	<c path="stx.reactive.Arrow">
		<c path="trace.A"/>
		<c path="trace.B"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="trace.A"/>
		<c path="trace.B"/>
	</c>
</f></trace>
		<run public="1" params="I:O" set="method" line="82" static="1"><f a="a:?i:?cont">
	<c path="stx.reactive.Arrow">
		<c path="run.I"/>
		<c path="run.O"/>
	</c>
	<c path="run.I"/>
	<c path="stx.Method">
		<c path="run.O"/>
		<e path="Void"/>
		<f a="">
			<c path="run.O"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></run>
		<promise public="1" set="method" line="86" static="1"><f a=""><c path="stx.reactive.PromiseArrow">
	<unknown/>
	<unknown/>
</c></f></promise>
		<withInput public="1" set="method" line="28"><f a="?i:cont">
	<c path="stx.reactive.Viaz.I"/>
	<c path="stx.Method">
		<c path="stx.reactive.Viaz.O"/>
		<e path="Void"/>
		<f a="">
			<c path="stx.reactive.Viaz.O"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput>
		<new public="1" set="method" line="27"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.Stack" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<data><c path="Array"><c path="stx.reactive.Arrow">
	<d/>
	<d/>
</c></c></data>
		<next public="1" params="A:B:C:D:E" set="method" line="96"><f a="x:f:g">
	<c path="next.A"/>
	<c path="stx.reactive.Arrow">
		<c path="next.B"/>
		<c path="next.C"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="next.D"/>
		<c path="next.E"/>
	</c>
	<e path="Void"/>
</f></next>
		<new public="1" set="method" line="93"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.Arrows" params="" file="src/main/haxe/stx/reactive/Arrows.hx"><trampoline public="1" params="I" set="method" line="102" static="1"><f a="f">
	<f a="">
		<c path="trampoline.I"/>
		<e path="Void"/>
	</f>
	<c path="stx.Method1">
		<c path="trampoline.I"/>
		<e path="Void"/>
	</c>
</f></trampoline></class>
	<class path="stx.reactive.ThenArrow" params="I:O:NO" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<implements path="stx.reactive.Arrow">
			<c path="stx.reactive.ThenArrow.I"/>
			<c path="stx.reactive.ThenArrow.NO"/>
		</implements>
		<a><c path="stx.reactive.Arrow">
	<c path="stx.reactive.ThenArrow.I"/>
	<c path="stx.reactive.ThenArrow.O"/>
</c></a>
		<b><c path="stx.reactive.Arrow">
	<c path="stx.reactive.ThenArrow.O"/>
	<c path="stx.reactive.ThenArrow.NO"/>
</c></b>
		<withInput public="1" get="inline" set="null" line="122"><f a="?i:cont">
	<c path="stx.reactive.ThenArrow.I"/>
	<c path="stx.Method">
		<c path="stx.reactive.ThenArrow.NO"/>
		<e path="Void"/>
		<f a="">
			<c path="stx.reactive.ThenArrow.NO"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput>
		<new public="1" set="method" line="117"><f a="a:b">
	<c path="stx.reactive.Arrow">
		<c path="stx.reactive.ThenArrow.I"/>
		<c path="stx.reactive.ThenArrow.O"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="stx.reactive.ThenArrow.O"/>
		<c path="stx.reactive.ThenArrow.NO"/>
	</c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.reactive.FunctionArrow" params="I:O" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<implements path="stx.reactive.Arrow">
			<c path="stx.reactive.FunctionArrow.I"/>
			<c path="stx.reactive.FunctionArrow.O"/>
		</implements>
		<m><c path="stx.Method">
	<c path="stx.reactive.FunctionArrow.I"/>
	<c path="stx.reactive.FunctionArrow.O"/>
	<f a="">
		<c path="stx.reactive.FunctionArrow.I"/>
		<c path="stx.reactive.FunctionArrow.O"/>
	</f>
</c></m>
		<withInput public="1" get="inline" set="null" line="133"><f a="?i:cont">
	<c path="stx.reactive.FunctionArrow.I"/>
	<c path="stx.Method">
		<c path="stx.reactive.FunctionArrow.O"/>
		<e path="Void"/>
		<f a="">
			<c path="stx.reactive.FunctionArrow.O"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput>
		<new public="1" set="method" line="131"><f a="m">
	<c path="stx.Method">
		<c path="stx.reactive.FunctionArrow.I"/>
		<c path="stx.reactive.FunctionArrow.O"/>
		<f a="">
			<c path="stx.reactive.FunctionArrow.I"/>
			<c path="stx.reactive.FunctionArrow.O"/>
		</f>
	</c>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="stx.reactive.RepeatV" params="RV:DV" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<Repeat a="x"><c path="stx.reactive.RepeatV.RV"/></Repeat>
		<Done a="x"><c path="stx.reactive.RepeatV.DV"/></Done>
	</enum>
	<class path="stx.reactive.RepeatArrow" params="I:O" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<implements path="stx.reactive.Arrow">
			<c path="stx.reactive.RepeatArrow.I"/>
			<c path="stx.reactive.RepeatArrow.O"/>
		</implements>
		<a><c path="stx.reactive.Arrow">
	<c path="stx.reactive.RepeatArrow.I"/>
	<e path="stx.reactive.RepeatV">
		<c path="stx.reactive.RepeatArrow.I"/>
		<c path="stx.reactive.RepeatArrow.O"/>
	</e>
</c></a>
		<withInput public="1" get="inline" set="null" line="145"><f a="?i:cont">
	<c path="stx.reactive.RepeatArrow.I"/>
	<c path="stx.Method">
		<c path="stx.reactive.RepeatArrow.O"/>
		<e path="Void"/>
		<f a="">
			<c path="stx.reactive.RepeatArrow.O"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput>
		<new public="1" params="A" set="method" line="142"><f a="a">
	<c path="stx.reactive.Arrow">
		<c path="stx.reactive.RepeatArrow.I"/>
		<e path="stx.reactive.RepeatV">
			<c path="stx.reactive.RepeatArrow.I"/>
			<c path="stx.reactive.RepeatArrow.O"/>
		</e>
	</c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.reactive.DelayArrow" params="I:O" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<implements path="stx.reactive.Arrow">
			<c path="stx.reactive.DelayArrow.I"/>
			<c path="stx.reactive.DelayArrow.O"/>
		</implements>
		<a><c path="stx.reactive.Arrow">
	<c path="stx.reactive.DelayArrow.I"/>
	<c path="stx.reactive.DelayArrow.O"/>
</c></a>
		<delay><c path="Int"/></delay>
		<withInput public="1" set="method" line="175"><f a="?i:cont">
	<c path="stx.reactive.DelayArrow.I"/>
	<c path="stx.Method">
		<c path="stx.reactive.DelayArrow.O"/>
		<e path="Void"/>
		<f a="">
			<c path="stx.reactive.DelayArrow.O"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput>
		<new public="1" set="method" line="170"><f a="a:delay">
	<c path="stx.reactive.Arrow">
		<c path="stx.reactive.DelayArrow.I"/>
		<c path="stx.reactive.DelayArrow.O"/>
	</c>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.reactive.Pair" params="A:B:C:D" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<implements path="stx.reactive.Arrow">
			<c path="stx.Tuple2">
				<c path="stx.reactive.Pair.A"/>
				<c path="stx.reactive.Pair.C"/>
			</c>
			<c path="stx.Tuple2">
				<c path="stx.reactive.Pair.B"/>
				<c path="stx.reactive.Pair.D"/>
			</c>
		</implements>
		<l public="1"><c path="stx.reactive.Arrow">
	<c path="stx.reactive.Pair.A"/>
	<c path="stx.reactive.Pair.B"/>
</c></l>
		<r public="1"><c path="stx.reactive.Arrow">
	<c path="stx.reactive.Pair.C"/>
	<c path="stx.reactive.Pair.D"/>
</c></r>
		<withInput public="1" set="method" line="209"><f a="?i:cont">
	<c path="stx.Tuple2">
		<c path="stx.reactive.Pair.A"/>
		<c path="stx.reactive.Pair.C"/>
	</c>
	<c path="stx.Method">
		<c path="stx.Tuple2">
			<c path="stx.reactive.Pair.B"/>
			<c path="stx.reactive.Pair.D"/>
		</c>
		<e path="Void"/>
		<f a="">
			<c path="stx.Tuple2">
				<c path="stx.reactive.Pair.B"/>
				<c path="stx.reactive.Pair.D"/>
			</c>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput>
		<new public="1" set="method" line="205"><f a="l:r">
	<c path="stx.reactive.Arrow">
		<c path="stx.reactive.Pair.A"/>
		<c path="stx.reactive.Pair.B"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="stx.reactive.Pair.C"/>
		<c path="stx.reactive.Pair.D"/>
	</c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.reactive.Split" params="A:B:C" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<implements path="stx.reactive.Arrow">
			<c path="stx.reactive.Split.A"/>
			<c path="stx.Tuple2">
				<c path="stx.reactive.Split.B"/>
				<c path="stx.reactive.Split.C"/>
			</c>
		</implements>
		<a><c path="stx.reactive.Pair">
	<c path="stx.reactive.Split.A"/>
	<c path="stx.reactive.Split.B"/>
	<c path="stx.reactive.Split.A"/>
	<c path="stx.reactive.Split.C"/>
</c></a>
		<withInput public="1" set="method" line="245"><f a="?i:cont">
	<c path="stx.reactive.Split.A"/>
	<c path="stx.Method">
		<c path="stx.Tuple2">
			<c path="stx.reactive.Split.B"/>
			<c path="stx.reactive.Split.C"/>
		</c>
		<e path="Void"/>
		<f a="">
			<c path="stx.Tuple2">
				<c path="stx.reactive.Split.B"/>
				<c path="stx.reactive.Split.C"/>
			</c>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput>
		<new public="1" set="method" line="241"><f a="l:r">
	<c path="stx.reactive.Arrow">
		<c path="stx.reactive.Split.A"/>
		<c path="stx.reactive.Split.B"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="stx.reactive.Split.A"/>
		<c path="stx.reactive.Split.C"/>
	</c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.reactive.Or" params="L:R:R0" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<implements path="stx.reactive.Arrow">
			<e path="stx.Either">
				<c path="stx.reactive.Or.L"/>
				<c path="stx.reactive.Or.R"/>
			</e>
			<c path="stx.reactive.Or.R0"/>
		</implements>
		<a><c path="stx.reactive.Arrow">
	<c path="stx.reactive.Or.L"/>
	<c path="stx.reactive.Or.R0"/>
</c></a>
		<b><c path="stx.reactive.Arrow">
	<c path="stx.reactive.Or.R"/>
	<c path="stx.reactive.Or.R0"/>
</c></b>
		<withInput public="1" set="method" line="258"><f a="?i:cont">
	<e path="stx.Either">
		<c path="stx.reactive.Or.L"/>
		<c path="stx.reactive.Or.R"/>
	</e>
	<c path="stx.Method">
		<c path="stx.reactive.Or.R0"/>
		<e path="Void"/>
		<f a="">
			<c path="stx.reactive.Or.R0"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput>
		<new public="1" set="method" line="254"><f a="l:r">
	<c path="stx.reactive.Arrow">
		<c path="stx.reactive.Or.L"/>
		<c path="stx.reactive.Or.R0"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="stx.reactive.Or.R"/>
		<c path="stx.reactive.Or.R0"/>
	</c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.reactive.FutureArrow" params="I" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<implements path="stx.reactive.Arrow">
			<c path="stx.Future"><c path="stx.reactive.FutureArrow.I"/></c>
			<c path="stx.reactive.FutureArrow.I"/>
		</implements>
		<withInput public="1" set="method" line="269"><f a="?i:cont">
	<c path="stx.Future"><c path="stx.reactive.FutureArrow.I"/></c>
	<c path="stx.Method">
		<c path="stx.reactive.FutureArrow.I"/>
		<e path="Void"/>
		<f a="">
			<c path="stx.reactive.FutureArrow.I"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput>
		<new public="1" set="method" line="266"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.PromiseArrow" params="I:E" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<implements path="stx.reactive.Arrow">
			<c path="stx.Promise">
				<d/>
				<c path="stx.reactive.PromiseArrow.I"/>
			</c>
			<c path="stx.reactive.PromiseArrow.I"/>
		</implements>
		<withInput public="1" set="method" line="281"><f a="?i:cont">
	<c path="stx.Promise">
		<d/>
		<c path="stx.reactive.PromiseArrow.I"/>
	</c>
	<c path="stx.Method">
		<c path="stx.reactive.PromiseArrow.I"/>
		<e path="Void"/>
		<f a="">
			<c path="stx.reactive.PromiseArrow.I"/>
			<e path="Void"/>
		</f>
	</c>
	<e path="Void"/>
</f></withInput>
		<new public="1" set="method" line="278"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.ArrowApply" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"/>
	<class path="stx.reactive.M0A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="R" set="method" line="346" static="1"><f a="m">
	<c path="stx.Method0"><c path="lift.R"/></c>
	<c path="stx.reactive.Arrow">
		<e path="Void"/>
		<c path="lift.R"/>
	</c>
</f></lift></class>
	<class path="stx.reactive.M0F" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="R" set="method" line="352" static="1"><f a="f">
	<f a=""><c path="lift.R"/></f>
	<c path="stx.reactive.Arrow">
		<e path="Void"/>
		<c path="lift.R"/>
	</c>
</f></lift></class>
	<class path="stx.reactive.M1A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="P:R" set="method" line="357" static="1"><f a="m">
	<c path="stx.Method1">
		<c path="lift.P"/>
		<c path="lift.R"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="lift.P"/>
		<c path="lift.R"/>
	</c>
</f></lift></class>
	<class path="stx.reactive.F1A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows">
		<lift public="1" params="P:R" set="method" line="362" static="1"><f a="f">
	<f a="">
		<c path="lift.P"/>
		<c path="lift.R"/>
	</f>
	<c path="stx.reactive.Arrow">
		<c path="lift.P"/>
		<c path="lift.R"/>
	</c>
</f></lift>
		<thenA public="1" params="P1:P2:R" set="method" line="365" static="1"><f a="f:a">
	<f a="">
		<c path="thenA.P1"/>
		<c path="thenA.P2"/>
	</f>
	<c path="stx.reactive.Arrow">
		<c path="thenA.P2"/>
		<c path="thenA.R"/>
	</c>
	<c path="stx.reactive.Arrow">
		<c path="thenA.P1"/>
		<c path="thenA.R"/>
	</c>
</f></thenA>
	</class>
	<class path="stx.reactive.F1F" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><thenF public="1" params="P1:P2:R" set="method" line="370" static="1"><f a="f1:f2">
	<f a="">
		<c path="thenF.P1"/>
		<c path="thenF.P2"/>
	</f>
	<f a="">
		<c path="thenF.P2"/>
		<c path="thenF.R"/>
	</f>
	<c path="stx.reactive.Arrow">
		<c path="thenF.P1"/>
		<c path="thenF.R"/>
	</c>
</f></thenF></class>
	<class path="stx.reactive.A1F" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><thenF public="1" params="P1:P2:R" set="method" line="377" static="1"><f a="a:f">
	<c path="stx.reactive.Arrow">
		<c path="thenF.P1"/>
		<c path="thenF.P2"/>
	</c>
	<f a="">
		<c path="thenF.P2"/>
		<c path="thenF.R"/>
	</f>
	<c path="stx.reactive.Arrow">
		<c path="thenF.P1"/>
		<c path="thenF.R"/>
	</c>
</f></thenF></class>
	<class path="stx.reactive.M2A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="P1:P2:R" set="method" line="383" static="1"><f a="m">
	<c path="stx.Method2">
		<c path="lift.P1"/>
		<c path="lift.P2"/>
		<c path="lift.R"/>
	</c>
	<c path="stx.reactive.FunctionArrow">
		<unknown/>
		<unknown/>
	</c>
</f></lift></class>
	<class path="stx.reactive.F2A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="P1:P2:R" set="method" line="388" static="1"><f a="f">
	<f a=":">
		<c path="lift.P1"/>
		<c path="lift.P2"/>
		<c path="lift.R"/>
	</f>
	<c path="stx.reactive.FunctionArrow">
		<unknown/>
		<unknown/>
	</c>
</f></lift></class>
	<class path="stx.reactive.M3A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="P1:P2:P3:R" set="method" line="393" static="1"><f a="m">
	<c path="stx.Method3">
		<c path="lift.P1"/>
		<c path="lift.P2"/>
		<c path="lift.P3"/>
		<c path="lift.R"/>
	</c>
	<c path="stx.reactive.Arrow">
		<unknown/>
		<unknown/>
	</c>
</f></lift></class>
	<class path="stx.reactive.F3A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="P1:P2:P3:R" set="method" line="398" static="1"><f a="f">
	<f a="::">
		<c path="lift.P1"/>
		<c path="lift.P2"/>
		<c path="lift.P3"/>
		<c path="lift.R"/>
	</f>
	<c path="stx.reactive.Arrow">
		<unknown/>
		<unknown/>
	</c>
</f></lift></class>
	<class path="stx.reactive.M4A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="P1:P2:P3:P4:R" set="method" line="403" static="1"><f a="m">
	<c path="stx.Method4">
		<c path="lift.P1"/>
		<c path="lift.P2"/>
		<c path="lift.P3"/>
		<c path="lift.P4"/>
		<c path="lift.R"/>
	</c>
	<c path="stx.reactive.Arrow">
		<unknown/>
		<unknown/>
	</c>
</f></lift></class>
	<class path="stx.reactive.F4A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="P1:P2:P3:P4:R" set="method" line="408" static="1"><f a="f">
	<f a=":::">
		<c path="lift.P1"/>
		<c path="lift.P2"/>
		<c path="lift.P3"/>
		<c path="lift.P4"/>
		<c path="lift.R"/>
	</f>
	<c path="stx.reactive.Arrow">
		<unknown/>
		<unknown/>
	</c>
</f></lift></class>
	<class path="stx.reactive.M5A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="P1:P2:P3:P4:P5:R" set="method" line="413" static="1"><f a="m">
	<c path="stx.Method5">
		<c path="lift.P1"/>
		<c path="lift.P2"/>
		<c path="lift.P3"/>
		<c path="lift.P4"/>
		<c path="lift.P5"/>
		<c path="lift.R"/>
	</c>
	<c path="stx.reactive.Arrow">
		<unknown/>
		<unknown/>
	</c>
</f></lift></class>
	<class path="stx.reactive.F5A" params="" file="src/main/haxe/stx/reactive/Arrows.hx" module="stx.reactive.Arrows"><lift public="1" params="P1:P2:P3:P4:P5:R" set="method" line="418" static="1"><f a="f">
	<f a="::::">
		<c path="lift.P1"/>
		<c path="lift.P2"/>
		<c path="lift.P3"/>
		<c path="lift.P4"/>
		<c path="lift.P5"/>
		<c path="lift.R"/>
	</f>
	<c path="stx.reactive.Arrow">
		<unknown/>
		<unknown/>
	</c>
</f></lift></class>
	<class path="stx.reactive.Collections" params="" file="src/main/haxe/stx/reactive/Collections.hx">
		<toStream public="1" params="T" set="method" line="31" static="1">
			<f a="collection:time">
				<t path="Iterable"><c path="toStream.T"/></t>
				<c path="Int"/>
				<c path="stx.reactive.Stream"><c path="toStream.T"/></c>
			</f>
			<haxe_doc>
     * Converts a collection to a stream, whose events are separated by the 
     * specified amount of time.
     *
     * @param collection    The collection.
     * @param time          The time, in milliseconds.
     *
     </haxe_doc>
		</toStream>
		<toStreamS public="1" params="T" set="method" line="43" static="1">
			<f a="collection:time">
				<t path="Iterable"><c path="toStreamS.T"/></t>
				<c path="stx.reactive.Signal"><c path="Int"/></c>
				<c path="stx.reactive.Stream"><c path="toStreamS.T"/></c>
			</f>
			<haxe_doc>
     * Converts a collection to a stream, whose events are separated by the 
     * specified amount of time.
     *
     * @param collection    The collection.
     * @param time          The time, as a signal, in milliseconds.
     *
     </haxe_doc>
		</toStreamS>
		<new set="method" line="21"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="stx.reactive.Timeout" params="" file="src/main/haxe/stx/reactive/Reactive.hx" module="stx.reactive.Reactive"><a/></typedef>
	<class path="stx.reactive.External" params="" file="src/main/haxe/stx/reactive/Reactive.hx" module="stx.reactive.Reactive">
		<setTimeout public="1" set="dynamic" line="32" static="1"><f a="f:time">
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<d/>
</f></setTimeout>
		<cancelTimeout public="1" line="36" static="1"><f a="">
	<t path="stx.reactive.Timeout"/>
	<e path="Void"/>
</f></cancelTimeout>
		<now public="1" line="39" static="1"><f a=""><c path="Float"/></f></now>
	</class>
	<enum path="stx.reactive.Propagation" params="T" file="src/main/haxe/stx/reactive/Reactive.hx" module="stx.reactive.Reactive">
		<propagate a="value"><c path="stx.reactive.Pulse"><c path="stx.reactive.Propagation.T"/></c></propagate>
		<doNotPropagate/>
	</enum>
	<class path="stx.reactive.Pulse" params="T" file="src/main/haxe/stx/reactive/Reactive.hx" module="stx.reactive.Reactive">
		<stamp public="1" set="null"><c path="Int"/></stamp>
		<value public="1" set="null"><c path="stx.reactive.Pulse.T"/></value>
		<map public="1" params="S" set="method" line="60"><f a="f">
	<f a="">
		<c path="stx.reactive.Pulse.T"/>
		<c path="map.S"/>
	</f>
	<c path="stx.reactive.Pulse"><c path="map.S"/></c>
</f></map>
		<withValue public="1" params="S" set="method" line="64"><f a="newValue">
	<c path="withValue.S"/>
	<c path="stx.reactive.Pulse"><c path="withValue.S"/></c>
</f></withValue>
		<new public="1" set="method" line="51"><f a="stamp:value">
	<c path="Int"/>
	<c path="stx.reactive.Pulse.T"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.reactive.Stamp" params="" file="src/main/haxe/stx/reactive/Reactive.hx" module="stx.reactive.Reactive">
		<_stamp line="70" static="1"><c path="Int"/></_stamp>
		<lastStamp public="1" set="method" line="72" static="1"><f a=""><c path="Int"/></f></lastStamp>
		<nextStamp public="1" set="method" line="76" static="1"><f a=""><c path="Int"/></f></nextStamp>
	</class>
	<class path="stx.reactive.Rank" params="" file="src/main/haxe/stx/reactive/Reactive.hx" module="stx.reactive.Reactive">
		<_rank line="82" static="1"><c path="Int"/></_rank>
		<lastRank public="1" set="method" line="84" static="1"><f a=""><c path="Int"/></f></lastRank>
		<nextRank public="1" set="method" line="88" static="1"><f a=""><c path="Int"/></f></nextRank>
	</class>
	<typedef path="stx.reactive.KeyValue" params="T" file="src/main/haxe/stx/reactive/Reactive.hx" module="stx.reactive.Reactive"><a>
	<v><c path="stx.reactive.KeyValue.T"/></v>
	<k><c path="Int"/></k>
</a></typedef>
	<class path="stx.reactive._Reactive.PriorityQueue" params="T" file="src/main/haxe/stx/reactive/Reactive.hx" private="1" module="stx.reactive.Reactive">
		<val><c path="Array"><t path="stx.reactive.KeyValue"><c path="stx.reactive._Reactive.PriorityQueue.T"/></t></c></val>
		<length public="1" set="method" line="102"><f a=""><c path="Int"/></f></length>
		<insert public="1" set="method" line="106"><f a="kv">
	<t path="stx.reactive.KeyValue"><c path="stx.reactive._Reactive.PriorityQueue.T"/></t>
	<e path="Void"/>
</f></insert>
		<isEmpty public="1" set="method" line="120"><f a=""><e path="Bool"/></f></isEmpty>
		<pop public="1" set="method" line="124"><f a=""><t path="stx.reactive.KeyValue"><c path="stx.reactive._Reactive.PriorityQueue.T"/></t></f></pop>
		<new public="1" set="method" line="98"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.Stream" params="T" file="src/main/haxe/stx/reactive/Reactive.hx" module="stx.reactive.Reactive">
		<_rank><c path="Int"/></_rank>
		<_sendsTo><c path="Array"><c path="stx.reactive.Stream"><d/></c></c></_sendsTo>
		<_updater><f a="">
	<c path="stx.reactive.Pulse"><d/></c>
	<e path="stx.reactive.Propagation"><c path="stx.reactive.Stream.T"/></e>
</f></_updater>
		<_weak><e path="Bool"/></_weak>
		<weaklyHeld public="1" get="getWeaklyHeld" set="setWeaklyHeld"><e path="Bool"/></weaklyHeld>
		<_cleanups><c path="Array"><f a=""><e path="Void"/></f></c></_cleanups>
		<attachListener public="1" set="method" line="185"><f a="dependent">
	<c path="stx.reactive.Stream"><d/></c>
	<e path="Void"/>
</f></attachListener>
		<removeListener public="1" set="method" line="203"><f a="dependent:?isWeakReference">
	<c path="stx.reactive.Stream"><d/></c>
	<e path="Bool"/>
	<e path="Bool"/>
</f></removeListener>
		<whenFinishedDo public="1" set="method" line="227">
			<f a="f">
				<f a=""><e path="Void"/></f>
				<e path="Void"/>
			</f>
			<haxe_doc>
     * Invokes the specified function when this stream is "finished", defined 
     * as being unable to produce any more events.
     </haxe_doc>
		</whenFinishedDo>
		<foreach public="1" set="method" line="239">
			<f a="f">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<e path="Void"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Calls the specified function for each event.
     </haxe_doc>
		</foreach>
		<each public="1" set="method" line="255">
			<f a="f">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<e path="Void"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Calls the specified function for each event.
     </haxe_doc>
		</each>
		<toArray public="1" set="method" line="263">
			<f a=""><c path="Array"><c path="stx.reactive.Stream.T"/></c></f>
			<haxe_doc>
     * Converts the stream to an array. Note: This array will grow 
     * continuously without bound unless clients remove elements from it.
     </haxe_doc>
		</toArray>
		<constant public="1" params="Z" set="method" line="277">
			<f a="value">
				<c path="constant.Z"/>
				<c path="stx.reactive.Stream"><c path="constant.Z"/></c>
			</f>
			<haxe_doc>
     * Maps this stream to a stream of constant values.
     *
     * @param value The constant that every value will be mapped to.
     *
     </haxe_doc>
		</constant>
		<bind public="1" params="Z" set="method" line="287">
			<f a="k">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<c path="stx.reactive.Stream"><c path="bind.Z"/></c>
				</f>
				<c path="stx.reactive.Stream"><c path="bind.Z"/></c>
			</f>
			<haxe_doc>
     * AKA flatMap. Binds each value to another stream, and returns a 
     * flattened stream.
     *
     * @param k The bind function.
     </haxe_doc>
		</bind>
		<sendEvent public="1" set="method" line="317">
			<f a="value">
				<d/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Sends an event now. This function should not be used except to create
     * "pure" streams.
     *
     * @param value The value to send.
     </haxe_doc>
		</sendEvent>
		<sendEventTyped public="1" set="method" line="329">
			<f a="value">
				<c path="stx.reactive.Stream.T"/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * A typed version of sendEvent.
	 * Sends an event now. This function should not be used except to create
     * "pure" streams.
     *
     * @param value The value to send.
     </haxe_doc>
		</sendEventTyped>
		<sendLaterIn public="1" set="method" line="345">
			<f a="value:millis">
				<d/>
				<c path="Int"/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Sends an event later. This function should not be used except to create
     * "pure" streams.
     *
     * @param value     The value to send.
     *
     * @param millis    The number of milliseconds to send it in. If this is 0, 
     *                  the event will be scheduled for "as soon as possible".
     *
     </haxe_doc>
		</sendLaterIn>
		<sendLater public="1" set="method" line="367">
			<f a="value">
				<d/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Sends an event later, "as soon as possible".
     *
     * @param value The value to send.
     </haxe_doc>
		</sendLater>
		<delay public="1" set="method" line="376">
			<f a="time">
				<c path="Int"/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Delays this stream by the specified number of milliseconds.
     *
     * @param   time    Time in milliseconds as an Int
     </haxe_doc>
		</delay>
		<delayS public="1" set="method" line="396">
			<f a="time">
				<c path="stx.reactive.Signal"><c path="Int"/></c>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Delays this stream by the specified number of milliseconds.
     * 
     * @param   time    Time in milliseconds as a Signal
     </haxe_doc>
		</delayS>
		<calm public="1" set="method" line="435">
			<f a="time">
				<c path="Int"/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Calms the stream. No event will be fired unless it occurs T milliseconds
     * after the prior event.
     *
     * @param time  The number of milliseconds.
     </haxe_doc>
		</calm>
		<calmS public="1" set="method" line="445">
			<f a="time">
				<c path="stx.reactive.Signal"><c path="Int"/></c>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Calms the stream. No event will be get through unless it occurs T 
     * milliseconds or more before the following event.
     *
     * @param time  The number of milliseconds.
     </haxe_doc>
		</calmS>
		<startsWith public="1" set="method" line="479">
			<f a="init">
				<c path="stx.reactive.Stream.T"/>
				<c path="stx.reactive.Signal"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Creates a signal backed by this event stream, which starts with the 
     * specified value.
     *
     * @param init  The initial value.
     </haxe_doc>
		</startsWith>
		<blind public="1" set="method" line="497">
			<f a="time">
				<c path="Int"/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Blinds the event stream to events occurring less than the specified 
     * milliseconds together.
     *
     * @param time The time to blind the stream to.
     </haxe_doc>
		</blind>
		<blindS public="1" set="method" line="507">
			<f a="time">
				<c path="stx.reactive.Signal"><c path="Int"/></c>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Blinds the event stream to events occurring the specified 
     * number of milliseconds together or less.
     *
     * @param time The time to blind the stream to.
     </haxe_doc>
		</blindS>
		<snapshot public="1" params="Z" set="method" line="533">
			<f a="value">
				<c path="stx.reactive.Signal"><c path="snapshot.Z"/></c>
				<c path="stx.reactive.Stream"><c path="snapshot.Z"/></c>
			</f>
			<haxe_doc>
     * Maps this stream into a stream of values determined by "snapshotting" 
     * the value of the signal.
     *
     * @param value The value.
     </haxe_doc>
		</snapshot>
		<filterRepeats public="1" set="method" line="542">
			<f a="?optStart">
				<c path="stx.reactive.Stream.T"/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Filters adjacent repeats.
     *
     * @param optStart  An optional start value.
     </haxe_doc>
		</filterRepeats>
		<filterRepeatsBy public="1" set="method" line="552">
			<f a="?optStart:eq">
				<c path="stx.reactive.Stream.T"/>
				<f a=":">
					<c path="stx.reactive.Stream.T"/>
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Filters adjacent repeats.
     *
     * @param optStart  An optional start value.
     * @param eq        An equality function.
     </haxe_doc>
		</filterRepeatsBy>
		<map public="1" params="Z" set="method" line="574">
			<f a="mapper">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<c path="map.Z"/>
				</f>
				<c path="stx.reactive.Stream"><c path="map.Z"/></c>
			</f>
			<haxe_doc>
     * Maps this stream to another stream by using the specified function.
     *
     * @param mapper    The mapping function.
     </haxe_doc>
		</map>
		<flatMap public="1" params="Z" set="method" line="588">
			<f a="mapper">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<c path="stx.reactive.Stream"><c path="flatMap.Z"/></c>
				</f>
				<c path="stx.reactive.Stream"><c path="flatMap.Z"/></c>
			</f>
			<haxe_doc>
     * Flattens the result of mapping each value to another stream.
     *
     * @param mapper The mapper.
     </haxe_doc>
		</flatMap>
		<scanl public="1" params="Z" set="method" line="598">
			<f a="initial:folder">
				<c path="scanl.Z"/>
				<f a=":">
					<c path="scanl.Z"/>
					<c path="stx.reactive.Stream.T"/>
					<c path="scanl.Z"/>
				</f>
				<c path="stx.reactive.Stream"><c path="scanl.Z"/></c>
			</f>
			<haxe_doc>
     * A stream of values resulting from left folding.
     *
     * @param initial   The initial value.
     * @param folder    The folding function.
     </haxe_doc>
		</scanl>
		<scanlP public="1" set="method" line="615">
			<f a="folder">
				<f a=":">
					<c path="stx.reactive.Stream.T"/>
					<c path="stx.reactive.Stream.T"/>
					<c path="stx.reactive.Stream.T"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Same as scanl, but without an initial value.
     </haxe_doc>
		</scanlP>
		<take public="1" set="method" line="642">
			<f a="n">
				<c path="Int"/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Returns a finite stream consisting of the first n elements of this 
     * stream.
     *
     * @param n The number of values.
     </haxe_doc>
		</take>
		<takeWhile public="1" set="method" line="668">
			<f a="filter">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Returns a finite stream consisting of the first subset of this stream
     * for which the filter returns true.
     *
     * @param n The number of values.
     </haxe_doc>
		</takeWhile>
		<shift public="1" set="method" line="698">
			<f a="n">
				<c path="Int"/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Shifts events forward in time by the specified number of events.
     * 
     * @param n The number of events to shift by.
     </haxe_doc>
		</shift>
		<shiftWhile public="1" set="method" line="718">
			<f a="pred">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Shifts events forward in time until the specified predicate returns 
     * false for an event.
     *
     * @param pred  The predicate.
     </haxe_doc>
		</shiftWhile>
		<shiftWith public="1" set="method" line="747">
			<f a="elements">
				<t path="Iterable"><c path="stx.reactive.Stream.T"/></t>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Shifts events forward in time by pulling from the specified iterable
     * until it's exhausted, then streaming the delayed events.
     *
     * @param elements  The elements to use in time shifting.
     </haxe_doc>
		</shiftWith>
		<drop public="1" set="method" line="769">
			<f a="n">
				<c path="Int"/>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Drops the specified number of events from this stream. This method does
     * not change the timestamps of events.
     *
     * @param n The number to drop.
     </haxe_doc>
		</drop>
		<dropWhile public="1" set="method" line="786">
			<f a="pred">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Drops events for as long as the predicate returns true.
     *
     * @param pred  The predicate.
     </haxe_doc>
		</dropWhile>
		<partition public="1" set="method" line="811">
			<f a="pred">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.Tuple2">
					<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
					<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
				</c>
			</f>
			<haxe_doc>
     * Partitions the stream into two event streams, one for which the 
     * predicate is true, one for which the predicate is false.
     *
     * @param pred  The predicate.
     </haxe_doc>
		</partition>
		<partitionWhile public="1" set="method" line="834">
			<f a="pred">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.Tuple2">
					<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
					<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
				</c>
			</f>
			<haxe_doc>
     * Returns a tuple of takeWhile/dropWhile for the specified predicate.
     *
     * @param pred  The predicate.
     </haxe_doc>
		</partitionWhile>
		<filter public="1" set="method" line="846">
			<f a="pred">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Filters this stream by the specified predicate.
     *
      * @param pred The predicate.
      </haxe_doc>
		</filter>
		<filterWhile public="1" set="method" line="860">
			<f a="pred">
				<f a="">
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Accepts all elements until the predicate first returns false.
     *
     * @param pred  The predicate.
     </haxe_doc>
		</filterWhile>
		<zipWith public="1" params="A:R" set="method" line="897">
			<f a="as:f">
				<c path="stx.reactive.Stream"><c path="zipWith.A"/></c>
				<f a=":">
					<c path="stx.reactive.Stream.T"/>
					<c path="zipWith.A"/>
					<c path="zipWith.R"/>
				</f>
				<c path="stx.reactive.Stream"><c path="zipWith.R"/></c>
			</f>
			<haxe_doc>
     * Zips elements of supplied streams together using a function and returns a
     * Stream of the resulting elements.
     *
     * [1, 2, 3].zipWith([1, 2, 3], Tuples.t2) == [Tuple2[1, 1], Tuple2[2, 2], Tuple2[3, 3]]
     *
     * @param as  The stream with which to zipWith 'this'.
     * @param f  The function that will be used to get the result from the inputs streams ('this' and as).
     *
     * @return     The Stream of the result of the application of the function on using both stream elements as input.
	 * 
     </haxe_doc>
		</zipWith>
		<zip public="1" params="A" set="method" line="932">
			<f a="as">
				<c path="stx.reactive.Stream"><c path="zip.A"/></c>
				<c path="stx.reactive.Stream"><c path="stx.Tuple2">
	<c path="stx.reactive.Stream.T"/>
	<c path="zip.A"/>
</c></c>
			</f>
			<haxe_doc>
     * Zips elements of supplied streams together and returns an
     * Stream of Tuple2 containing the zipped elements.
     *
     * [1, 2, 3].zip[1, 2, 3] == [Tuple2[1, 1], Tuple2[2, 2], Tuple2[3, 3]]
     *
     * @param as  The stream with which to zip 'this'.
     *
     * @return     A Tuple slice containing an element from each 
     *             stream
     </haxe_doc>
		</zip>
		<zip3 public="1" params="A:B" set="method" line="948">
			<f a="as:bs">
				<c path="stx.reactive.Stream"><c path="zip3.A"/></c>
				<c path="stx.reactive.Stream"><c path="zip3.B"/></c>
				<c path="stx.reactive.Stream"><c path="stx.Tuple3">
	<c path="stx.reactive.Stream.T"/>
	<c path="zip3.A"/>
	<c path="zip3.B"/>
</c></c>
			</f>
			<haxe_doc>
     * Zips elements of supplied streams together and returns an
     * Stream of Tuple3 containing the zipped elements.
     *
     * [1, 2, 3].zip([1, 2, 3], [1, 2, 3]) == [Tuple3[1, 1, 1], Tuple3[2, 2, 2], Tuple3[3, 3, 3]]
     *
     * @param as  The a stream with which to zip 'this'.
     * @param bs  The b stream with which to zip 'this' and as.
     *
     * @return     A Tuple slice containing an element from each 
     *             stream
     </haxe_doc>
		</zip3>
		<zip4 public="1" params="A:B:C" set="method" line="971">
			<f a="as:bs:cs">
				<c path="stx.reactive.Stream"><c path="zip4.A"/></c>
				<c path="stx.reactive.Stream"><c path="zip4.B"/></c>
				<c path="stx.reactive.Stream"><c path="zip4.C"/></c>
				<c path="stx.reactive.Stream"><c path="stx.Tuple4">
	<c path="stx.reactive.Stream.T"/>
	<c path="zip4.A"/>
	<c path="zip4.B"/>
	<c path="zip4.C"/>
</c></c>
			</f>
			<haxe_doc>
     * Zips elements of supplied streams together and returns an
     * Stream of Tuple4 containing the zipped elements.
     *
     * For example see above
     *
     * @param as  The a stream with which to zip 'this'.
     * @param bs  The b stream with which to zip 'this' and as.
     * @param cs  The c stream with which to zip 'this,' as, and bs.
     *
     * @return     A Tuple slice containing one element from each 
     *             stream
     </haxe_doc>
		</zip4>
		<zip5 public="1" params="A:B:C:D" set="method" line="996">
			<f a="as:bs:cs:ds">
				<c path="stx.reactive.Stream"><c path="zip5.A"/></c>
				<c path="stx.reactive.Stream"><c path="zip5.B"/></c>
				<c path="stx.reactive.Stream"><c path="zip5.C"/></c>
				<c path="stx.reactive.Stream"><c path="zip5.D"/></c>
				<c path="stx.reactive.Stream"><c path="stx.Tuple5">
	<c path="stx.reactive.Stream.T"/>
	<c path="zip5.A"/>
	<c path="zip5.B"/>
	<c path="zip5.C"/>
	<c path="zip5.D"/>
</c></c>
			</f>
			<haxe_doc>
     * Zips elements of supplied streams together and returns an
     * Stream of Tuple5 containing the zipped elements.
     *
     * For example see above
     *
     * @param as  The a stream with which to zip 'this'.
     * @param bs  The b stream with which to zip 'this' and as.
     * @param cs  The c stream with which to zip 'this,' as, and bs.
     * @param ds  The d stream with which to zip 'this,' as, bs, and cs.
     *
     * @return     A Tuple slice containing one element from each 
     *             stream
     </haxe_doc>
		</zip5>
		<group public="1" set="method" line="1015">
			<f a=""><c path="stx.reactive.Stream"><t path="Iterable"><c path="stx.reactive.Stream.T"/></t></c></f>
			<haxe_doc>
     * Groups Stream elements which are sent
     * sequentially and are == to each other into
     * iterables and returns these in a new stream
     *
     * @return     An Stream of grouped elements
     </haxe_doc>
		</group>
		<groupBy public="1" set="method" line="1032">
			<f a="eq">
				<f a=":">
					<c path="stx.reactive.Stream.T"/>
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.reactive.Stream"><t path="Iterable"><c path="stx.reactive.Stream.T"/></t></c>
			</f>
			<haxe_doc>
     * Groups Stream elements which are sent
     * sequentially and which return true from the
     * supplied comparison function into iterables
     * and returns these in a new stream
     *
     * @param   eq      The comparison function that
     *                  will be used fo evaluate the 
     *                  equality of the stream
     *                  elements.
     *
     * @return     An Stream of grouped elements
     </haxe_doc>
		</groupBy>
		<merge public="1" set="method" line="1075">
			<f a="that">
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Merges this stream and the specified stream.
     *
     * @param that  The Stream with which to 
     *              merge 'this' stream
     </haxe_doc>
		</merge>
		<uniqueSteps public="1" set="method" line="1083">
			<f a=""><c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c></f>
			<haxe_doc>
     * Creates a new Stream in which only events on 
     * different time steps will appear
     *
     </haxe_doc>
		</uniqueSteps>
		<uniqueEvents public="1" set="method" line="1105">
			<f a="?eq">
				<f a=":">
					<c path="stx.reactive.Stream.T"/>
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Creates a new Stream in which only new events
     * will appear (including those on the same time step)
     *
     * @param eq  The Function used to check event equality
     </haxe_doc>
		</uniqueEvents>
		<unique public="1" set="method" line="1128">
			<f a="?eq">
				<f a=":">
					<c path="stx.reactive.Stream.T"/>
					<c path="stx.reactive.Stream.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream.T"/></c>
			</f>
			<haxe_doc>
     * Creates a new Stream in which only unique events
     * taking place at unique timesteps will appear
     *
     * @param eq  The Function used to check event equality
     </haxe_doc>
		</unique>
		<propagatePulse set="method" line="1132"><f a="pulse">
	<c path="stx.reactive.Pulse"><d/></c>
	<e path="Void"/>
</f></propagatePulse>
		<setWeaklyHeld set="method" line="1176"><f a="held">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setWeaklyHeld>
		<getWeaklyHeld set="method" line="1190"><f a=""><e path="Bool"/></f></getWeaklyHeld>
		<new public="1" set="method" line="170"><f a="updater:?sources">
	<f a="">
		<c path="stx.reactive.Pulse"><d/></c>
		<e path="stx.reactive.Propagation"><c path="stx.reactive.Stream.T"/></e>
	</f>
	<c path="Array"><c path="stx.reactive.Stream"><d/></c></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.reactive.Signal" params="T" file="src/main/haxe/stx/reactive/Reactive.hx" module="stx.reactive.Reactive">
		<_underlyingRaw><c path="stx.reactive.Stream"><d/></c></_underlyingRaw>
		<_underlying><c path="stx.reactive.Stream"><c path="stx.reactive.Signal.T"/></c></_underlying>
		<_updater><f a="">
	<c path="stx.reactive.Pulse"><d/></c>
	<e path="stx.reactive.Propagation"><c path="stx.reactive.Signal.T"/></e>
</f></_updater>
		<_last><c path="stx.reactive.Signal.T"/></_last>
		<map public="1" params="Z" set="method" line="1234">
			<f a="f">
				<f a="">
					<c path="stx.reactive.Signal.T"/>
					<c path="map.Z"/>
				</f>
				<c path="stx.reactive.Signal"><c path="map.Z"/></c>
			</f>
			<haxe_doc>
     * Applies a function to a value and returns the 
     * result as a Signal.
     *
     * @param   f   The function to apply.
     *
     * @result      A Signal that is the result
     *              of the supplied function. 
     </haxe_doc>
		</map>
		<mapS public="1" params="Z" set="method" line="1248">
			<f a="f">
				<c path="stx.reactive.Signal"><f a="">
	<c path="stx.reactive.Signal.T"/>
	<c path="mapS.Z"/>
</f></c>
				<c path="stx.reactive.Signal"><c path="mapS.Z"/></c>
			</f>
			<haxe_doc>
     * Applies a function to a value and returns the 
     * result as a Signal.
     *
     * @param   f   A Signal that accepts a T and 
     *              returns a Z.
     *
     * @result      A Signal that is the result
     *              of the supplied function. 
     </haxe_doc>
		</mapS>
		<lift public="1" params="Z" set="method" line="1261">
			<f a="f">
				<f a="">
					<c path="stx.reactive.Signal.T"/>
					<c path="lift.Z"/>
				</f>
				<c path="stx.reactive.Signal"><c path="lift.Z"/></c>
			</f>
			<haxe_doc>
     * Applies a function to a value and returns the 
     * result as a Signal.
     *
     * @param   f   The function to apply.
     *
     * @result      A Signal that is the result
     *              of the supplied function. 
     </haxe_doc>
		</lift>
		<liftS public="1" params="Z" set="method" line="1275">
			<f a="f">
				<c path="stx.reactive.Signal"><f a="">
	<c path="stx.reactive.Signal.T"/>
	<c path="liftS.Z"/>
</f></c>
				<c path="stx.reactive.Signal"><c path="liftS.Z"/></c>
			</f>
			<haxe_doc>
     * Applies a function to a value and returns the 
     * result as a Signal.
     *
     * @param   f   A Signal that accepts a T and 
     *              returns a Z.
     *
     * @result      A Signal that is the result
     *              of the supplied function. 
     </haxe_doc>
		</liftS>
		<zipWith public="1" params="A:R" set="method" line="1296">
			<f a="b2:f">
				<c path="stx.reactive.Signal"><c path="zipWith.A"/></c>
				<f a=":">
					<c path="stx.reactive.Signal.T"/>
					<c path="zipWith.A"/>
					<c path="zipWith.R"/>
				</f>
				<c path="stx.reactive.Signal"><c path="zipWith.R"/></c>
			</f>
			<haxe_doc>
     * Zips elements of supplied streams together using a function and returns a
     * Signal of the resulting elements.
     *
     * [1, 2, 3].zipWith([1, 2, 3], Tuples.t2) == [Tuple2[1, 1], Tuple2[2, 2], Tuple2[3, 3]]
     *
     * @param as  The signal with which to zipWith 'this'.
     * @param f  The function that will be used to get the result from the inputs signals ('this' and as).
     *
     * @return     The Signal of the result of the application of the function on using both stream elements as input.
	 * 
     </haxe_doc>
		</zipWith>
		<zip public="1" params="B" set="method" line="1325">
			<f a="b2">
				<c path="stx.reactive.Signal"><c path="zip.B"/></c>
				<c path="stx.reactive.Signal"><c path="stx.Tuple2">
	<c path="stx.reactive.Signal.T"/>
	<c path="zip.B"/>
</c></c>
			</f>
			<haxe_doc>
     * Zips elements of supplied Signals together and returns a
     * Signal of Tuple2 containing the zipped elements.
     *
     * [1, 2, 3].zip[1, 2, 3] == [Tuple2[1, 1], Tuple2[2, 2], Tuple2[3, 3]]
     *
     * @param b2  The Signal with which to zip 'this' Signal.
     *
     * @return     A Signal Tuple slice containing an element from each 
     *             supplied Signal
     </haxe_doc>
		</zip>
		<zip3 public="1" params="B:C" set="method" line="1339">
			<f a="b2:b3">
				<c path="stx.reactive.Signal"><c path="zip3.B"/></c>
				<c path="stx.reactive.Signal"><c path="zip3.C"/></c>
				<c path="stx.reactive.Signal"><c path="stx.Tuple3">
	<c path="stx.reactive.Signal.T"/>
	<c path="zip3.B"/>
	<c path="zip3.C"/>
</c></c>
			</f>
			<haxe_doc>
     * Zips elements of supplied Signals together and returns a
     * Signal of Tuple3 containing the zipped elements.
     *
     * @param b2  A Signal to be zipped.
     * @param b3  A Signal to be zipped.
     *
     * @return     A Signal Tuple slice containing an element from each 
     *             Signal
     </haxe_doc>
		</zip3>
		<zip4 public="1" params="B:C:D" set="method" line="1366">
			<f a="b2:b3:b4">
				<c path="stx.reactive.Signal"><c path="zip4.B"/></c>
				<c path="stx.reactive.Signal"><c path="zip4.C"/></c>
				<c path="stx.reactive.Signal"><c path="zip4.D"/></c>
				<c path="stx.reactive.Signal"><c path="stx.Tuple4">
	<c path="stx.reactive.Signal.T"/>
	<c path="zip4.B"/>
	<c path="zip4.C"/>
	<c path="zip4.D"/>
</c></c>
			</f>
			<haxe_doc>
     * Zips elements of supplied Signals together and returns a
     * Signal of Tuple4 containing the zipped elements.
     *
     * @param b2  A Signal to be zipped.
      * @param b3  A Signal to be zipped.
      * @param b4  A Signal to be zipped.
      *
      * @return     A Signal Tuple slice containing an element from each 
      *             Signal
       </haxe_doc>
		</zip4>
		<zip5 public="1" params="B:C:D:E" set="method" line="1394">
			<f a="b2:b3:b4:b5">
				<c path="stx.reactive.Signal"><c path="zip5.B"/></c>
				<c path="stx.reactive.Signal"><c path="zip5.C"/></c>
				<c path="stx.reactive.Signal"><c path="zip5.D"/></c>
				<c path="stx.reactive.Signal"><c path="zip5.E"/></c>
				<c path="stx.reactive.Signal"><c path="stx.Tuple5">
	<c path="stx.reactive.Signal.T"/>
	<c path="zip5.B"/>
	<c path="zip5.C"/>
	<c path="zip5.D"/>
	<c path="zip5.E"/>
</c></c>
			</f>
			<haxe_doc>
      * Zips elements of supplied Signals together and returns a
      * Signal of Tuple5 containing the zipped elements.
      *
      * @param b2  A Signal to be zipped.
      * @param b3  A Signal to be zipped.
      * @param b4  A Signal to be zipped.
      * @param b5  A Signal to be zipped.
      *
      * @return     A Signal Tuple slice containing an element from each 
      *             Signal
      </haxe_doc>
		</zip5>
		<zipN public="1" set="method" line="1417">
			<f a="signals">
				<t path="Iterable"><c path="stx.reactive.Signal"><c path="stx.reactive.Signal.T"/></c></t>
				<c path="stx.reactive.Signal"><t path="Iterable"><c path="stx.reactive.Signal.T"/></t></c>
			</f>
			<haxe_doc>
     * Zips together the specified Signals.
     *
     *@param    signals   An Iterable of the 
     *                      Signals to be zipped.
     </haxe_doc>
		</zipN>
		<calm public="1" set="method" line="1429">
			<f a="time">
				<c path="Int"/>
				<c path="stx.reactive.Signal"><c path="stx.reactive.Signal.T"/></c>
			</f>
			<haxe_doc>
     * Calms the stream. No event will be get through unless it occurs T 
     * milliseconds or more before the following event.
     *
     * @param time  The number of milliseconds.
     </haxe_doc>
		</calm>
		<calmS public="1" set="method" line="1439">
			<f a="time">
				<c path="stx.reactive.Signal"><c path="Int"/></c>
				<c path="stx.reactive.Signal"><c path="stx.reactive.Signal.T"/></c>
			</f>
			<haxe_doc>
     * Calms the stream. No event will be get through unless it occurs T 
     * milliseconds or more before the following event.
     *
     * @param time  The number of milliseconds as a Signal.
     </haxe_doc>
		</calmS>
		<blind public="1" set="method" line="1449">
			<f a="time">
				<c path="Int"/>
				<c path="stx.reactive.Signal"><c path="stx.reactive.Signal.T"/></c>
			</f>
			<haxe_doc>
     * Blinds the event stream to events occurring the specified 
     * number of milliseconds together or less.
     *
     * @param time The time to blind the stream to.
     </haxe_doc>
		</blind>
		<blindS public="1" set="method" line="1459">
			<f a="time">
				<c path="stx.reactive.Signal"><c path="Int"/></c>
				<c path="stx.reactive.Signal"><c path="stx.reactive.Signal.T"/></c>
			</f>
			<haxe_doc>
     * Blinds the event stream to events occurring the specified 
     * number of milliseconds together or less.
     *
     * @param time The time to blind the stream to.
     </haxe_doc>
		</blindS>
		<delay public="1" set="method" line="1468">
			<f a="time">
				<c path="Int"/>
				<c path="stx.reactive.Signal"><c path="stx.reactive.Signal.T"/></c>
			</f>
			<haxe_doc>
     * Delays this stream by the specified number of milliseconds.
     * 
     * @param   time    Time in milliseconds as an Int
     </haxe_doc>
		</delay>
		<delayS public="1" set="method" line="1477">
			<f a="time">
				<c path="stx.reactive.Signal"><c path="Int"/></c>
				<c path="stx.reactive.Signal"><c path="stx.reactive.Signal.T"/></c>
			</f>
			<haxe_doc>
     * Delays this stream by the specified number of milliseconds.
     * 
     * @param   time    Time in milliseconds as a Signal
     </haxe_doc>
		</delayS>
		<valueNow public="1" set="method" line="1486">
			<f a=""><c path="stx.reactive.Signal.T"/></f>
			<haxe_doc>
     * Returns the present value of 'this' Signal. 
     *
     </haxe_doc>
		</valueNow>
		<mapC public="1" set="method" line="1500">
			<f a="f">
				<f a="">
					<c path="stx.reactive.Stream"><c path="stx.reactive.Signal.T"/></c>
					<c path="stx.reactive.Stream"><c path="stx.reactive.Signal.T"/></c>
				</f>
				<c path="stx.reactive.Signal"><c path="stx.reactive.Signal.T"/></c>
			</f>
			<haxe_doc>
     * Applies a function to a signal's value that 
     * accepts an Stream value and returns the 
     * result as an Stream value.
     *
     * @param   f   The function to apply.
     *
     * @result      A Signal that is the result
     *              of the sup-plied function. 
     </haxe_doc>
		</mapC>
		<changes public="1" get="inline" set="null" line="1509">
			<f a=""><c path="stx.reactive.Stream"><c path="stx.reactive.Signal.T"/></c></f>
			<haxe_doc>
     * Returns the Stream underlying the Signal.
     *
     * @result      The underlying Stream.
     </haxe_doc>
		</changes>
		<whenChanges public="1" set="method" line="1516">
			<f a="f">
				<f a="">
					<c path="stx.reactive.Signal.T"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
     * Calls the specified function for each event.
     </haxe_doc>
		</whenChanges>
		<nowAndWhenChanges public="1" set="method" line="1523">
			<f a="f">
				<f a="">
					<c path="stx.reactive.Signal.T"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
     * Calls the specified function for each event.
     </haxe_doc>
		</nowAndWhenChanges>
		<sendSignal public="1" set="method" line="1534">
			<f a="value">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
     * Sends an event to the underlying Stream that will be immediately 
     * propagated with a new timestamp.
     *
     * @param   value   the value to send Into the Stream.
     </haxe_doc>
		</sendSignal>
		<sendSignalTyped public="1" set="method" line="1544">
			<f a="value">
				<c path="stx.reactive.Signal.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
     * Sends an event to the underlying Stream that will be immediately 
     * propagated with a new timestamp.
     *
     * @param   value   the value to send Into the Stream.
     </haxe_doc>
		</sendSignalTyped>
		<new public="1" set="method" line="1202"><f a="stream:init:updater">
	<c path="stx.reactive.Stream"><d/></c>
	<c path="stx.reactive.Signal.T"/>
	<f a="">
		<c path="stx.reactive.Pulse"><d/></c>
		<e path="stx.reactive.Propagation"><c path="stx.reactive.Signal.T"/></e>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.reactive.SignalBool" params="" file="src/main/haxe/stx/reactive/SignalBool.hx">
		<not public="1" set="method" line="28" static="1">
			<f a="signal">
				<c path="stx.reactive.Signal"><e path="Bool"/></c>
				<c path="stx.reactive.Signal"><e path="Bool"/></c>
			</f>
			<haxe_doc>
     * Returns a Signal with the Bool of each value mapped to the
     * opposite of the original original Signal.
     </haxe_doc>
		</not>
		<ifTrue public="1" params="T" set="method" line="51" static="1">
			<f a="condition:thenS:elseS">
				<c path="stx.reactive.Signal"><e path="Bool"/></c>
				<c path="stx.reactive.Signal"><c path="ifTrue.T"/></c>
				<c path="stx.reactive.Signal"><c path="ifTrue.T"/></c>
				<c path="stx.reactive.Signal"><c path="ifTrue.T"/></c>
			</f>
			<haxe_doc><![CDATA[
     * Switches off of a Signal of Bools, returning
     * either a thenE Signal<T> when true or an elseE 
     * when falseSignal<T>.
     * 
     *
     * @param contition     A Signal of Bools that will 
     *                      be used to determine which 
     *                      Signal to return.
     *
     * @param thenE         The Signal that will be returned 
     *                      if stream == true;
     *
     * @param elseE         The Signal that will be returned 
      *                      if stream == false;
     *
     * @return              If a Signal from condition == true
     *                      Signal thenE, else Signal elseE
     ]]></haxe_doc>
		</ifTrue>
		<and public="1" set="method" line="71" static="1">
			<f a="signals">
				<t path="Iterable"><c path="stx.reactive.Signal"><e path="Bool"/></c></t>
				<c path="stx.reactive.Signal"><e path="Bool"/></c>
			</f>
			<haxe_doc>
     * Returns a Signal, true or false depending on whether 
     * or not all of the Signals supplied in the Iterable at a
     * given point of time are true.
     *
     * @param streams       An Iterable of the Signals to 
     *                      be evaluated.
     *
     * @return              If all the Signals in Iterable at
     *                      a given time are true, true, else
     *                      false.
     </haxe_doc>
		</and>
		<or public="1" set="method" line="87" static="1">
			<f a="signals">
				<t path="Iterable"><c path="stx.reactive.Signal"><e path="Bool"/></c></t>
				<c path="stx.reactive.Signal"><e path="Bool"/></c>
			</f>
			<haxe_doc>
     * Returns a Signal, true or false depending on whether 
     * or not any of the Signals supplied in the Iterable at a
     * given point of time are true.
     *
     * @param streams       An Iterable of the Signals to 
     *                      be evaluated.
     *
     * @return              If any the Signals in Iterable at
     *                      a given time are true, true, else
     *                      false.
     </haxe_doc>
		</or>
		<new set="method" line="22"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.SignalCollection" params="" file="src/main/haxe/stx/reactive/SignalCollection.hx">
		<concatS public="1" params="C:T" set="method" line="32" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="concatS.C"/>
	<c path="concatS.T"/>
</c></c>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="concatS.C"/>
	<c path="concatS.T"/>
</c></c>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="concatS.C"/>
	<c path="concatS.T"/>
</c></c>
</f></concatS>
		<join public="1" params="C:T" set="method" line="36" static="1"><f a="b:char">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="join.C"/>
	<c path="join.T"/>
</c></c>
	<c path="String"/>
	<c path="stx.reactive.Signal"><c path="String"/></c>
</f></join>
		<size public="1" params="C:T" set="method" line="40" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="size.C"/>
	<c path="size.T"/>
</c></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></size>
		<zipS public="1" params="C:T:B" set="method" line="44" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="stx.ds.List"><c path="zipS.T"/></c></c>
	<c path="stx.reactive.Signal"><c path="stx.ds.List"><c path="zipS.B"/></c></c>
	<c path="stx.reactive.Signal"><c path="stx.ds.List"><c path="stx.Tuple2">
	<c path="zipS.T"/>
	<c path="zipS.B"/>
</c></c></c>
</f></zipS>
		<append public="1" params="C:T" set="method" line="48" static="1"><f a="b:element">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="append.C"/>
	<c path="append.T"/>
</c></c>
	<c path="append.T"/>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="append.C"/>
	<c path="append.T"/>
</c></c>
</f></append>
		<count public="1" params="C:T" set="method" line="52" static="1"><f a="b:predicate">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="count.C"/>
	<c path="count.T"/>
</c></c>
	<f a="">
		<c path="count.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></count>
		<all public="1" params="C:T" set="method" line="56" static="1"><f a="b:tester">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="all.C"/>
	<c path="all.T"/>
</c></c>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.reactive.Signal"><e path="Bool"/></c>
</f></all>
		<any public="1" params="C:T" set="method" line="60" static="1"><f a="b:tester">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="any.C"/>
	<c path="any.T"/>
</c></c>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.reactive.Signal"><e path="Bool"/></c>
</f></any>
		<foreach public="1" params="C:T" set="method" line="64" static="1"><f a="b:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="foreach.C"/>
	<c path="foreach.T"/>
</c></c>
	<f a="">
		<c path="foreach.T"/>
		<e path="Void"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="foreach.C"/>
	<c path="foreach.T"/>
</c></c>
</f></foreach>
		<each public="1" params="C:T" set="method" line="68" static="1"><f a="b:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="each.C"/>
	<c path="each.T"/>
</c></c>
	<f a="">
		<c path="each.T"/>
		<e path="Void"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="each.C"/>
	<c path="each.T"/>
</c></c>
</f></each>
		<map public="1" params="C:D:T:U" set="method" line="72" static="1"><f a="b:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="map.C"/>
	<c path="map.T"/>
</c></c>
	<f a="">
		<c path="map.T"/>
		<c path="map.U"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="map.D"/>
	<c path="map.U"/>
</c></c>
</f></map>
		<mapTo public="1" params="C:T:D:Z" set="method" line="76" static="1"><f a="b:t:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="mapTo.C"/>
	<c path="mapTo.T"/>
</c></c>
	<c path="stx.ds.Collection">
		<c path="mapTo.D"/>
		<c path="mapTo.Z"/>
	</c>
	<f a="">
		<c path="mapTo.T"/>
		<c path="mapTo.Z"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="mapTo.D"/>
	<c path="mapTo.Z"/>
</c></c>
</f></mapTo>
		<partition public="1" params="C:T" set="method" line="84" static="1"><f a="b:filter">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="partition.C"/>
	<c path="partition.T"/>
</c></c>
	<f a="">
		<c path="partition.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.Tuple2">
	<c path="stx.ds.Collection">
		<c path="partition.C"/>
		<c path="partition.T"/>
	</c>
	<c path="stx.ds.Collection">
		<c path="partition.C"/>
		<c path="partition.T"/>
	</c>
</c></c>
</f></partition>
		<filter public="1" params="C:T" set="method" line="88" static="1"><f a="b:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="filter.C"/>
	<c path="filter.T"/>
</c></c>
	<f a="">
		<c path="filter.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="filter.C"/>
	<c path="filter.T"/>
</c></c>
</f></filter>
		<flatMap public="1" params="C:T" set="method" line="92" static="1"><f a="b:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="flatMap.C"/>
	<c path="flatMap.T"/>
</c></c>
	<f a="">
		<c path="flatMap.T"/>
		<c path="stx.ds.Collection">
			<c path="flatMap.C"/>
			<c path="flatMap.T"/>
		</c>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="flatMap.C"/>
	<c path="flatMap.T"/>
</c></c>
</f></flatMap>
		<toArray public="1" params="C:T" set="method" line="97" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="toArray.C"/>
	<c path="toArray.T"/>
</c></c>
	<c path="stx.reactive.Signal"><c path="Array"><c path="toArray.T"/></c></c>
</f></toArray>
		<foldr public="1" params="C:T:Z" set="method" line="101" static="1"><f a="b:initial:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="foldr.C"/>
	<c path="foldr.T"/>
</c></c>
	<c path="foldr.Z"/>
	<f a=":">
		<c path="foldr.T"/>
		<c path="foldr.Z"/>
		<c path="foldr.Z"/>
	</f>
	<c path="stx.reactive.Signal"><c path="foldr.Z"/></c>
</f></foldr>
		<foldl public="1" params="C:T:Z" set="method" line="105" static="1"><f a="b:initial:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="foldl.C"/>
	<c path="foldl.T"/>
</c></c>
	<c path="foldl.Z"/>
	<f a=":">
		<c path="foldl.Z"/>
		<c path="foldl.T"/>
		<c path="foldl.Z"/>
	</f>
	<c path="stx.reactive.Signal"><c path="foldl.Z"/></c>
</f></foldl>
		<new set="method" line="28"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.SignalCollectionExtensions" params="" file="src/main/haxe/stx/reactive/SignalCollectionExtensions.hx">
		<concatS public="1" params="C:T" set="method" line="32" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="concatS.C"/>
	<c path="concatS.T"/>
</c></c>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="concatS.C"/>
	<c path="concatS.T"/>
</c></c>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="concatS.C"/>
	<c path="concatS.T"/>
</c></c>
</f></concatS>
		<join public="1" params="C:T" set="method" line="36" static="1"><f a="b:char">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="join.C"/>
	<c path="join.T"/>
</c></c>
	<c path="String"/>
	<c path="stx.reactive.Signal"><c path="String"/></c>
</f></join>
		<size public="1" params="C:T" set="method" line="40" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="size.C"/>
	<c path="size.T"/>
</c></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></size>
		<zipS public="1" params="C:T:B" set="method" line="44" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="stx.ds.List"><c path="zipS.T"/></c></c>
	<c path="stx.reactive.Signal"><c path="stx.ds.List"><c path="zipS.B"/></c></c>
	<c path="stx.reactive.Signal"><c path="stx.ds.List"><c path="stx.Tuple2">
	<c path="zipS.T"/>
	<c path="zipS.B"/>
</c></c></c>
</f></zipS>
		<append public="1" params="C:T" set="method" line="48" static="1"><f a="b:element">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="append.C"/>
	<c path="append.T"/>
</c></c>
	<c path="append.T"/>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="append.C"/>
	<c path="append.T"/>
</c></c>
</f></append>
		<count public="1" params="C:T" set="method" line="52" static="1"><f a="b:predicate">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="count.C"/>
	<c path="count.T"/>
</c></c>
	<f a="">
		<c path="count.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></count>
		<all public="1" params="C:T" set="method" line="56" static="1"><f a="b:tester">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="all.C"/>
	<c path="all.T"/>
</c></c>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.reactive.Signal"><e path="Bool"/></c>
</f></all>
		<any public="1" params="C:T" set="method" line="60" static="1"><f a="b:tester">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="any.C"/>
	<c path="any.T"/>
</c></c>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.reactive.Signal"><e path="Bool"/></c>
</f></any>
		<foreach public="1" params="C:T" set="method" line="64" static="1"><f a="b:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="foreach.C"/>
	<c path="foreach.T"/>
</c></c>
	<f a="">
		<c path="foreach.T"/>
		<e path="Void"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="foreach.C"/>
	<c path="foreach.T"/>
</c></c>
</f></foreach>
		<each public="1" params="C:T" set="method" line="68" static="1"><f a="b:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="each.C"/>
	<c path="each.T"/>
</c></c>
	<f a="">
		<c path="each.T"/>
		<e path="Void"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="each.C"/>
	<c path="each.T"/>
</c></c>
</f></each>
		<map public="1" params="C:T" set="method" line="72" static="1"><f a="b:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="map.C"/>
	<c path="map.T"/>
</c></c>
	<f a="">
		<c path="map.T"/>
		<c path="map.T"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="map.C"/>
	<c path="map.T"/>
</c></c>
</f></map>
		<mapTo public="1" params="C:T:Z" set="method" line="76" static="1"><f a="b:t:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="mapTo.C"/>
	<c path="mapTo.T"/>
</c></c>
	<c path="stx.ds.Collection">
		<c path="mapTo.C"/>
		<c path="mapTo.Z"/>
	</c>
	<f a="">
		<c path="mapTo.T"/>
		<c path="mapTo.Z"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="mapTo.C"/>
	<c path="mapTo.Z"/>
</c></c>
</f></mapTo>
		<partition public="1" params="C:T" set="method" line="80" static="1"><f a="b:filter">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="partition.C"/>
	<c path="partition.T"/>
</c></c>
	<f a="">
		<c path="partition.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.Tuple2">
	<c path="stx.ds.Collection">
		<c path="partition.C"/>
		<c path="partition.T"/>
	</c>
	<c path="stx.ds.Collection">
		<c path="partition.C"/>
		<c path="partition.T"/>
	</c>
</c></c>
</f></partition>
		<filter public="1" params="C:T" set="method" line="84" static="1"><f a="b:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="filter.C"/>
	<c path="filter.T"/>
</c></c>
	<f a="">
		<c path="filter.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="filter.C"/>
	<c path="filter.T"/>
</c></c>
</f></filter>
		<flatMap public="1" params="C:T" set="method" line="88" static="1"><f a="b:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="flatMap.C"/>
	<c path="flatMap.T"/>
</c></c>
	<f a="">
		<c path="flatMap.T"/>
		<c path="stx.ds.Collection">
			<c path="flatMap.C"/>
			<c path="flatMap.T"/>
		</c>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="flatMap.C"/>
	<c path="flatMap.T"/>
</c></c>
</f></flatMap>
		<toArray public="1" params="C:T" set="method" line="93" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="toArray.C"/>
	<c path="toArray.T"/>
</c></c>
	<c path="stx.reactive.Signal"><c path="Array"><c path="toArray.T"/></c></c>
</f></toArray>
		<foldr public="1" params="C:T:Z" set="method" line="97" static="1"><f a="b:initial:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="foldr.C"/>
	<c path="foldr.T"/>
</c></c>
	<c path="foldr.Z"/>
	<f a=":">
		<c path="foldr.T"/>
		<c path="foldr.Z"/>
		<c path="foldr.Z"/>
	</f>
	<c path="stx.reactive.Signal"><c path="foldr.Z"/></c>
</f></foldr>
		<foldl public="1" params="C:T:Z" set="method" line="101" static="1"><f a="b:initial:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="foldl.C"/>
	<c path="foldl.T"/>
</c></c>
	<c path="foldl.Z"/>
	<f a=":">
		<c path="foldl.Z"/>
		<c path="foldl.T"/>
		<c path="foldl.Z"/>
	</f>
	<c path="stx.reactive.Signal"><c path="foldl.Z"/></c>
</f></foldl>
		<scanl public="1" params="C:T" set="method" line="105" static="1"><f a="b:initial:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="scanl.C"/>
	<c path="scanl.T"/>
</c></c>
	<c path="scanl.T"/>
	<f a=":">
		<c path="scanl.T"/>
		<c path="scanl.T"/>
		<c path="scanl.T"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="scanl.C"/>
	<c path="scanl.T"/>
</c></c>
</f></scanl>
		<scanr public="1" params="C:T" set="method" line="109" static="1"><f a="b:initial:f">
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="scanr.C"/>
	<c path="scanr.T"/>
</c></c>
	<c path="scanr.T"/>
	<f a=":">
		<c path="scanr.T"/>
		<c path="scanr.T"/>
		<c path="scanr.T"/>
	</f>
	<c path="stx.reactive.Signal"><c path="stx.ds.Collection">
	<c path="scanr.C"/>
	<c path="scanr.T"/>
</c></c>
</f></scanr>
		<new set="method" line="28"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.SignalFloat" params="" file="src/main/haxe/stx/reactive/SignalFloat.hx">
		<plus public="1" set="method" line="23" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="Float"/>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></plus>
		<plusS public="1" set="method" line="27" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></plusS>
		<minusS public="1" set="method" line="31" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></minusS>
		<minus public="1" set="method" line="35" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="Float"/>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></minus>
		<timesS public="1" set="method" line="39" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></timesS>
		<times public="1" set="method" line="43" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="Float"/>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></times>
		<dividedByS public="1" set="method" line="47" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></dividedByS>
		<dividedBy public="1" set="method" line="51" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="Float"/>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></dividedBy>
		<abs public="1" set="method" line="55" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></abs>
		<negate public="1" set="method" line="59" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></negate>
		<floor public="1" set="method" line="63" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></floor>
		<ceil public="1" set="method" line="67" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></ceil>
		<round public="1" set="method" line="71" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></round>
		<acos public="1" set="method" line="75" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></acos>
		<asin public="1" set="method" line="79" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></asin>
		<atan public="1" set="method" line="83" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></atan>
		<atan2B public="1" set="method" line="87" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></atan2B>
		<atan2 public="1" set="method" line="91" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="Float"/>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></atan2>
		<cos public="1" set="method" line="95" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></cos>
		<exp public="1" set="method" line="99" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></exp>
		<log public="1" set="method" line="103" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></log>
		<maxS public="1" set="method" line="107" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></maxS>
		<max public="1" set="method" line="111" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="Float"/>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></max>
		<minS public="1" set="method" line="115" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></minS>
		<min public="1" set="method" line="119" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="Float"/>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></min>
		<powS public="1" set="method" line="123" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></powS>
		<pow public="1" set="method" line="127" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="Float"/>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></pow>
		<sin public="1" set="method" line="131" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></sin>
		<sqrt public="1" set="method" line="135" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></sqrt>
		<tan public="1" set="method" line="139" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Float"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></tan>
		<new set="method" line="21"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.SignalInt" params="" file="src/main/haxe/stx/reactive/SignalInt.hx">
		<plus public="1" set="method" line="23" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="Int"/>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></plus>
		<plusS public="1" set="method" line="27" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></plusS>
		<minusS public="1" set="method" line="31" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></minusS>
		<minus public="1" set="method" line="35" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="Int"/>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></minus>
		<timesS public="1" set="method" line="39" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></timesS>
		<times public="1" set="method" line="43" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="Int"/>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></times>
		<modS public="1" set="method" line="47" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></modS>
		<mod public="1" set="method" line="51" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="Int"/>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></mod>
		<dividedByS public="1" set="method" line="55" static="1"><f a="b1:b2">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></dividedByS>
		<dividedBy public="1" set="method" line="59" static="1"><f a="b:value">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="Int"/>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></dividedBy>
		<abs public="1" set="method" line="63" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></abs>
		<negate public="1" set="method" line="67" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Int"/></c>
</f></negate>
		<toFloat public="1" set="method" line="71" static="1"><f a="b">
	<c path="stx.reactive.Signal"><c path="Int"/></c>
	<c path="stx.reactive.Signal"><c path="Float"/></c>
</f></toFloat>
		<new set="method" line="21"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.SignalSignal" params="" file="src/main/haxe/stx/reactive/SignalSignal.hx">
		<switchS public="1" params="T" set="method" line="32" static="1">
			<f a="signal">
				<c path="stx.reactive.Signal"><c path="stx.reactive.Signal"><c path="switchS.T"/></c></c>
				<c path="stx.reactive.Signal"><c path="switchS.T"/></c>
			</f>
			<haxe_doc>
     * Converts an Signal of Signals into
     * a single Signal, whose values represent 
     * those of the last Signal to have an Event.
     *
     * @param   streams     The Signal of 
     *                      Signals to be
     *                      flattened.
     </haxe_doc>
		</switchS>
		<join public="1" params="T" set="method" line="45" static="1">
			<f a="signal">
				<c path="stx.reactive.Signal"><c path="stx.reactive.Signal"><c path="join.T"/></c></c>
				<c path="stx.reactive.Signal"><c path="join.T"/></c>
			</f>
			<haxe_doc>
     * Converts an Signal of Signals into
     * a single Signal, whose values represent 
     * those of the last Signal to have an Event.
     *
     * @param   streams     The Signal of 
     *                      Signals to be
     *                      flattened.
     </haxe_doc>
		</join>
		<flatten public="1" params="T" set="method" line="58" static="1">
			<f a="signal">
				<c path="stx.reactive.Signal"><c path="stx.reactive.Signal"><c path="flatten.T"/></c></c>
				<c path="stx.reactive.Signal"><c path="flatten.T"/></c>
			</f>
			<haxe_doc>
     * Converts an Signal of Signals into
     * a single Signal, whose values represent 
     * those of the last Signal to have an Event.
     *
     * @param   streams     The Signal of 
     *                      Signals to be
     *                      flattened.
     </haxe_doc>
		</flatten>
		<new set="method" line="21"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.Signals" params="" file="src/main/haxe/stx/reactive/Signals.hx">
		<constant public="1" params="T" set="method" line="29" static="1"><f a="value">
	<c path="constant.T"/>
	<c path="stx.reactive.Signal"><c path="constant.T"/></c>
</f></constant>
		<cond public="1" params="T" set="method" line="50" static="1">
			<f a="conditions:elseS">
				<t path="Iterable"><c path="stx.Tuple2">
	<c path="stx.reactive.Signal"><e path="Bool"/></c>
	<c path="stx.reactive.Signal"><c path="cond.T"/></c>
</c></t>
				<c path="stx.reactive.Signal"><c path="cond.T"/></c>
				<c path="stx.reactive.Signal"><c path="cond.T"/></c>
			</f>
			<haxe_doc>
     * Switches off a supplied Bool Signal, returning
     * an 'ifTrue' Signal if true or a 'ifFalse' 
     * Signal if false.
     * 
     *
     * @param conditions    An Iterable of Tuple2s, composed of a
     *                      true/false Signals and an 'if true' 
     *                      Signal that will be returned if 
     *                      Tuple._1 == 'true.'
     *
     * @param elseS         The Signal to return if Tuple._1
     *                      == false.
     *
     * @return              An 'ifTrue' Signal if Tuple._1
     *                      == true, else an 'ifFalse' Signal.
     </haxe_doc>
		</cond>
		<zipN public="1" params="T" set="method" line="63" static="1">
			<f a="signals">
				<t path="Iterable"><c path="stx.reactive.Signal"><c path="zipN.T"/></c></t>
				<c path="stx.reactive.Signal"><t path="Iterable"><c path="zipN.T"/></t></c>
			</f>
			<haxe_doc>
     * Zips together the specified Signals.
     *
     *@param    signals   An Iterable of the 
     *                      Signals to be zipped.
     </haxe_doc>
		</zipN>
		<sample public="1" set="method" line="82" static="1">
			<f a="time">
				<c path="Int"/>
				<c path="stx.reactive.Signal"><c path="Int"/></c>
			</f>
			<haxe_doc>
     * Returns the time at a specified time step interval.
     *
     * @param time      The interval at which to sample time.
     </haxe_doc>
		</sample>
		<sampleS public="1" set="method" line="89" static="1">
			<f a="time">
				<c path="stx.reactive.Signal"><c path="Int"/></c>
				<c path="stx.reactive.Signal"><c path="Int"/></c>
			</f>
			<haxe_doc>
     * @param time      The interval at which to sample time.
     </haxe_doc>
		</sampleS>
		<new set="method" line="27"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.StreamBool" params="" file="src/main/haxe/stx/reactive/StreamBool.hx">
		<not public="1" set="method" line="30" static="1">
			<f a="stream">
				<c path="stx.reactive.Stream"><e path="Bool"/></c>
				<c path="stx.reactive.Stream"><e path="Bool"/></c>
			</f>
			<haxe_doc>
     * Returns a stream with the Bool of each value mapped to the
     * opposite of the original stream.
     </haxe_doc>
		</not>
		<ifTrue public="1" params="T" set="method" line="53" static="1">
			<f a="stream:thenE:elseE">
				<c path="stx.reactive.Stream"><e path="Bool"/></c>
				<c path="stx.reactive.Stream"><c path="ifTrue.T"/></c>
				<c path="stx.reactive.Stream"><c path="ifTrue.T"/></c>
				<c path="stx.reactive.Stream"><c path="ifTrue.T"/></c>
			</f>
			<haxe_doc><![CDATA[
     * Switches off of an Stream of Bools, returning
     * either a thenE Stream<T> when true or an elseE 
     * when falseStream<T>.
     * 
     *
     * @param stream        An Stream of Bools that will 
     *                      be used to determine which 
     *                      Stream to return.
     *
     * @param thenE         The Stream that will be returned 
     *                      if stream == true;
     *
     * @param elseE         The Stream that will be returned 
      *                      if stream == false;
     *
     * @return              If an event from stream == true
     *                      stream thenE, else stream elseE
     ]]></haxe_doc>
		</ifTrue>
		<and public="1" set="method" line="100" static="1">
			<f a="streams">
				<t path="Iterable"><c path="stx.reactive.Stream"><e path="Bool"/></c></t>
				<c path="stx.reactive.Stream"><e path="Bool"/></c>
			</f>
			<haxe_doc><![CDATA[
     * Returns an Stream, the events of which are either
     * true or false, depending on whether or not the supplied 
     * Iterable<Stream<Bool>>'s values are all true for a 
     * given time step.
     *
     * @param streams       An Iterable of the Streams to 
     *                      be evaluated
     *
     * @return              An Stream of Bools, where each 
     *                      Bool event represents whether or not 
     *                      all events in the supplied 
     *                      Iterable<Stream<Bool>> are true 
     *                      on a given time step.
     ]]></haxe_doc>
		</and>
		<or public="1" set="method" line="132" static="1">
			<f a="streams">
				<t path="Iterable"><c path="stx.reactive.Stream"><e path="Bool"/></c></t>
				<c path="stx.reactive.Stream"><e path="Bool"/></c>
			</f>
			<haxe_doc><![CDATA[
     * Returns an Stream, the events of which are either
     * true or false, depending on whether or not any of the 
     * values in the supplied Iterable<Stream<Bool>> 
     * are all true for a given time step.
     *
     * @param streams       An Iterable of the Streams to 
     *                      be evaluated
     *
     * @return              An Stream of Bools, where each 
     *                      Bool event represents whether or not 
     *                      any events in the supplied 
     *                      Iterable<Stream<Bool>> are true 
     *                      on a given time step.
     ]]></haxe_doc>
		</or>
		<new set="method" line="24"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.StreamStream" params="" file="src/main/haxe/stx/reactive/StreamStream.hx">
		<switchE public="1" params="T" set="method" line="32" static="1">
			<f a="streams">
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream"><c path="switchE.T"/></c></c>
				<c path="stx.reactive.Stream"><c path="switchE.T"/></c>
			</f>
			<haxe_doc>
     * Converts an Stream of Streams into
     * a single Stream, whose events represent 
     * those of the last Stream to have an Event.
     *
     * @param   streams     The Stream of 
     *                      Streams to be
     *                      flattened.
     </haxe_doc>
		</switchE>
		<join public="1" params="T" set="method" line="45" static="1">
			<f a="stream">
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream"><c path="join.T"/></c></c>
				<c path="stx.reactive.Stream"><c path="join.T"/></c>
			</f>
			<haxe_doc>
     * Converts an Stream of Streams into
     * a single Stream, whose events represent 
     * those of the last Stream to have an Event.
     *
     * @param   streams     The Stream of 
     *                      Streams to be
     *                      flattened.
     </haxe_doc>
		</join>
		<flatten public="1" params="T" set="method" line="58" static="1">
			<f a="stream">
				<c path="stx.reactive.Stream"><c path="stx.reactive.Stream"><c path="flatten.T"/></c></c>
				<c path="stx.reactive.Stream"><c path="flatten.T"/></c>
			</f>
			<haxe_doc>
     * Converts an Stream of Streams into
     * a single Stream, whose events represent 
     * those of the last Stream to have an Event.
     *
     * @param   streams     The Stream of 
     *                      Streams to be
     *                      flattened.
     </haxe_doc>
		</flatten>
		<new set="method" line="21"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.reactive.Streams" params="" file="src/main/haxe/stx/reactive/Streams.hx">
		<create public="1" params="I:O" set="method" line="40" static="1">
			<f a="updater:?sources">
				<f a="">
					<c path="stx.reactive.Pulse"><c path="create.I"/></c>
					<e path="stx.reactive.Propagation"><c path="create.O"/></e>
				</f>
				<t path="Iterable"><c path="stx.reactive.Stream"><c path="create.I"/></c></t>
				<c path="stx.reactive.Stream"><c path="create.O"/></c>
			</f>
			<haxe_doc>
     * Creates a new stream with the specified updater and optional sources.
     *
     * @param updater   The updater.
     * @param sources   (Optional) The sources.
     *
     </haxe_doc>
		</create>
		<identity public="1" params="T" set="method" line="50" static="1">
			<f a="?sources">
				<t path="Iterable"><c path="stx.reactive.Stream"><c path="identity.T"/></c></t>
				<c path="stx.reactive.Stream"><c path="identity.T"/></c>
			</f>
			<haxe_doc>
     * Creates a new stream that merely propagates all pulses it receives.
     *
     * @param sources
     </haxe_doc>
		</identity>
		<zero public="1" params="T" set="method" line="59" static="1">
			<f a=""><c path="stx.reactive.Stream"><c path="zero.T"/></c></f>
			<haxe_doc>
     * Creates an event stream that will never have any events. Calling 
     * sendEvent() on such a stream will throw an exception.
     </haxe_doc>
		</zero>
		<one public="1" params="T" set="method" line="67" static="1">
			<f a="val">
				<c path="one.T"/>
				<c path="stx.reactive.Stream"><c path="one.T"/></c>
			</f>
			<haxe_doc>
     * Creates an event stream that will send a single value.
     </haxe_doc>
		</one>
		<merge public="1" params="T" set="method" line="91" static="1">
			<f a="streams">
				<t path="Iterable"><c path="stx.reactive.Stream"><c path="merge.T"/></c></t>
				<c path="stx.reactive.Stream"><c path="merge.T"/></c>
			</f>
			<haxe_doc>
     * Merges the specified streams, or returns a zero stream if there are no 
     * streams.
     </haxe_doc>
		</merge>
		<constant public="1" params="I:O" set="method" line="103" static="1">
			<f a="value:?sources">
				<c path="constant.O"/>
				<t path="Iterable"><c path="stx.reactive.Stream"><c path="constant.I"/></c></t>
				<c path="stx.reactive.Stream"><c path="constant.O"/></c>
			</f>
			<haxe_doc>
     * Retrieves a constant stream. If sources are specified, events from the
     * sources will be mapped to the constant.
     *
     * @param value     The constant.
     * @param sources   (Optional) Source streams.
     </haxe_doc>
		</constant>
		<receiver public="1" set="method" line="116" static="1">
			<f a=""><c path="stx.reactive.Stream"><unknown/></c></f>
			<haxe_doc>
     * Creates a "receiver" stream whose sole purpose is to be used in 
     * combination with sendEvent().
     </haxe_doc>
		</receiver>
		<cond public="1" params="T" set="method" line="134" static="1">
			<f a="conditions">
				<t path="Iterable"><c path="stx.Tuple2">
	<c path="stx.reactive.Stream"><e path="Bool"/></c>
	<c path="stx.reactive.Stream"><c path="cond.T"/></c>
</c></t>
				<c path="stx.reactive.Stream"><c path="cond.T"/></c>
			</f>
			<haxe_doc><![CDATA[
     * Switches off of an Stream of Bools, returning
     * the specified Stream<T> when true
     * 
     *
     * @param conditions    An Iterable of Tuple2s, composed of a
     *                      true/false Stream and an 'if true' 
     *                      Stream that will be returned if 
     *                      Tuple._1 == 'true.'
     *
     * @return              If 'conditions' contains aTuple2._1 
     *                      == 'true', Stream<T> else a
     *                      zero Stream.
     ]]></haxe_doc>
		</cond>
		<timer public="1" set="method" line="148" static="1">
			<f a="time">
				<c path="Int"/>
				<c path="stx.reactive.Stream"><c path="Int"/></c>
			</f>
			<haxe_doc>
     * Creates a stream of time events, spaced out by the specified number of
     * milliseconds.
     *
     * @param time The number of milliseconds.
     </haxe_doc>
		</timer>
		<timerS public="1" set="method" line="158" static="1">
			<f a="time">
				<c path="stx.reactive.Signal"><c path="Int"/></c>
				<c path="stx.reactive.Stream"><c path="Int"/></c>
			</f>
			<haxe_doc>
     * Creates a stream of time events, spaced out by the specified number of
     * milliseconds.
     *
     * @param time The number of milliseconds.
     </haxe_doc>
		</timerS>
		<zipN public="1" params="T" set="method" line="187" static="1">
			<f a="streams">
				<t path="Iterable"><c path="stx.reactive.Stream"><c path="zipN.T"/></c></t>
				<c path="stx.reactive.Stream"><t path="Iterable"><c path="zipN.T"/></t></c>
			</f>
			<haxe_doc>
     * Zips together the specified streams.
     </haxe_doc>
		</zipN>
		<randomS public="1" set="method" line="226" static="1">
			<f a="time">
				<c path="stx.reactive.Signal"><c path="Int"/></c>
				<c path="stx.reactive.Stream"><c path="Float"/></c>
			</f>
			<haxe_doc>
     * Creates a stream of random number events, separated by the specified 
     * number of milliseconds.
     </haxe_doc>
		</randomS>
		<random public="1" set="method" line="234" static="1">
			<f a="time">
				<c path="Int"/>
				<c path="stx.reactive.Stream"><c path="Float"/></c>
			</f>
			<haxe_doc>
     * Creates a stream of random number events, separated by the specified 
     * number of milliseconds.
     </haxe_doc>
		</random>
		<new set="method" line="31"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.rtti.RTypes" params="" file="src/main/haxe/stx/rtti/RTypes.hx">
		<typetree public="1" set="method" line="15" static="1"><f a="type">
	<c path="Class"><c path="haxe.rtti.Infos"/></c>
	<e path="haxe.rtti.TypeTree"/>
</f></typetree>
		<fields public="1" set="method" line="20" static="1"><f a="type">
	<c path="Class"><c path="haxe.rtti.Infos"/></c>
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
</f></fields>
		<ancestors public="1" set="method" line="28" static="1"><f a="v:?a">
	<t path="haxe.rtti.Classdef"/>
	<c path="Array"><t path="haxe.rtti.Classdef"/></c>
	<c path="Array"><t path="haxe.rtti.Classdef"/></c>
</f></ancestors>
		<haxe_doc>
 * ...
 * @author 0b1kn00b
 </haxe_doc>
	</class>
	<class path="stx.test.Assert" params="" file="src/main/haxe/stx/test/Assert.hx">
		<results public="1" static="1">
			<c path="List"><e path="stx.test.Assertation"/></c>
			<haxe_doc>
  * A stack of results for the current testing workflow. It is used internally
  * by other classes of the utest library.
  </haxe_doc>
		</results>
		<that public="1" params="T" set="method" line="57" static="1">
			<f a="obj:cond:?msg:?pos">
				<c path="that.T"/>
				<t path="stx.test.MustMatcher"><c path="that.T"/></t>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
   * Asserts that the specified condition holds.
   * <pre>
   * Assert.that(2, Must.equal(1).or(Must.beNull())); // Fails with: 'Expected: ((x == 1) || (x == null)), Found: x == 2'
   * </pre>
   ]]></haxe_doc>
		</that>
		<isTrue public="1" set="method" line="71" static="1">
			<f a="cond:?msg:?pos">
				<e path="Bool"/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
  * Asserts successfully when the condition is true.
  * @param cond: The condition to test
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  </haxe_doc>
		</isTrue>
		<isFalse public="1" set="method" line="96" static="1">
			<f a="value:?msg:?pos">
				<e path="Bool"/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
  * Asserts successfully when the condition is false.
  * @param cond: The condition to test
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  </haxe_doc>
		</isFalse>
		<isNull public="1" set="method" line="108" static="1">
			<f a="value:?msg:?pos">
				<d/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
  * Asserts successfully when the value is null.
  * @param value: The value to test
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  </haxe_doc>
		</isNull>
		<notNull public="1" set="method" line="120" static="1">
			<f a="value:?msg:?pos">
				<d/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
  * Asserts successfully when the value is not null.
  * @param value: The value to test
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  </haxe_doc>
		</notNull>
		<is public="1" set="method" line="133" static="1">
			<f a="value:type:?msg:?pos">
				<d/>
				<d/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
  * Asserts successfully when the 'value' parameter is of the of the passed type 'type'.
  * @param value: The value to test
  * @param type: The type to test against
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  </haxe_doc>
		</is>
		<notEquals public="1" set="method" line="149" static="1">
			<f a="expected:value:?msg:?pos">
				<d/>
				<d/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[
  * Asserts successfully when the value parameter is not the same as the expected one.
  * <pre>
  * Assert.notEquals(10, age);
  * </pre>
  * @param expected: The expected value to check against
  * @param value: The value to test
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  ]]></haxe_doc>
		</notEquals>
		<equals public="1" params="T" set="method" line="165" static="1">
			<f a="expected:value:?equal:?msg:?pos">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<t path="stx.EqualFunction"><c path="equals.T"/></t>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[
  * Asserts successfully when the value parameter is equal to the expected one.
  * <pre>
  * Assert.equals(10, age);
  * </pre>
  * @param expected: The expected value to check against
  * @param value: The value to test
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  ]]></haxe_doc>
		</equals>
		<matches public="1" set="method" line="183" static="1">
			<f a="pattern:value:?msg:?pos">
				<c path="EReg"/>
				<d/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[
  * Asserts successfully when the value parameter does match against the passed EReg instance.
  * <pre>
  * Assert.match(~/x/i, "haXe");
  * </pre>
  * @param pattern: The pattern to match against
  * @param value: The value to test
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  ]]></haxe_doc>
		</matches>
		<floatEquals public="1" set="method" line="201" static="1">
			<f a="expected:value:?approx:?msg:?pos">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[
  * Same as Assert.equals but considering an approximation error.
  * <pre>
  * Assert.floatEquals(Math.PI, value);
  * </pre>
  * @param expected: The expected value to check against
  * @param value: The value to test
  * @param approx: The approximation tollerance. Default is 1e-5
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  * @:todo test the approximation argument
  ]]></haxe_doc>
		</floatEquals>
		<getTypeName set="method" line="215" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></getTypeName>
		<isIterable set="method" line="230" static="1"><f a="v:isAnonym">
	<d/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></isIterable>
		<isIterator set="method" line="236" static="1"><f a="v:isAnonym">
	<d/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></isIterator>
		<sameAs set="method" line="242" static="1"><f a="expected:value:status">
	<d/>
	<d/>
	<t path="stx.test._Assert.LikeStatus"/>
	<e path="Bool"/>
</f></sameAs>
		<q set="method" line="496" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></q>
		<looksLike public="1" set="method" line="520" static="1">
			<f a="expected:value:?recursive:?msg:?pos">
				<d/>
				<d/>
				<e path="Bool"/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[
  * Check that value is an object with the same fields and values found in expected.
  * The default behavior is to check nested objects in fields recursively.
  * <pre>
  * Assert.same({ name : "utest"}, ob);
  * </pre>
  * @param expected: The expected value to check against
  * @param value: The value to test
  * @param recursive: States whether or not the test will apply also to sub-objects.
  * Defaults to true
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  ]]></haxe_doc>
		</looksLike>
		<throwsException public="1" set="method" line="546" static="1">
			<f a="method:?type:?msg:?pos">
				<f a=""><e path="Void"/></f>
				<c path="Class"><d/></c>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[
  * It is used to test an application that under certain circumstances must
  * react throwing an error. This assert guarantees that the error is of the
  * correct type (or Dynamic if non is specified).
  * <pre>
  * Assert.throwsException(function() { throw "Error!"; }, String);
  * </pre>
  * @param method: A method that generates the exception.
  * @param type: The type of the expected error. Defaults to Dynamic (catch all).
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  * @:todo test the optional type parameter
  ]]></haxe_doc>
		</throwsException>
		<equalsOneOf public="1" params="T" set="method" line="569" static="1">
			<f a="value:possibilities:?msg:?pos">
				<c path="equalsOneOf.T"/>
				<c path="Array"><c path="equalsOneOf.T"/></c>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
  * Checks that the test value matches at least one of the possibilities.
  * @param possibility: An array of mossible matches
  * @param value: The value to test
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  </haxe_doc>
		</equalsOneOf>
		<contains public="1" params="T" set="method" line="585" static="1">
			<f a="values:match:?msg:?pos">
				<t path="Iterable"><c path="contains.T"/></t>
				<c path="contains.T"/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
  * Checks that the test array contains the match parameter.
  * @param match: The element that must be included in the tested array
  * @param values: The values to test
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  </haxe_doc>
		</contains>
		<notContains public="1" params="T" set="method" line="602" static="1">
			<f a="values:match:?msg:?pos">
				<t path="Iterable"><c path="notContains.T"/></t>
				<c path="notContains.T"/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
  * Checks that the test array does not contain the match parameter.
  * @param match: The element that must NOT be included in the tested array
  * @param values: The values to test
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  </haxe_doc>
		</notContains>
		<stringContains public="1" set="method" line="618" static="1">
			<f a="match:value:?msg:?pos">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
   * Checks that the expected values is contained in value.
   * @param match: the string value that must be contained in value
   * @param value: the value to test
   * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
   </haxe_doc>
		</stringContains>
		<stringSequence public="1" set="method" line="627" static="1"><f a="sequence:value:?msg:?pos">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Bool"/>
</f></stringSequence>
		<fail public="1" set="method" line="665" static="1">
			<f a="?msg:?pos">
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
  * Forces a failure.
  * @param msg: An optional error message. If not passed a default one will be used
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  </haxe_doc>
		</fail>
		<warn public="1" set="method" line="674" static="1">
			<f a="msg">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
  * Creates a warning message.
  * @param msg: A mandatory message that justifies the warning.
  * @param pos: Code position where the Assert call has been executed. Don't fill it
  * unless you know what you are doing.
  </haxe_doc>
		</warn>
		<createAsync public="1" set="dynamic" line="689" static="1">
			<f a="f:?timeout">
				<f a=""><e path="Void"/></f>
				<c path="Int"/>
				<f a=""><e path="Void"/></f>
			</f>
			<haxe_doc><![CDATA[
  * Creates an asynchronous context for test execution. Assertions should be included
  * in the passed function.
  * <pre>
  * public function assertAsync() {
  *   var async = Assert.createAsync(function() Assert.isTrue(true));
  *   haxe.Timer.delay(async, 50);
  * }
  * @param f: A function that contains other Assert tests
  * @param timeout: Optional timeout value in milliseconds.
  ]]></haxe_doc>
		</createAsync>
		<delivered public="1" params="T" set="method" line="698" static="1">
			<f a="future:assertions:?timeout">
				<c path="stx.Future"><c path="delivered.T"/></c>
				<f a="">
					<c path="delivered.T"/>
					<e path="Void"/>
				</f>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc> Asserts the future is delivered within the specified time frame. All 
   * assertions relating to the deliverable should be contained within the 
   * passed in function.
   </haxe_doc>
		</delivered>
		<canceled public="1" params="T" set="method" line="716" static="1">
			<f a="future:assertions:?timeout">
				<c path="stx.Future"><c path="canceled.T"/></c>
				<f a=""><e path="Void"/></f>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc> Asserts the future is canceled within the specified time frame. All 
   * assertions should be contained within the passed in function.
   </haxe_doc>
		</canceled>
		<notDelivered public="1" params="T" set="method" line="722" static="1">
			<f a="future:?timeout:?pos">
				<c path="stx.Future"><c path="notDelivered.T"/></c>
				<c path="Int"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc> Asserts the future is not delivered within the specified time frame.
   </haxe_doc>
		</notDelivered>
		<createEvent public="1" params="EventArg" set="dynamic" line="756" static="1">
			<f a="f:?timeout">
				<f a="">
					<c path="createEvent.EventArg"/>
					<e path="Void"/>
				</f>
				<c path="Int"/>
				<f a="e">
					<c path="createEvent.EventArg"/>
					<e path="Void"/>
				</f>
			</f>
			<haxe_doc>
  * Creates an asynchronous context for test execution of an event like method.
  * Assertions should be included in the passed function.
  * It works the same way as Assert.assertAsync() but accepts a function with one
  * argument (usually some event data) instead of a function with no arguments
  * @param f: A function that contains other Assert tests
  * @param timeout: Optional timeout value in milliseconds.
  </haxe_doc>
		</createEvent>
		<typeToString set="method" line="760" static="1"><f a="t">
	<d/>
	<c path="String"/>
</f></typeToString>
		<haxe_doc><![CDATA[
* This class contains only static members used to perform assertations inside a test method.
* It's use is straight forward:
* <pre>
* public function testObvious() {
*   Assert.equals(1, 0); // fails
*   Assert.isFalse(1 == 1, "guess what?"); // fails and returns the passed message
*   Assert.isTrue(true); // successfull
* }
* </pre>
]]></haxe_doc>
	</class>
	<typedef path="stx.test._Assert.LikeStatus" params="" file="src/main/haxe/stx/test/Assert.hx" private="1" module="stx.test.Assert"><a>
	<recursive><e path="Bool"/></recursive>
	<path><c path="String"/></path>
	<error><c path="String"/></error>
</a></typedef>
	<enum path="stx.test.Assertation" params="" file="src/main/haxe/stx/test/Assertation.hx">
		<Warning a="msg">
			<c path="String"/>
			<haxe_doc>
  * A warning state. This can be declared explicitely by an Assert call
  * or can denote a test method that contains no assertions at all.
  * @param msg: The reason behind the warning
  </haxe_doc>
		</Warning>
		<TimeoutError a="missedAsyncs:stack">
			<c path="Int"/>
			<c path="Array"><e path="haxe.StackItem"/></c>
			<haxe_doc>
  * The asynchronous phase of a test has gone into timeout.
  * @param missedAsyncs: The number of asynchronous calls that was expected
  * to be performed before the timeout.
  </haxe_doc>
		</TimeoutError>
		<TeardownError a="e:stack">
			<d/>
			<c path="Array"><e path="haxe.StackItem"/></c>
			<haxe_doc>
  * An error has occurred during the Teardown phase of the test.
  * @param e: The captured error/exception
  </haxe_doc>
		</TeardownError>
		<Success a="pos">
			<t path="haxe.PosInfos"/>
			<haxe_doc>
  * Assertion is succesful
  * @param pos: Code position where the Assert call has been executed
  </haxe_doc>
		</Success>
		<SetupError a="e:stack">
			<d/>
			<c path="Array"><e path="haxe.StackItem"/></c>
			<haxe_doc>
  * An error has occurred during the Setup phase of the test. It prevents
  * the test to be run.
  * @param e: The captured error/exception
  </haxe_doc>
		</SetupError>
		<Failure a="msg:pos">
			<c path="String"/>
			<t path="haxe.PosInfos"/>
			<haxe_doc>
  * Assertion is a falure. This does not denote an error in the assertion
  * code but that the testing condition has failed for some reason.
  * Ei.: Assert.isTrue(1 == 0);
  * @param msg: An error message containing the reasons for the failure.
  * @param pos: Code position where the Assert call has been executed
  </haxe_doc>
		</Failure>
		<Error a="e:stack">
			<d/>
			<c path="Array"><e path="haxe.StackItem"/></c>
			<haxe_doc>
  * An error has occurred during the execution of the test that prevents
  * futher assertion to be tested.
  * @param e: The captured error/exception
  </haxe_doc>
		</Error>
		<AsyncError a="e:stack">
			<d/>
			<c path="Array"><e path="haxe.StackItem"/></c>
			<haxe_doc>
  * An error has occurred during an asynchronous test.
  * @param e: The captured error/exception
  </haxe_doc>
		</AsyncError>
		<haxe_doc>
* Enumerates the states available as a result of
* invoking one of the static methods of @see {@link utest.Assert}.
</haxe_doc>
	</enum>
	<enum path="stx.test._Dispatcher.EventException" params="" file="src/main/haxe/stx/test/Dispatcher.hx" private="1" module="stx.test.Dispatcher"><StopPropagation/></enum>
	<class path="stx.test.Dispatcher" params="T" file="src/main/haxe/stx/test/Dispatcher.hx">
		<stop public="1" set="method" line="65" static="1"><f a=""><e path="Void"/></f></stop>
		<handlers><c path="Array"><f a="">
	<c path="stx.test.Dispatcher.T"/>
	<e path="Void"/>
</f></c></handlers>
		<add public="1" set="method" line="33"><f a="h">
	<f a="">
		<c path="stx.test.Dispatcher.T"/>
		<e path="Void"/>
	</f>
	<f a="">
		<c path="stx.test.Dispatcher.T"/>
		<e path="Void"/>
	</f>
</f></add>
		<remove public="1" set="method" line="38"><f a="h">
	<f a="">
		<c path="stx.test.Dispatcher.T"/>
		<e path="Void"/>
	</f>
	<f a="">
		<c path="stx.test.Dispatcher.T"/>
		<e path="Void"/>
	</f>
</f></remove>
		<clear public="1" set="method" line="45"><f a=""><e path="Void"/></f></clear>
		<dispatch public="1" set="method" line="49"><f a="e">
	<c path="stx.test.Dispatcher.T"/>
	<e path="Bool"/>
</f></dispatch>
		<has public="1" set="method" line="61"><f a=""><e path="Bool"/></f></has>
		<new public="1" set="method" line="29"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
* @:todo add documentation
</haxe_doc>
	</class>
	<class path="stx.test.Notifier" params="" file="src/main/haxe/stx/test/Dispatcher.hx" module="stx.test.Dispatcher">
		<stop public="1" set="method" line="110" static="1"><f a=""><e path="Void"/></f></stop>
		<handlers><c path="Array"><f a=""><e path="Void"/></f></c></handlers>
		<add public="1" set="method" line="78"><f a="h">
	<f a=""><e path="Void"/></f>
	<f a=""><e path="Void"/></f>
</f></add>
		<remove public="1" set="method" line="83"><f a="h">
	<f a=""><e path="Void"/></f>
	<f a=""><e path="Void"/></f>
</f></remove>
		<clear public="1" set="method" line="90"><f a=""><e path="Void"/></f></clear>
		<dispatch public="1" set="method" line="94"><f a=""><e path="Bool"/></f></dispatch>
		<has public="1" set="method" line="106"><f a=""><e path="Bool"/></f></has>
		<new public="1" set="method" line="74"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.test.MustMatcherExtensions" params="" file="src/main/haxe/stx/test/MustMatcherExtensions.hx">
		<negate public="1" params="T" set="method" line="25" static="1"><f a="c">
	<t path="stx.test.MustMatcher"><c path="negate.T"/></t>
	<t path="stx.test.MustMatcher"><c path="negate.T"/></t>
</f></negate>
		<or public="1" params="T" set="method" line="33" static="1"><f a="c1:c2">
	<t path="stx.test.MustMatcher"><c path="or.T"/></t>
	<t path="stx.test.MustMatcher"><c path="or.T"/></t>
	<t path="stx.test.MustMatcher"><c path="or.T"/></t>
</f></or>
		<and public="1" params="T" set="method" line="46" static="1"><f a="c1:c2">
	<t path="stx.test.MustMatcher"><c path="and.T"/></t>
	<t path="stx.test.MustMatcher"><c path="and.T"/></t>
	<t path="stx.test.MustMatcher"><c path="and.T"/></t>
</f></and>
	</class>
	<typedef path="stx.test.MatchResult" params="" file="src/main/haxe/stx/test/MustMatchers.hx" module="stx.test.MustMatchers"><a>
	<negation><c path="String"/></negation>
	<assertion><c path="String"/></assertion>
</a></typedef>
	<typedef path="stx.test.MustMatcher" params="T" file="src/main/haxe/stx/test/MustMatchers.hx" module="stx.test.MustMatchers"><f a="">
	<c path="stx.test.MustMatcher.T"/>
	<e path="stx.Either">
		<t path="stx.test.MatchResult"/>
		<t path="stx.test.MatchResult"/>
	</e>
</f></typedef>
	<class path="stx.test.Must" params="" file="src/main/haxe/stx/test/MustMatchers.hx" module="stx.test.MustMatchers">
		<equal public="1" params="T" set="method" line="32" static="1"><f a="expected:?equal">
	<c path="equal.T"/>
	<t path="stx.EqualFunction"><c path="equal.T"/></t>
	<t path="stx.test.MustMatcher"><c path="equal.T"/></t>
</f></equal>
		<beTrue public="1" set="method" line="50" static="1"><f a=""><t path="stx.test.MustMatcher"><e path="Bool"/></t></f></beTrue>
		<beFalse public="1" set="method" line="66" static="1"><f a=""><t path="stx.test.MustMatcher"><e path="Bool"/></t></f></beFalse>
		<beGreaterThan public="1" set="method" line="82" static="1"><f a="ref">
	<c path="Float"/>
	<t path="stx.test.MustMatcher"><c path="Float"/></t>
</f></beGreaterThan>
		<beLessThan public="1" set="method" line="98" static="1"><f a="ref">
	<c path="Float"/>
	<t path="stx.test.MustMatcher"><c path="Float"/></t>
</f></beLessThan>
		<beGreaterThanInt public="1" set="method" line="114" static="1"><f a="ref">
	<c path="Int"/>
	<t path="stx.test.MustMatcher"><c path="Int"/></t>
</f></beGreaterThanInt>
		<beLessThanInt public="1" set="method" line="130" static="1"><f a="ref">
	<c path="Int"/>
	<t path="stx.test.MustMatcher"><c path="Int"/></t>
</f></beLessThanInt>
		<haveLength public="1" params="T" set="method" line="146" static="1"><f a="length">
	<c path="Int"/>
	<t path="stx.test.MustMatcher"><t path="Iterable"><c path="haveLength.T"/></t></t>
</f></haveLength>
		<haveClass public="1" params="T" set="method" line="161" static="1"><f a="c">
	<c path="Class"><c path="haveClass.T"/></c>
	<t path="stx.test.MustMatcher"><d/></t>
</f></haveClass>
		<containElement public="1" params="C:T" set="method" line="172" static="1"><f a="element">
	<c path="containElement.T"/>
	<t path="stx.test.MustMatcher"><c path="stx.ds.Collection">
	<c path="containElement.C"/>
	<c path="containElement.T"/>
</c></t>
</f></containElement>
		<containString public="1" set="method" line="183" static="1"><f a="sub">
	<c path="String"/>
	<t path="stx.test.MustMatcher"><c path="String"/></t>
</f></containString>
		<startWithString public="1" set="method" line="194" static="1"><f a="s">
	<c path="String"/>
	<t path="stx.test.MustMatcher"><c path="String"/></t>
</f></startWithString>
		<endWithString public="1" set="method" line="205" static="1"><f a="s">
	<c path="String"/>
	<t path="stx.test.MustMatcher"><c path="String"/></t>
</f></endWithString>
		<beNull public="1" params="T" set="method" line="216" static="1"><f a=""><t path="stx.test.MustMatcher"><c path="beNull.T"/></t></f></beNull>
		<beNonNull public="1" params="T" set="method" line="227" static="1"><f a=""><t path="stx.test.MustMatcher"><c path="beNonNull.T"/></t></f></beNonNull>
	</class>
	<class path="stx.test.Runner" params="" file="src/main/haxe/stx/test/Runner.hx">
		<findMethodByName set="method" line="224" static="1"><f a="test:name">
	<d/>
	<c path="String"/>
	<f a=""><e path="Void"/></f>
</f></findMethodByName>
		<fixtures set="null"><c path="Array"><c path="stx.test.TestFixture"><d/></c></c></fixtures>
		<onProgress public="1" set="null">
			<c path="stx.test.Dispatcher"><a>
	<totals><c path="Int"/></totals>
	<result><c path="stx.test.TestResult"/></result>
	<done><c path="Int"/></done>
</a></c>
			<haxe_doc>
  * Event object that monitors the progress of the runner.
  </haxe_doc>
		</onProgress>
		<onStart public="1" set="null">
			<c path="stx.test.Dispatcher"><c path="stx.test.Runner"/></c>
			<haxe_doc>
  * Event object that monitors when the runner starts.
  </haxe_doc>
		</onStart>
		<onComplete public="1" set="null">
			<c path="stx.test.Dispatcher"><c path="stx.test.Runner"/></c>
			<haxe_doc>
  * Event object that monitors when the runner ends. This event takes into account async calls
  * performed during the tests.
  </haxe_doc>
		</onComplete>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
  * The number of fixtures registered.
  </haxe_doc>
		</length>
		<addAll public="1" set="method" line="75"><f a="tests:?prefix:?pattern">
	<t path="Iterable"><d/></t>
	<c path="String"/>
	<c path="EReg"/>
	<c path="stx.test.Runner"/>
</f></addAll>
		<add public="1" set="method" line="90">
			<f a="test:?prefix:?pattern">
				<d/>
				<c path="String"/>
				<c path="EReg"/>
				<c path="stx.test.Runner"/>
			</f>
			<haxe_doc>
  * Adds a new test case.
  * @param  test: must be a not null object
  * @param  prefix: prefix for methods that are tests (defaults to "test")
  * @param  pattern: a regular expression that discriminates the names of test
  *         functions; when set, the prefix parameter is meaningless
  </haxe_doc>
		</add>
		<addFixture public="1" set="method" line="112"><f a="fixture">
	<c path="stx.test.TestFixture"><d/></c>
	<c path="stx.test.Runner"/>
</f></addFixture>
		<addFixtures public="1" set="method" line="119"><f a="fixtures">
	<t path="Iterable"><c path="stx.test.TestFixture"><d/></c></t>
	<c path="stx.test.Runner"/>
</f></addFixtures>
		<getFixture public="1" set="method" line="125"><f a="index">
	<c path="Int"/>
	<c path="stx.test.TestFixture"><d/></c>
</f></getFixture>
		<isMethod set="method" line="129"><f a="test:name">
	<d/>
	<c path="String"/>
	<e path="Bool"/>
</f></isMethod>
		<pos><c path="Int"/></pos>
		<run public="1" set="method" line="138"><f a=""><c path="stx.test.Runner"/></f></run>
		<runNext set="method" line="146"><f a=""><e path="Void"/></f></runNext>
		<runFixture set="method" line="153"><f a="fixture">
	<c path="stx.test.TestFixture"><d/></c>
	<e path="Void"/>
</f></runFixture>
		<testComplete set="method" line="159"><f a="h">
	<c path="stx.test.TestHandler"><d/></c>
	<e path="Void"/>
</f></testComplete>
		<addBeforeAll set="method" line="164"><f a="test:f">
	<d/>
	<f a="">
		<c path="String"/>
		<f a=""><e path="Void"/></f>
	</f>
	<f a="">
		<c path="String"/>
		<f a=""><e path="Void"/></f>
	</f>
</f></addBeforeAll>
		<addAfterAll set="method" line="191"><f a="test:totalTestsHolder:f">
	<d/>
	<c path="Array"><c path="Int"/></c>
	<f a="">
		<c path="String"/>
		<f a=""><e path="Void"/></f>
	</f>
	<f a="">
		<c path="String"/>
		<f a=""><e path="Void"/></f>
	</f>
</f></addAfterAll>
		<new public="1" set="method" line="67">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
  * Instantiates a Runner onject.
  </haxe_doc>
		</new>
		<haxe_doc>
* The Runner class performs a set of tests. The tests can be added using add or addFixtures.
* Once all the tests are register they are axecuted on the run() call.
* Note that Runner does not provide any visual output. To visualize the test results use one of
* the classes in the utest.ui package.
*
* Tests can be filtered both by class, by adding a filter funcion at the end of an addAll
* and by either a prefix as the second parameter of add / addAll or a regular expression
* as the third parameter.
*
* Asynchronous tests can be performed by importing stx.test.Assert and using Assert.createAsync
* for a handler that takes no parameters, or Assert.createEvent for a handler that takes one parameter.
* Once this handler is called the test is considered complete.
</haxe_doc>
	</class>
	<class path="stx.test.TestCase" params="" file="src/main/haxe/stx/test/TestCase.hx">
		<before public="1" set="method" line="29"><f a=""><e path="Void"/></f></before>
		<after public="1" set="method" line="32"><f a=""><e path="Void"/></f></after>
		<beforeAll public="1" set="method" line="35"><f a=""><e path="Void"/></f></beforeAll>
		<afterAll public="1" set="method" line="38"><f a=""><e path="Void"/></f></afterAll>
		<not public="1" params="T" set="method" line="41"><f a="c">
	<t path="stx.test.MustMatcher"><c path="not.T"/></t>
	<t path="stx.test.MustMatcher"><c path="not.T"/></t>
</f></not>
		<assertThat public="1" params="T" set="method" line="45"><f a="obj:cond:?msg:?pos">
	<c path="assertThat.T"/>
	<t path="stx.test.MustMatcher"><c path="assertThat.T"/></t>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertThat>
		<assertTrue public="1" set="method" line="49"><f a="cond:?msg:?pos">
	<e path="Bool"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertTrue>
		<assertFalse public="1" set="method" line="53"><f a="value:?msg:?pos">
	<e path="Bool"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertFalse>
		<assertNull public="1" set="method" line="57"><f a="value:?msg:?pos">
	<d/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertNull>
		<assertNotNull public="1" set="method" line="61"><f a="value:?msg:?pos">
	<d/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertNotNull>
		<assertIs public="1" set="method" line="65"><f a="value:type:?msg:?pos">
	<d/>
	<d/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertIs>
		<assertNotEquals public="1" set="method" line="69"><f a="expected:value:?msg:?pos">
	<d/>
	<d/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertNotEquals>
		<assertEquals public="1" params="T" set="method" line="73"><f a="expected:value:?equal:?msg:?pos">
	<c path="assertEquals.T"/>
	<c path="assertEquals.T"/>
	<f a=":">
		<c path="assertEquals.T"/>
		<c path="assertEquals.T"/>
		<e path="Bool"/>
	</f>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertEquals>
		<assertMatches public="1" set="method" line="82"><f a="pattern:value:?msg:?pos">
	<c path="EReg"/>
	<d/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertMatches>
		<assertFloatEquals public="1" set="method" line="86"><f a="expected:value:?approx:?msg:?pos">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertFloatEquals>
		<assertLooksLike public="1" set="method" line="90"><f a="expected:value:?recursive:?msg:?pos">
	<a/>
	<a/>
	<e path="Bool"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertLooksLike>
		<assertThrowsException public="1" set="method" line="94"><f a="method:?type:?msg:?pos">
	<f a=""><e path="Void"/></f>
	<c path="Class"><d/></c>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertThrowsException>
		<assertEqualsOneOf public="1" params="T" set="method" line="98"><f a="value:possibilities:?msg:?pos">
	<c path="assertEqualsOneOf.T"/>
	<c path="Array"><c path="assertEqualsOneOf.T"/></c>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertEqualsOneOf>
		<assertContains public="1" params="T" set="method" line="102"><f a="values:match:?msg:?pos">
	<t path="Iterable"><c path="assertContains.T"/></t>
	<c path="assertContains.T"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertContains>
		<assertNotContains public="1" params="T" set="method" line="106"><f a="values:match:?msg:?pos">
	<t path="Iterable"><c path="assertNotContains.T"/></t>
	<c path="assertNotContains.T"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertNotContains>
		<assertStringContains public="1" set="method" line="110"><f a="match:value:?msg:?pos">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertStringContains>
		<assertStringSequence public="1" set="method" line="114"><f a="sequence:value:?msg:?pos">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertStringSequence>
		<assertDelivered public="1" params="T" set="method" line="118"><f a="future:assertions:?timeout">
	<c path="stx.Future"><c path="assertDelivered.T"/></c>
	<f a="">
		<c path="assertDelivered.T"/>
		<e path="Void"/>
	</f>
	<c path="Int"/>
	<e path="Void"/>
</f></assertDelivered>
		<assertCanceled public="1" params="T" set="method" line="122"><f a="future:assertions:?timeout">
	<c path="stx.Future"><c path="assertCanceled.T"/></c>
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<e path="Void"/>
</f></assertCanceled>
		<assertNotDelivered public="1" params="T" set="method" line="126"><f a="future:?timeout:?pos">
	<c path="stx.Future"><c path="assertNotDelivered.T"/></c>
	<c path="Int"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertNotDelivered>
		<fail public="1" set="method" line="130"><f a="?msg:?pos">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></fail>
		<warn public="1" set="method" line="134"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></warn>
		<new public="1" set="method" line="26"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.test.TestFixture" params="T" file="src/main/haxe/stx/test/TestFixture.hx">
		<target public="1" set="null"><c path="stx.test.TestFixture.T"/></target>
		<methodName public="1" set="null"><c path="String"/></methodName>
		<method public="1" set="null"><f a=""><e path="Void"/></f></method>
		<setup public="1" set="null"><c path="String"/></setup>
		<teardown public="1" set="null"><c path="String"/></teardown>
		<onTested public="1" set="null"><c path="stx.test.Dispatcher"><c path="stx.test.TestHandler"><c path="stx.test.TestFixture.T"/></c></c></onTested>
		<onTimeout public="1" set="null"><c path="stx.test.Dispatcher"><c path="stx.test.TestHandler"><c path="stx.test.TestFixture.T"/></c></c></onTimeout>
		<onComplete public="1" set="null"><c path="stx.test.Dispatcher"><c path="stx.test.TestHandler"><c path="stx.test.TestFixture.T"/></c></c></onComplete>
		<checkMethod set="method" line="44"><f a="name:arg">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></checkMethod>
		<new public="1" set="method" line="32"><f a="target:methodName:method:?setup:?teardown">
	<c path="stx.test.TestFixture.T"/>
	<c path="String"/>
	<f a=""><e path="Void"/></f>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @:todo add documentation
</haxe_doc>
	</class>
	<class path="stx.test.TestHandler" params="T" file="src/main/haxe/stx/test/TestHandler.hx">
		<POLLING_TIME get="inline" set="null" line="24" static="1"><c path="Int"/></POLLING_TIME>
		<exceptionStack set="method" line="57" static="1"><f a="?pops">
	<c path="Int"/>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></exceptionStack>
		<results public="1" set="null"><c path="List"><e path="stx.test.Assertation"/></c></results>
		<fixture public="1" set="null"><c path="stx.test.TestFixture"><c path="stx.test.TestHandler.T"/></c></fixture>
		<asyncStack><c path="List"><d/></c></asyncStack>
		<onTested public="1" set="null"><c path="stx.test.Dispatcher"><c path="stx.test.TestHandler"><c path="stx.test.TestHandler.T"/></c></c></onTested>
		<onTimeout public="1" set="null"><c path="stx.test.Dispatcher"><c path="stx.test.TestHandler"><c path="stx.test.TestHandler.T"/></c></c></onTimeout>
		<onComplete public="1" set="null"><c path="stx.test.Dispatcher"><c path="stx.test.TestHandler"><c path="stx.test.TestHandler.T"/></c></c></onComplete>
		<execute public="1" set="method" line="43"><f a=""><e path="Void"/></f></execute>
		<checkTested set="method" line="67"><f a=""><e path="Void"/></f></checkTested>
		<expireson public="1" set="null"><t path="Null"><c path="Float"/></t></expireson>
		<setTimeout public="1" set="method" line="85"><f a="timeout">
	<c path="Int"/>
	<e path="Void"/>
</f></setTimeout>
		<bindHandler set="method" line="90"><f a=""><e path="Void"/></f></bindHandler>
		<unbindHandler set="method" line="96"><f a=""><e path="Void"/></f></unbindHandler>
		<addAsync public="1" set="method" line="126">
			<f a="f:?timeout">
				<f a=""><e path="Void"/></f>
				<c path="Int"/>
				<f a=""><e path="Void"/></f>
			</f>
			<haxe_doc><![CDATA[
  * Adds a function that is called asynchronously.
  *
  * Example:
  * <pre>
  * var fixture = new TestFixture(new TestClass(), "test");
  * var handler = new TestHandler(fixture);
  * var flag = false;
  * var async = handler.addAsync(function() {
  *   flag = true;
  * }, 50);
  * handler.onTimeout.add(function(h) {
  *   trace("TIMEOUT");
  * });
  * handler.onTested.add(function(h) {
  *   trace(flag ? "OK" : "FAILED");
  * });
  * haxe.Timer.delay(function() async(), 10);
  * handler.execute();
  * </pre>
  * @param  f, the function that is called asynchrnously
  * @param  timeout, the maximum time to wait for f() (default is 250)
  * @return  returns a function closure that must be executed asynchrnously
  ]]></haxe_doc>
		</addAsync>
		<addEvent public="1" params="EventArg" set="method" line="144"><f a="f:?timeout">
	<f a="">
		<c path="addEvent.EventArg"/>
		<e path="Void"/>
	</f>
	<c path="Int"/>
	<f a="e">
		<c path="addEvent.EventArg"/>
		<e path="Void"/>
	</f>
</f></addEvent>
		<executeMethodByName set="method" line="162"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></executeMethodByName>
		<executeMethod set="method" line="171"><f a="f">
	<f a=""><e path="Void"/></f>
	<e path="Void"/>
</f></executeMethod>
		<tested set="method" line="178"><f a=""><e path="Void"/></f></tested>
		<timeout set="method" line="185"><f a=""><e path="Void"/></f></timeout>
		<completed set="method" line="191"><f a=""><e path="Void"/></f></completed>
		<new public="1" set="method" line="33"><f a="fixture">
	<c path="stx.test.TestFixture"><c path="stx.test.TestHandler.T"/></c>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @:todo add documentation
</haxe_doc>
	</class>
	<class path="stx.test.TestResult" params="" file="src/main/haxe/stx/test/TestResult.hx">
		<ofHandler public="1" set="method" line="33" static="1"><f a="handler">
	<c path="stx.test.TestHandler"><d/></c>
	<c path="stx.test.TestResult"/>
</f></ofHandler>
		<pack public="1"><c path="String"/></pack>
		<cls public="1"><c path="String"/></cls>
		<method public="1"><c path="String"/></method>
		<setup public="1"><c path="String"/></setup>
		<teardown public="1"><c path="String"/></teardown>
		<assertations public="1"><c path="List"><e path="stx.test.Assertation"/></c></assertations>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
* @:todo add documentation
</haxe_doc>
	</class>
	<class path="stx.test.mock.Mock" params="T" file="src/main/haxe/stx/test/mock/Mock.hx">
		<internal_create public="1" params="T" set="method" line="151" static="1"><f a="c">
	<c path="Class"><c path="internal_create.T"/></c>
	<c path="stx.test.mock.Mock"><c path="internal_create.T"/></c>
</f></internal_create>
		<_expects><c path="stx.ds.Map">
	<c path="String"/>
	<c path="Array"><d/></c>
</c></_expects>
		<_target><c path="stx.test.mock.Mock.T"/></_target>
		<target public="1" get="getTarget" set="null"><c path="stx.test.mock.Mock.T"/></target>
		<expect1 public="1" params="P1:R" set="method" line="37"><f a="name:f:?times">
	<c path="String"/>
	<t path="stx.Function">
		<c path="expect1.P1"/>
		<c path="expect1.R"/>
	</t>
	<c path="Int"/>
	<e path="Void"/>
</f></expect1>
		<expect2 public="1" params="P1:P2:R" set="method" line="49"><f a="name:f:?times">
	<c path="String"/>
	<t path="stx.Function2">
		<c path="expect2.P1"/>
		<c path="expect2.P2"/>
		<c path="expect2.R"/>
	</t>
	<c path="Int"/>
	<e path="Void"/>
</f></expect2>
		<expect3 public="1" params="P1:P2:P3:R" set="method" line="61"><f a="name:f:?times">
	<c path="String"/>
	<t path="stx.Function3">
		<c path="expect3.P1"/>
		<c path="expect3.P2"/>
		<c path="expect3.P3"/>
		<c path="expect3.R"/>
	</t>
	<c path="Int"/>
	<e path="Void"/>
</f></expect3>
		<expect4 public="1" params="P1:P2:P3:P4:R" set="method" line="73"><f a="name:f:?times">
	<c path="String"/>
	<t path="stx.Function4">
		<c path="expect4.P1"/>
		<c path="expect4.P2"/>
		<c path="expect4.P3"/>
		<c path="expect4.P4"/>
		<c path="expect4.R"/>
	</t>
	<c path="Int"/>
	<e path="Void"/>
</f></expect4>
		<expect5 public="1" params="P1:P2:P3:P4:P5:R" set="method" line="85"><f a="name:f:?times">
	<c path="String"/>
	<t path="stx.Function5">
		<c path="expect5.P1"/>
		<c path="expect5.P2"/>
		<c path="expect5.P3"/>
		<c path="expect5.P4"/>
		<c path="expect5.P5"/>
		<c path="expect5.R"/>
	</t>
	<c path="Int"/>
	<e path="Void"/>
</f></expect5>
		<allow1 public="1" params="P1:R" set="method" line="97"><f a="name:f">
	<c path="String"/>
	<t path="stx.Function">
		<c path="allow1.P1"/>
		<c path="allow1.R"/>
	</t>
	<e path="Void"/>
</f></allow1>
		<allow2 public="1" params="P1:P2:R" set="method" line="101"><f a="name:f">
	<c path="String"/>
	<t path="stx.Function2">
		<c path="allow2.P1"/>
		<c path="allow2.P2"/>
		<c path="allow2.R"/>
	</t>
	<e path="Void"/>
</f></allow2>
		<allow3 public="1" params="P1:P2:P3:R" set="method" line="105"><f a="name:f">
	<c path="String"/>
	<t path="stx.Function3">
		<c path="allow3.P1"/>
		<c path="allow3.P2"/>
		<c path="allow3.P3"/>
		<c path="allow3.R"/>
	</t>
	<e path="Void"/>
</f></allow3>
		<allow4 public="1" params="P1:P2:P3:P4:R" set="method" line="109"><f a="name:f">
	<c path="String"/>
	<t path="stx.Function4">
		<c path="allow4.P1"/>
		<c path="allow4.P2"/>
		<c path="allow4.P3"/>
		<c path="allow4.P4"/>
		<c path="allow4.R"/>
	</t>
	<e path="Void"/>
</f></allow4>
		<allow5 public="1" params="P1:P2:P3:P4:P5:R" set="method" line="113"><f a="name:f">
	<c path="String"/>
	<t path="stx.Function5">
		<c path="allow5.P1"/>
		<c path="allow5.P2"/>
		<c path="allow5.P3"/>
		<c path="allow5.P4"/>
		<c path="allow5.P5"/>
		<c path="allow5.R"/>
	</t>
	<e path="Void"/>
</f></allow5>
		<verifyAllExpectations public="1" set="method" line="117"><f a=""><e path="Void"/></f></verifyAllExpectations>
		<getTarget set="method" line="127"><f a=""><c path="stx.test.mock.Mock.T"/></f></getTarget>
		<internal_add set="method" line="131"><f a="name:f">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></internal_add>
		<internal_remove set="method" line="141"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></internal_remove>
		<new set="method" line="32"><f a="c">
	<c path="Class"><c path="stx.test.mock.Mock.T"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="stx.test.mock.MockTestCase" params="" file="src/main/haxe/stx/test/mock/Mock.hx" module="stx.test.mock.Mock">
		<extends path="stx.test.TestCase"/>
		<_localMocks><c path="Array"><c path="stx.test.mock.Mock"><d/></c></c></_localMocks>
		<_globalMocks><c path="Array"><c path="stx.test.mock.Mock"><d/></c></c></_globalMocks>
		<_runningTest><e path="Bool"/></_runningTest>
		<before public="1" set="method" line="166" override="1"><f a=""><e path="Void"/></f></before>
		<newMock public="1" params="T" set="method" line="171"><f a="c">
	<c path="Class"><c path="newMock.T"/></c>
	<c path="stx.test.mock.Mock"><c path="newMock.T"/></c>
</f></newMock>
		<after public="1" set="method" line="184" override="1"><f a=""><e path="Void"/></f></after>
		<afterAll public="1" set="method" line="201" override="1"><f a=""><e path="Void"/></f></afterAll>
		<new public="1" set="method" line="161"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.test.resources.CollectionTester" params="" file="src/main/haxe/stx/test/resources/BCollectionTester.hx" module="stx.test.resources.BCollectionTester">
		<extends path="stx.test.TestCase"/>
		<testThatTraceWorks public="1" set="method" line="15"><f a=""><e path="Void"/></f></testThatTraceWorks>
		<testThatItXFoldlWorks public="1" set="method" line="20"><f a=""><e path="Void"/></f></testThatItXFoldlWorks>
		<testThatItXFoldrWorks public="1" set="method" line="28"><f a=""><e path="Void"/></f></testThatItXFoldrWorks>
		<testThatItXReversedWorks public="1" set="method" line="36"><f a=""><e path="Void"/></f></testThatItXReversedWorks>
		<testThatItXHeadWorks public="1" set="method" line="42"><f a=""><e path="Void"/></f></testThatItXHeadWorks>
		<testThatItXAppendWorks public="1" set="method" line="48"><f a=""><e path="Void"/></f></testThatItXAppendWorks>
		<testThatItXTailWorks public="1" set="method" line="54"><f a=""><e path="Void"/></f></testThatItXTailWorks>
		<testThatItXTakeWorks public="1" set="method" line="60"><f a=""><e path="Void"/></f></testThatItXTakeWorks>
		<testThatItXDropWorks public="1" set="method" line="74"><f a=""><e path="Void"/></f></testThatItXDropWorks>
		<testThatItXExistsWorks public="1" set="method" line="84"><f a=""><e path="Void"/></f></testThatItXExistsWorks>
		<testThatItXNubWorks public="1" set="method" line="92"><f a=""><e path="Void"/></f></testThatItXNubWorks>
		<testThatItXAtWorks public="1" set="method" line="98"><f a=""><e path="Void"/></f></testThatItXAtWorks>
		<testThatItXMapWorks public="1" set="method" line="106"><f a=""><e path="Void"/></f></testThatItXMapWorks>
		<testThatItXScanlWorks public="1" set="method" line="112"><f a=""><e path="Void"/></f></testThatItXScanlWorks>
		<testThatItXScanl1Works public="1" set="method" line="118"><f a=""><e path="Void"/></f></testThatItXScanl1Works>
		<testThatItXScanrWorks public="1" set="method" line="124"><f a=""><e path="Void"/></f></testThatItXScanrWorks>
		<testThatItXScanr1Works public="1" set="method" line="130"><f a=""><e path="Void"/></f></testThatItXScanr1Works>
		<new public="1" set="method" line="11"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.test.resources.BCollectionTester" params="" file="src/main/haxe/stx/test/resources/BCollectionTester.hx"><main public="1" set="method" line="139" static="1"><f a=""><e path="Void"/></f></main></class>
	<class path="stx.test.ui.Report" params="" file="src/main/haxe/stx/test/ui/Report.hx"><create public="1" set="method" line="31" static="1"><f a="runner:?displaySuccessResults:?headerDisplayMode">
	<c path="stx.test.Runner"/>
	<e path="stx.test.ui.common.SuccessResultsDisplayMode"/>
	<e path="stx.test.ui.common.HeaderDisplayMode"/>
	<c path="stx.test.ui.common.IReport"><d/></c>
</f></create></class>
	<class path="stx.test.ui.common.ClassResult" params="" file="src/main/haxe/stx/test/ui/common/ClassResult.hx">
		<fixtures><c path="Hash"><c path="stx.test.ui.common.FixtureResult"/></c></fixtures>
		<className public="1" set="null"><c path="String"/></className>
		<setupName public="1" set="null"><c path="String"/></setupName>
		<teardownName public="1" set="null"><c path="String"/></teardownName>
		<hasSetup public="1" set="null"><e path="Bool"/></hasSetup>
		<hasTeardown public="1" set="null"><e path="Bool"/></hasTeardown>
		<methods public="1" set="null"><c path="Int"/></methods>
		<stats public="1" set="null"><c path="stx.test.ui.common.ResultStats"/></stats>
		<add public="1" set="method" line="46"><f a="result">
	<c path="stx.test.ui.common.FixtureResult"/>
	<e path="Void"/>
</f></add>
		<get public="1" set="method" line="55"><f a="method">
	<c path="String"/>
	<t path="Null"><c path="stx.test.ui.common.FixtureResult"/></t>
</f></get>
		<exists public="1" set="method" line="59"><f a="method">
	<c path="String"/>
	<e path="Bool"/>
</f></exists>
		<methodNames public="1" set="method" line="63"><f a="?errorsHavePriority">
	<e path="Bool"/>
	<c path="Array"><c path="String"/></c>
</f></methodNames>
		<new public="1" set="method" line="34"><f a="className:setupName:teardownName">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @:todo add documentation
</haxe_doc>
	</class>
	<class path="stx.test.ui.common.FixtureResult" params="" file="src/main/haxe/stx/test/ui/common/FixtureResult.hx">
		<methodName public="1" set="null"><c path="String"/></methodName>
		<hasTestError public="1" set="null"><e path="Bool"/></hasTestError>
		<hasSetupError public="1" set="null"><e path="Bool"/></hasSetupError>
		<hasTeardownError public="1" set="null"><e path="Bool"/></hasTeardownError>
		<hasTimeoutError public="1" set="null"><e path="Bool"/></hasTimeoutError>
		<hasAsyncError public="1" set="null"><e path="Bool"/></hasAsyncError>
		<stats public="1" set="null"><c path="stx.test.ui.common.ResultStats"/></stats>
		<list set="null"><c path="List"><e path="stx.test.Assertation"/></c></list>
		<iterator public="1" set="method" line="46"><f a=""><t path="Iterator"><e path="stx.test.Assertation"/></t></f></iterator>
		<add public="1" set="method" line="50"><f a="assertation">
	<e path="stx.test.Assertation"/>
	<e path="Void"/>
</f></add>
		<new public="1" set="method" line="34"><f a="methodName">
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @:todo add documentation
</haxe_doc>
	</class>
	<enum path="stx.test.ui.common.HeaderDisplayMode" params="" file="src/main/haxe/stx/test/ui/common/HeaderDisplayMode.hx">
		<ShowHeaderWithResults/>
		<NeverShowHeader/>
		<AlwaysShowHeader/>
	</enum>
	<enum path="stx.test.ui.common.SuccessResultsDisplayMode" params="" file="src/main/haxe/stx/test/ui/common/HeaderDisplayMode.hx" module="stx.test.ui.common.HeaderDisplayMode">
		<ShowSuccessResultsWithNoErrors/>
		<NeverShowSuccessResults/>
		<AlwaysShowSuccessResults/>
	</enum>
	<class path="stx.test.ui.common.IReport" params="T" file="src/main/haxe/stx/test/ui/common/IReport.hx" interface="1">
		<displaySuccessResults public="1"><e path="stx.test.ui.common.SuccessResultsDisplayMode"/></displaySuccessResults>
		<displayHeader public="1"><e path="stx.test.ui.common.HeaderDisplayMode"/></displayHeader>
		<setHandler public="1" set="method"><f a="handler">
	<f a="">
		<c path="stx.test.ui.common.IReport.T"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setHandler>
	</class>
	<class path="stx.test.ui.common.PackageResult" params="" file="src/main/haxe/stx/test/ui/common/PackageResult.hx">
		<packageName public="1" set="null"><c path="String"/></packageName>
		<classes><c path="Hash"><c path="stx.test.ui.common.ClassResult"/></c></classes>
		<packages><c path="Hash"><c path="stx.test.ui.common.PackageResult"/></c></packages>
		<stats public="1" set="null"><c path="stx.test.ui.common.ResultStats"/></stats>
		<addResult public="1" set="method" line="39"><f a="result:flattenPackage">
	<c path="stx.test.TestResult"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addResult>
		<addClass public="1" set="method" line="46"><f a="result">
	<c path="stx.test.ui.common.ClassResult"/>
	<e path="Void"/>
</f></addClass>
		<addPackage public="1" set="method" line="51"><f a="result">
	<c path="stx.test.ui.common.PackageResult"/>
	<e path="Void"/>
</f></addPackage>
		<existsPackage public="1" set="method" line="56"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></existsPackage>
		<existsClass public="1" set="method" line="60"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></existsClass>
		<getPackage public="1" set="method" line="64"><f a="name">
	<c path="String"/>
	<c path="stx.test.ui.common.PackageResult"/>
</f></getPackage>
		<getClass public="1" set="method" line="69"><f a="name">
	<c path="String"/>
	<t path="Null"><c path="stx.test.ui.common.ClassResult"/></t>
</f></getClass>
		<classNames public="1" set="method" line="73"><f a="?errorsHavePriority">
	<e path="Bool"/>
	<c path="Array"><c path="String"/></c>
</f></classNames>
		<packageNames public="1" set="method" line="106"><f a="?errorsHavePriority">
	<e path="Bool"/>
	<c path="Array"><c path="String"/></c>
</f></packageNames>
		<createFixture set="method" line="140"><f a="method:assertations">
	<c path="String"/>
	<t path="Iterable"><e path="stx.test.Assertation"/></t>
	<c path="stx.test.ui.common.FixtureResult"/>
</f></createFixture>
		<getOrCreateClass set="method" line="147"><f a="pack:cls:setup:teardown">
	<c path="stx.test.ui.common.PackageResult"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<t path="Null"><c path="stx.test.ui.common.ClassResult"/></t>
</f></getOrCreateClass>
		<getOrCreatePackage set="method" line="154"><f a="pack:flat:ref">
	<c path="String"/>
	<e path="Bool"/>
	<c path="stx.test.ui.common.PackageResult"/>
	<c path="stx.test.ui.common.PackageResult"/>
</f></getOrCreatePackage>
		<new public="1" set="method" line="32"><f a="packageName">
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @:todo add documentation
* @:todo add tests for this class
</haxe_doc>
	</class>
	<class path="stx.test.ui.common.ReportTools" params="" file="src/main/haxe/stx/test/ui/common/ReportTools.hx">
		<hasHeader public="1" set="method" line="22" static="1"><f a="report:stats">
	<c path="stx.test.ui.common.IReport"><d/></c>
	<c path="stx.test.ui.common.ResultStats"/>
	<e path="Bool"/>
</f></hasHeader>
		<skipResult public="1" set="method" line="41" static="1"><f a="report:stats:isOk">
	<c path="stx.test.ui.common.IReport"><d/></c>
	<c path="stx.test.ui.common.ResultStats"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></skipResult>
		<hasOutput public="1" set="method" line="50" static="1"><f a="report:stats">
	<c path="stx.test.ui.common.IReport"><d/></c>
	<c path="stx.test.ui.common.ResultStats"/>
	<e path="Bool"/>
</f></hasOutput>
	</class>
	<class path="stx.test.ui.common.ResultAggregator" params="" file="src/main/haxe/stx/test/ui/common/ResultAggregator.hx">
		<runner><c path="stx.test.Runner"/></runner>
		<flattenPackage><e path="Bool"/></flattenPackage>
		<root public="1" set="null"><c path="stx.test.ui.common.PackageResult"/></root>
		<onStart public="1" set="null"><c path="stx.test.Notifier"/></onStart>
		<onComplete public="1" set="null"><c path="stx.test.Dispatcher"><c path="stx.test.ui.common.PackageResult"/></c></onComplete>
		<onProgress public="1" set="null"><c path="stx.test.Dispatcher"><a>
	<totals><c path="Int"/></totals>
	<done><c path="Int"/></done>
</a></c></onProgress>
		<start set="method" line="48"><f a="runner">
	<c path="stx.test.Runner"/>
	<e path="Void"/>
</f></start>
		<getOrCreatePackage set="method" line="53"><f a="pack:flat:?ref">
	<c path="String"/>
	<e path="Bool"/>
	<c path="stx.test.ui.common.PackageResult"/>
	<c path="stx.test.ui.common.PackageResult"/>
</f></getOrCreatePackage>
		<getOrCreateClass set="method" line="71"><f a="pack:cls:setup:teardown">
	<c path="stx.test.ui.common.PackageResult"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<t path="Null"><c path="stx.test.ui.common.ClassResult"/></t>
</f></getOrCreateClass>
		<createFixture set="method" line="78"><f a="result">
	<c path="stx.test.TestResult"/>
	<c path="stx.test.ui.common.FixtureResult"/>
</f></createFixture>
		<progress set="method" line="85"><f a="e">
	<a>
		<totals><c path="Int"/></totals>
		<result set="null"><c path="stx.test.TestResult"/></result>
		<done><c path="Int"/></done>
	</a>
	<e path="Void"/>
</f></progress>
		<complete set="method" line="90"><f a="runner">
	<c path="stx.test.Runner"/>
	<e path="Void"/>
</f></complete>
		<new public="1" set="method" line="35"><f a="runner:?flattenPackage">
	<c path="stx.test.Runner"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @:todo add documentation
* @:todo add tests for this class
</haxe_doc>
	</class>
	<class path="stx.test.ui.common.ResultStats" params="" file="src/main/haxe/stx/test/ui/common/ResultStats.hx">
		<assertations public="1" set="null"><c path="Int"/></assertations>
		<successes public="1" set="null"><c path="Int"/></successes>
		<failures public="1" set="null"><c path="Int"/></failures>
		<errors public="1" set="null"><c path="Int"/></errors>
		<warnings public="1" set="null"><c path="Int"/></warnings>
		<onAddSuccesses public="1" set="null"><c path="stx.test.Dispatcher"><c path="Int"/></c></onAddSuccesses>
		<onAddFailures public="1" set="null"><c path="stx.test.Dispatcher"><c path="Int"/></c></onAddFailures>
		<onAddErrors public="1" set="null"><c path="stx.test.Dispatcher"><c path="Int"/></c></onAddErrors>
		<onAddWarnings public="1" set="null"><c path="stx.test.Dispatcher"><c path="Int"/></c></onAddWarnings>
		<isOk public="1" set="null"><e path="Bool"/></isOk>
		<hasFailures public="1" set="null"><e path="Bool"/></hasFailures>
		<hasErrors public="1" set="null"><e path="Bool"/></hasErrors>
		<hasWarnings public="1" set="null"><e path="Bool"/></hasWarnings>
		<addSuccesses public="1" set="method" line="57"><f a="v">
	<c path="Int"/>
	<e path="Void"/>
</f></addSuccesses>
		<addFailures public="1" set="method" line="64"><f a="v">
	<c path="Int"/>
	<e path="Void"/>
</f></addFailures>
		<addErrors public="1" set="method" line="73"><f a="v">
	<c path="Int"/>
	<e path="Void"/>
</f></addErrors>
		<addWarnings public="1" set="method" line="82"><f a="v">
	<c path="Int"/>
	<e path="Void"/>
</f></addWarnings>
		<sum public="1" set="method" line="91"><f a="other">
	<c path="stx.test.ui.common.ResultStats"/>
	<e path="Void"/>
</f></sum>
		<subtract public="1" set="method" line="98"><f a="other">
	<c path="stx.test.ui.common.ResultStats"/>
	<e path="Void"/>
</f></subtract>
		<wire public="1" set="method" line="105"><f a="dependant">
	<c path="stx.test.ui.common.ResultStats"/>
	<e path="Void"/>
</f></wire>
		<unwire public="1" set="method" line="113"><f a="dependant">
	<c path="stx.test.ui.common.ResultStats"/>
	<e path="Void"/>
</f></unwire>
		<new public="1" set="method" line="39"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
* @:todo add documentation
</haxe_doc>
	</class>
	<class path="stx.test.ui.text.HtmlReport" params="" file="src/main/haxe/stx/test/ui/text/HtmlReport.hx">
		<implements path="stx.test.ui.common.IReport"><c path="stx.test.ui.text.HtmlReport"/></implements>
		<platform line="49" static="1"><c path="String"/></platform>
		<traceRedirected public="1" set="null"><e path="Bool"/></traceRedirected>
		<displaySuccessResults public="1"><e path="stx.test.ui.common.SuccessResultsDisplayMode"/></displaySuccessResults>
		<displayHeader public="1"><e path="stx.test.ui.common.HeaderDisplayMode"/></displayHeader>
		<handler public="1"><f a="">
	<c path="stx.test.ui.text.HtmlReport"/>
	<e path="Void"/>
</f></handler>
		<aggregator><c path="stx.test.ui.common.ResultAggregator"/></aggregator>
		<oldTrace><d/></oldTrace>
		<_traces><c path="Array"><a>
	<time><c path="Float"/></time>
	<stack><c path="Array"><e path="haxe.StackItem"/></c></stack>
	<msg><c path="String"/></msg>
	<infos><t path="haxe.PosInfos"/></infos>
	<delta><c path="Float"/></delta>
</a></c></_traces>
		<setHandler public="1" set="method" line="74"><f a="handler">
	<f a="">
		<c path="stx.test.ui.text.HtmlReport"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setHandler>
		<redirectTrace public="1" set="method" line="78"><f a=""><e path="Void"/></f></redirectTrace>
		<restoreTrace public="1" set="method" line="86"><f a=""><e path="Void"/></f></restoreTrace>
		<_traceTime><t path="Null"><c path="Float"/></t></_traceTime>
		<_trace set="method" line="93"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></_trace>
		<startTime><c path="Float"/></startTime>
		<start set="method" line="107"><f a="e">
	<c path="stx.test.Runner"/>
	<e path="Void"/>
</f></start>
		<cls set="method" line="111"><f a="stats">
	<c path="stx.test.ui.common.ResultStats"/>
	<c path="String"/>
</f></cls>
		<resultNumbers set="method" line="122"><f a="buf:stats">
	<c path="StringBuf"/>
	<c path="stx.test.ui.common.ResultStats"/>
	<e path="Void"/>
</f></resultNumbers>
		<blockNumbers set="method" line="154"><f a="buf:stats">
	<c path="StringBuf"/>
	<c path="stx.test.ui.common.ResultStats"/>
	<e path="Void"/>
</f></blockNumbers>
		<formatStack set="method" line="160"><f a="stack:?addNL">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<e path="Bool"/>
	<c path="String"/>
</f></formatStack>
		<addFixture set="method" line="181"><f a="buf:result:name:isOk">
	<c path="StringBuf"/>
	<c path="stx.test.ui.common.FixtureResult"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addFixture>
		<addClass set="method" line="228"><f a="buf:result:name:isOk">
	<c path="StringBuf"/>
	<c path="stx.test.ui.common.ClassResult"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addClass>
		<addPackages set="method" line="241"><f a="buf:result:isOk">
	<c path="StringBuf"/>
	<c path="stx.test.ui.common.PackageResult"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addPackages>
		<addPackage set="method" line="250"><f a="buf:result:name:isOk">
	<c path="StringBuf"/>
	<c path="stx.test.ui.common.PackageResult"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addPackage>
		<getHeader public="1" set="method" line="263"><f a=""><c path="String"/></f></getHeader>
		<getTrace public="1" set="method" line="286"><f a=""><c path="String"/></f></getTrace>
		<getResults public="1" set="method" line="313"><f a=""><c path="String"/></f></getResults>
		<getAll public="1" set="method" line="319"><f a=""><c path="String"/></f></getAll>
		<getHtml public="1" set="method" line="326"><f a="?title">
	<c path="String"/>
	<c path="String"/>
</f></getHtml>
		<result><c path="stx.test.ui.common.PackageResult"/></result>
		<complete set="method" line="337"><f a="result">
	<c path="stx.test.ui.common.PackageResult"/>
	<e path="Void"/>
</f></complete>
		<formatTime set="method" line="343"><f a="t">
	<c path="Float"/>
	<c path="String"/>
</f></formatTime>
		<cssStyle set="method" line="347"><f a=""><c path="String"/></f></cssStyle>
		<jsScript set="method" line="557"><f a=""><c path="String"/></f></jsScript>
		<wrapHtml set="method" line="591"><f a="title:s">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></wrapHtml>
		<_handler set="method" line="599"><f a="report">
	<c path="stx.test.ui.text.HtmlReport"/>
	<e path="Void"/>
</f></_handler>
		<new public="1" set="method" line="60"><f a="runner:?outputHandler:?traceRedirected">
	<c path="stx.test.Runner"/>
	<f a="">
		<c path="stx.test.ui.text.HtmlReport"/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @:todo add documentation
</haxe_doc>
	</class>
	<class path="stx.test.ui.text.PlainTextReport" params="" file="src/main/haxe/stx/test/ui/text/PlainTextReport.hx">
		<implements path="stx.test.ui.common.IReport"><c path="stx.test.ui.text.PlainTextReport"/></implements>
		<displaySuccessResults public="1"><e path="stx.test.ui.common.SuccessResultsDisplayMode"/></displaySuccessResults>
		<displayHeader public="1"><e path="stx.test.ui.common.HeaderDisplayMode"/></displayHeader>
		<handler public="1"><f a="">
	<c path="stx.test.ui.text.PlainTextReport"/>
	<e path="Void"/>
</f></handler>
		<aggregator><c path="stx.test.ui.common.ResultAggregator"/></aggregator>
		<newline><c path="String"/></newline>
		<indent><c path="String"/></indent>
		<setHandler public="1" set="method" line="52"><f a="handler">
	<f a="">
		<c path="stx.test.ui.text.PlainTextReport"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setHandler>
		<startTime><c path="Float"/></startTime>
		<start set="method" line="57"><f a="e">
	<c path="stx.test.Runner"/>
	<e path="Void"/>
</f></start>
		<indents set="method" line="61"><f a="c">
	<c path="Int"/>
	<c path="String"/>
</f></indents>
		<dumpStack set="method" line="68"><f a="stack">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="String"/>
</f></dumpStack>
		<addHeader set="method" line="81"><f a="buf:result">
	<c path="StringBuf"/>
	<c path="stx.test.ui.common.PackageResult"/>
	<e path="Void"/>
</f></addHeader>
		<result><c path="stx.test.ui.common.PackageResult"/></result>
		<getResults public="1" set="method" line="106"><f a=""><c path="String"/></f></getResults>
		<complete set="method" line="166"><f a="result">
	<c path="stx.test.ui.common.PackageResult"/>
	<e path="Void"/>
</f></complete>
		<new public="1" set="method" line="42"><f a="runner:?outputHandler">
	<c path="stx.test.Runner"/>
	<f a="">
		<c path="stx.test.ui.text.PlainTextReport"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @:todo add documentation
* @:todo default outputhandler
</haxe_doc>
	</class>
	<class path="stx.test.ui.text.PrintReport" params="" file="src/main/haxe/stx/test/ui/text/PrintReport.hx">
		<extends path="stx.test.ui.text.PlainTextReport"/>
		<useTrace><e path="Bool"/></useTrace>
		<_handler set="method" line="74"><f a="report">
	<c path="stx.test.ui.text.PlainTextReport"/>
	<e path="Void"/>
</f></_handler>
		<_trace set="method" line="80"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></_trace>
		<new public="1" set="method" line="68"><f a="runner">
	<c path="stx.test.Runner"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @:todo add documentation
</haxe_doc>
	</class>
	<class path="stx.time.Clock" params="" file="src/main/haxe/stx/time/Clock.hx" interface="1">
		<__meta__ public="1" line="20" static="1"><d/></__meta__>
		<now public="1" set="method"><f a=""><c path="Date"/></f></now>
	</class>
	<class path="stx.time.SystemClock" params="" file="src/main/haxe/stx/time/Clock.hx" module="stx.time.Clock">
		<implements path="stx.time.Clock"/>
		<now public="1" set="method" line="28"><f a=""><c path="Date"/></f></now>
		<new public="1" set="method" line="25"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.time.MockClock" params="" file="src/main/haxe/stx/time/Clock.hx" module="stx.time.Clock">
		<implements path="stx.time.Clock"/>
		<time public="1"><c path="Float"/></time>
		<now public="1" set="method" line="40"><f a=""><c path="Date"/></f></now>
		<new public="1" set="method" line="36"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="stx.time.ScheduledExecutor" params="" file="src/main/haxe/stx/time/ScheduledExecutor.hx" interface="1">
		<__meta__ public="1" line="29" static="1"><d/></__meta__>
		<once public="1" params="T" set="method">
			<f a="f:ms">
				<f a=""><c path="once.T"/></f>
				<c path="Int"/>
				<c path="stx.Future"><c path="once.T"/></c>
			</f>
			<haxe_doc> Executes the function a single time the specified number of milliseconds 
   * into the future, returning a future of the return value of the function.
   </haxe_doc>
		</once>
		<repeat public="1" params="T" set="method">
			<f a="seed:f:ms:times">
				<c path="repeat.T"/>
				<f a="">
					<c path="repeat.T"/>
					<c path="repeat.T"/>
				</f>
				<c path="Int"/>
				<c path="Int"/>
				<c path="stx.Future"><c path="repeat.T"/></c>
			</f>
			<haxe_doc> Executes the reducer a fixed number of times, each separated by the specified
   * number of milliseconds, returning a future of the completed reduction.
   </haxe_doc>
		</repeat>
		<repeatWhile public="1" params="T" set="method">
			<f a="seed:f:ms:pred">
				<c path="repeatWhile.T"/>
				<f a="">
					<c path="repeatWhile.T"/>
					<c path="repeatWhile.T"/>
				</f>
				<c path="Int"/>
				<f a="">
					<c path="repeatWhile.T"/>
					<e path="Bool"/>
				</f>
				<c path="stx.Future"><c path="repeatWhile.T"/></c>
			</f>
			<haxe_doc><![CDATA[ Executes the reducer while a predicate holds true for the reduction, each 
   * invocation separated by the specified number of milliseconds, returning a
   * future of the completed reduction.
   * <p>
   * The result of the future is always the first reduction for which the 
   * predicate holds false.
   ]]></haxe_doc>
		</repeatWhile>
		<forever public="1" set="method">
			<f a="f:ms">
				<f a=""><e path="Void"/></f>
				<c path="Int"/>
				<c path="stx.Future"><e path="Void"/></c>
			</f>
			<haxe_doc> Executes the function an infinite number of times, each invocation 
   * separated by the specified number of milliseconds. The future will not 
   * return anything, but may be canceled in order to terminate the schedule.
   </haxe_doc>
		</forever>
		<haxe_doc> A scheduled executor service, which can be used to execute tasks at 
 * specified times in the future.
 </haxe_doc>
	</class>
	<class path="stx.time.ScheduledExecutorSystem" params="" file="src/main/haxe/stx/time/ScheduledExecutor.hx" module="stx.time.ScheduledExecutor">
		<implements path="stx.time.ScheduledExecutor"/>
		<once public="1" params="T" set="method" line="62"><f a="f:ms">
	<f a=""><c path="once.T"/></f>
	<c path="Int"/>
	<c path="stx.Future"><c path="once.T"/></c>
</f></once>
		<repeat public="1" params="T" set="method" line="87"><f a="seed:f:ms:times">
	<c path="repeat.T"/>
	<f a="">
		<c path="repeat.T"/>
		<c path="repeat.T"/>
	</f>
	<c path="Int"/>
	<c path="Int"/>
	<c path="stx.Future"><c path="repeat.T"/></c>
</f></repeat>
		<repeatWhile public="1" params="T" set="method" line="114"><f a="seed:f:ms:pred">
	<c path="repeatWhile.T"/>
	<f a="">
		<c path="repeatWhile.T"/>
		<c path="repeatWhile.T"/>
	</f>
	<c path="Int"/>
	<f a="">
		<c path="repeatWhile.T"/>
		<e path="Bool"/>
	</f>
	<c path="stx.Future"><c path="repeatWhile.T"/></c>
</f></repeatWhile>
		<forever public="1" set="method" line="139"><f a="f:ms">
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<c path="stx.Future"><e path="Void"/></c>
</f></forever>
		<new public="1" set="method" line="59"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="stx.util.GuidGenerator" params="" file="src/main/haxe/stx/util/Guid.hx" module="stx.util.Guid"><f a=""><c path="String"/></f></typedef>
	<class path="stx.util.Guid" params="" file="src/main/haxe/stx/util/Guid.hx"><generate public="1" set="method" line="21" static="1"><f a=""><c path="String"/></f></generate></class>
	<class path="stx.util.OrderExtension" params="" file="src/main/haxe/stx/util/OrderExtension.hx">
		<greaterThan public="1" params="T" set="method" line="22" static="1"><f a="order">
	<t path="stx.OrderFunction"><c path="greaterThan.T"/></t>
	<t path="stx.EqualFunction"><c path="greaterThan.T"/></t>
</f></greaterThan>
		<greaterThanOrEqual public="1" params="T" set="method" line="26" static="1"><f a="order">
	<t path="stx.OrderFunction"><c path="greaterThanOrEqual.T"/></t>
	<t path="stx.EqualFunction"><c path="greaterThanOrEqual.T"/></t>
</f></greaterThanOrEqual>
		<lessThan public="1" params="T" set="method" line="30" static="1"><f a="order">
	<t path="stx.OrderFunction"><c path="lessThan.T"/></t>
	<t path="stx.EqualFunction"><c path="lessThan.T"/></t>
</f></lessThan>
		<lessThanOrEqual public="1" params="T" set="method" line="34" static="1"><f a="order">
	<t path="stx.OrderFunction"><c path="lessThanOrEqual.T"/></t>
	<t path="stx.EqualFunction"><c path="lessThanOrEqual.T"/></t>
</f></lessThanOrEqual>
		<equal public="1" params="T" set="method" line="38" static="1"><f a="order">
	<t path="stx.OrderFunction"><c path="equal.T"/></t>
	<t path="stx.EqualFunction"><c path="equal.T"/></t>
</f></equal>
		<notEqual public="1" params="T" set="method" line="42" static="1"><f a="order">
	<t path="stx.OrderFunction"><c path="notEqual.T"/></t>
	<t path="stx.EqualFunction"><c path="notEqual.T"/></t>
</f></notEqual>
	</class>
</haxe>