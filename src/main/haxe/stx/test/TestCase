package stx.test;

import haxe.PosInfos;

import stx.Compare;

@:rtti @:keepSub class TestCase{
  public function new(){}
  public function isTrue(val,?pos:PosInfos):TestArrow{
    return Test.isTrue(val,pos);
  }
  public function isFalse(val,?pos:PosInfos):TestArrow{
    return Test.isFalse(val,pos);
  }
  public function isEqual<T>(val0:T,val1:T,?pos:PosInfos):TestArrow{
    return Test.isEqual(val0,val1,pos);
  }
  public function isNotEqual<T>(val0:T,val1:T,?pos:PosInfos):TestArrow{
    return Test.isNotEqual(val0,val1,pos);
  }
  public function hasFail(fn:Void->Void,?type:Class<Dynamic> ,?pos:PosInfos):TestArrow{
    return Test.hasFail(fn,type,pos);
  }
  public function fails(?err:Fail,?pos:PosInfos):TestArrow{
    return Test.fails(err,pos);
  }
  public function it<T>(msg:String,prd:Predicate<T>,?val:T,?pos:PosInfos):TestArrow{
    return Test.it(msg,prd,val,pos);
  }
}