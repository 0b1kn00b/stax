package stx.ds;

enum LList<E> {
	Cons(e : E, t : LList<E>);
	Nil();
}

enum Input<E> {
	El(e: E);
	Empty();
	EOF();
}

enum IterV<E, A > {
	Done(a: A, e: Input<E>);
	Cont(k: Input<E> -> IterV<E,A>);
}

class IterVs {
	static public function run<E, A >(iter : IterV<E, A >) : A {
		switch iter {
			case Done(a, _): return a;
			case Cont(_) : throw "Computation not finished";
		}
	}
	static public function drop<E,A>(n:Int){
		var step : Input<E> -> IterV<E,A> = null;
		step =
			function(i:Input<E>):IterV<E,A>{
				return 
					switch (i) {
						case El(e)	 	: drop(n-1);
						case Empty 		: Cont(step);
						case EOF 			: Done(null,EOF);
					}
			}
		return n==0 ? Done(null,Empty) : Cont(step);
	}
	static public function take<E,A>(n:Int){
		var stack = [];

		var step : Input<E> -> IterV<E,Array<A>> = null;
			function(i){
				return 
					switch (i) {
						case El(e)	 	: 
							stack.push(e);
							take(n-1);
						case Empty 		: Cont(step);
						case EOF 			: Done(stack,EOF);
					}
			}
		return n==0 ? Done(stack,Empty) : Cont(step);
	}
}

class Examples {
public static function enumerate < E, A > () return
	function (arr : LList<E>, it : IterV < E, A > ) : IterV < E, A > {
		switch (arr) {
			case Nil():
				switch it {
					case Done(_, _) : return it;
					case Cont(k) : return k(EOF);
				}
		return it;
			case Cons(e, rest):
				switch it {
					case Done(_, _) : return it;
					case Cont(k) : return enumerate()(rest, k(El(e)));
				};
		}
	}

inline public static function counter<A>(): IterV<A,Int> return {
	function step(n: Int) return
		function (inp : Input<A>) : IterV < A, Int > return
			switch inp {
				case El(x) : Cont(step(n + 1));
				case Empty : Cont(step(n));
				case EOF : Done(n, EOF);
		}
		Cont(step(0));
	}
}


/**
* ...
* @author
*/

class Main {

	static function main() {
		var list = Cons(5, Cons(7, Cons(6, Nil)));
		var iter = Examples.enumerate()(list, Examples.counter());

		trace("Result " + IterVs.run(iter));
	}

}