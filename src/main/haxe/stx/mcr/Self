package stx.mcr;

import haxe.macro.Expr;
import haxe.macro.Type;
import haxe.macro.Context;

import stx.Log.*;

using stx.Strings;
using stx.plus.Order;
using stx.Option;
using stx.Prelude;
using stx.Tuples;
using stx.Compose;
using stx.ds.Zipper;
using stx.Arrays;

using tink.macro.tools.ExprTools;
using tink.macro.tools.TypeTools;
using tink.macro.tools.Printer;

@:todo('#0b1kn00b: type parameter support, how?')
//doesn't support Self instance variables, local variables or params, only returns.
class SelfMacro{
  static macro function build():Array<Field>{
    //trace(Context.getLocalClass());
    var cls     = Context.getLocalClass();
    var clsr    = cls.get();
    var fields  = Context.getBuildFields();
    var news    = fields.partition(
          function(x){
            return switch (x.kind) {
              case FFun(_)  : true;
              default       : false;
            }
            return true;
          }
        ).into(
          function(l,r){
            return l.map(
              function(f:Field){
                return Zipper.pure(f)
                  .dn(function(x) return x.kind)
                  .dn(function(x):Function {
                    return switch (x) {
                      case FFun(f): f;
                      default     : null;
                    }
                  });
              }
            ).map(
              function(x){
                init(x);
                return x.root;
              }
            ).append(r);
          }
        );
    var olds    = cls.unfold(
      function(v:Ref<ClassType>):Option<Tuple2<Ref<ClassType>, Ref<ClassType>>>{
        return if(v == null){
          None;
        }else{
          var t   = v.get();
          var sc  = t.superClass != null ? t.superClass.t : null;
          Some(tuple2(sc,v));
        }
      }
    ).toArray().dropLeft(1).map(
      function(cls){
        return cls.get();
      }
    ).flatMap(
      function(cls){
        return cls.fields.get()
        .filter(
          function(x){
            return switch (x.type) {
              //only functions (or lazy typed functions);
              case TFun(_,_)  : true;
              case TLazy(fn)  : switch(fn()){
                case TFun(_,_)  : true;
                default         : false;
              }
              default         : false;
            }
          }
        ).filter(
          function(x){
            return !news.forAny(
              function(y){
                return y.name == x.name; //don't include fields overridden in the local class.
              }
            );
          }
        ).filter(
          function(x){
            return meta(x.meta.get()); //include only fields with 'self' metadata.
          }
        );
      }
    ).sortWith(
      function(x,y){
        return Strings.compare(x.name,y.name); //in case multiple similar name fields from inheritance.
      }
    ).nubBy(
      function(x,y){
        return Strings.equals(x.name,y.name);
      }
    ).map(
      function(x){
        var xpr     = Context.getTypedExpr(x.expr());
        var s_rt    = x.meta.get().forAny(function(x) return x.name == "self");
        /*trace(Printer.print(xpr));
        trace(xpr);
        trace(x.params);*/
        var ret_t   = null;
        var arg_t   = null;
        var xpr_o   = null;
        switch (xpr.expr){
          case EFunction(_,f):
            if(s_rt){
              ret_t = TPath({
                pack    : clsr.pack,
                name    : clsr.name,
                params  : clsr.params.map(function(x) return x.t).paramsToComplex()
              });
            }else{
              ret_t = f.ret;
            }
            arg_t   = f.args;
            xpr_o   = 'super.${x.name}('.append(f.args.length == 0 ? '' : f.args.map(function(x) return x.name).foldl1(
              function(memo,next){
                var o = memo.append(',').append(next);
                return o;
              }
            )).append(')');
            //trace(xpr_o);

          default :
        }
        var xpr_o1  = 'self'.define({expr:ECast(Context.parse(xpr_o,Context.currentPos()),ret_t) , pos : Context.currentPos() },ret_t);
        var fld : Field =
        {
          access : [AOverride],
          name : x.name,
          kind : FieldType.FFun({
            args    : arg_t,
            ret     : ret_t,
            expr    : [xpr_o1,Context.parse('return self',Context.currentPos())].toBlock(),
            params  : x.params.map(function(x):TypeParamDecl{ return { name : x.name };})
          }),
          pos  : Context.currentPos(),
        }
        //trace(Printer.printField('',fld));
        return fld;
      }
    );
    return news.append(olds);
  }
  #if macro
    /**
      Identifies if superclass has modified this function by locating the function metadata 'self'.
    */
    static function meta(arr:Array<MetadataEntry>):Bool{
      return arr.forAny(function(x){return x.name == 'self';});
    }
    /**
      Identifies if superclass has modified function parameters by locating the type parameter 'SLF'.
    */
    static function idt(f:Function):Bool{
      return f.params.forAny(function(x){return x.name=="SLF";});
    }
    /**
      Instigates Self hierarchy by replacing Self references with local type, and leaving marks for subclasses.
    */
    static function init(zf:Zipper<Field,Dynamic,Function,Dynamic>){
      var val               = zf.value();
      var tp                = Context.getLocalClass().get();
      var pt : TypePath     = 
      {
        name    : tp.name,
        pack    : tp.pack,
        params  : tp.params.map(function(x) return x.t).paramsToComplex()
      }
      var hasRet  = false;
      val.ret = val.ret.crawl(
        Compose.unit(),
        function(ct){
          return switch (ct) {
            case TPath(tp) if(tp.name == 'Self') :
              hasRet   = true;
              TPath({name : pt.name, pack : pt.pack, params : pt.params});
            default         : ct;
          }
        },
        Context.currentPos()
      );
      if(hasRet){
        zf.root.meta.push({
          name    : 'self',
          params  : [],
          pos     : Context.currentPos()
        });
      }
    }
  #end    
}
@:autoBuild(stx.mcr.SelfMacro.build()) interface SelfSupport{

}